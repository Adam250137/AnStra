
RF-2-nadajnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000867c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008788  08008788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008838  08008838  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008838  08008838  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008838  08008838  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c4  200001e0  08008a20  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015a4  08008a20  000215a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001456f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fcc  00000000  00000000  00034778  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  00037748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  00038470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a053  00000000  00000000  00039050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2b3  00000000  00000000  000530a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087905  00000000  00000000  00061356  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8c5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003708  00000000  00000000  000e8cd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008770 	.word	0x08008770

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008770 	.word	0x08008770

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fa50 	bl	8000604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f81c 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8a0 	bl	80002ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016c:	f000 f874 	bl	8000258 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000170:	f007 fa10 	bl	8007594 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &RxData[RxDataIndex], 1);
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <main+0x38>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	461a      	mov	r2, r3
 800017a:	4b07      	ldr	r3, [pc, #28]	; (8000198 <main+0x3c>)
 800017c:	4413      	add	r3, r2
 800017e:	2201      	movs	r2, #1
 8000180:	4619      	mov	r1, r3
 8000182:	4806      	ldr	r0, [pc, #24]	; (800019c <main+0x40>)
 8000184:	f003 f831 	bl	80031ea <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8000188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800018c:	f000 fa9c 	bl	80006c8 <HAL_Delay>
 8000190:	e7fa      	b.n	8000188 <main+0x2c>
 8000192:	bf00      	nop
 8000194:	200001fc 	.word	0x200001fc
 8000198:	20000498 	.word	0x20000498
 800019c:	20000500 	.word	0x20000500

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b094      	sub	sp, #80	; 0x50
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f007 fec4 	bl	8007f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	f107 0314 	add.w	r3, r7, #20
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
 80001c0:	60da      	str	r2, [r3, #12]
 80001c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d0:	2301      	movs	r3, #1
 80001d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001de:	2301      	movs	r3, #1
 80001e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e2:	2302      	movs	r3, #2
 80001e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f6:	4618      	mov	r0, r3
 80001f8:	f002 fa94 	bl	8002724 <HAL_RCC_OscConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000202:	f000 f8cb 	bl	800039c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000206:	230f      	movs	r3, #15
 8000208:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020a:	2302      	movs	r3, #2
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000216:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2101      	movs	r1, #1
 8000222:	4618      	mov	r0, r3
 8000224:	f002 fcfe 	bl	8002c24 <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800022e:	f000 f8b5 	bl	800039c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000232:	2310      	movs	r3, #16
 8000234:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800023a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fe8c 	bl	8002f5c <HAL_RCCEx_PeriphCLKConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800024a:	f000 f8a7 	bl	800039c <Error_Handler>
  }
}
 800024e:	bf00      	nop
 8000250:	3750      	adds	r7, #80	; 0x50
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <MX_USART2_UART_Init+0x4c>)
 800025e:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <MX_USART2_UART_Init+0x50>)
 8000260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000262:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000264:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <MX_USART2_UART_Init+0x4c>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <MX_USART2_UART_Init+0x4c>)
 800027e:	220c      	movs	r2, #12
 8000280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <MX_USART2_UART_Init+0x4c>)
 800028a:	2200      	movs	r2, #0
 800028c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000290:	f002 ff1a 	bl	80030c8 <HAL_UART_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800029a:	f000 f87f 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000500 	.word	0x20000500
 80002a8:	40004400 	.word	0x40004400

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	4b33      	ldr	r3, [pc, #204]	; (8000390 <MX_GPIO_Init+0xe4>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a32      	ldr	r2, [pc, #200]	; (8000390 <MX_GPIO_Init+0xe4>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b30      	ldr	r3, [pc, #192]	; (8000390 <MX_GPIO_Init+0xe4>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0310 	and.w	r3, r3, #16
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <MX_GPIO_Init+0xe4>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a2c      	ldr	r2, [pc, #176]	; (8000390 <MX_GPIO_Init+0xe4>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <MX_GPIO_Init+0xe4>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	4b27      	ldr	r3, [pc, #156]	; (8000390 <MX_GPIO_Init+0xe4>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a26      	ldr	r2, [pc, #152]	; (8000390 <MX_GPIO_Init+0xe4>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <MX_GPIO_Init+0xe4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030e:	4821      	ldr	r0, [pc, #132]	; (8000394 <MX_GPIO_Init+0xe8>)
 8000310:	f000 fd14 	bl	8000d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_RESET_GPIO_Port, RF_RESET_Pin, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800031a:	481e      	ldr	r0, [pc, #120]	; (8000394 <MX_GPIO_Init+0xe8>)
 800031c:	f000 fd0e 	bl	8000d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CONFIG_GPIO_Port, RF_CONFIG_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2101      	movs	r1, #1
 8000324:	481c      	ldr	r0, [pc, #112]	; (8000398 <MX_GPIO_Init+0xec>)
 8000326:	f000 fd09 	bl	8000d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SLEEP_GPIO_Port, RF_SLEEP_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2102      	movs	r1, #2
 800032e:	481a      	ldr	r0, [pc, #104]	; (8000398 <MX_GPIO_Init+0xec>)
 8000330:	f000 fd04 	bl	8000d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin RF_RESET_Pin */
  GPIO_InitStruct.Pin = LED_Pin|RF_RESET_Pin;
 8000334:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	4811      	ldr	r0, [pc, #68]	; (8000394 <MX_GPIO_Init+0xe8>)
 800034e:	f000 fb9b 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_STATUS_Pin */
  GPIO_InitStruct.Pin = RF_STATUS_Pin;
 8000352:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	4619      	mov	r1, r3
 8000366:	480b      	ldr	r0, [pc, #44]	; (8000394 <MX_GPIO_Init+0xe8>)
 8000368:	f000 fb8e 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CONFIG_Pin RF_SLEEP_Pin */
  GPIO_InitStruct.Pin = RF_CONFIG_Pin|RF_SLEEP_Pin;
 800036c:	2303      	movs	r3, #3
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	4619      	mov	r1, r3
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_GPIO_Init+0xec>)
 8000384:	f000 fb80 	bl	8000a88 <HAL_GPIO_Init>

}
 8000388:	bf00      	nop
 800038a:	3720      	adds	r7, #32
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000
 8000394:	40011000 	.word	0x40011000
 8000398:	40010800 	.word	0x40010800

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a14      	ldr	r2, [pc, #80]	; (8000404 <HAL_MspInit+0x5c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <HAL_MspInit+0x5c>)
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d0:	61d3      	str	r3, [r2, #28]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <HAL_MspInit+0x60>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <HAL_MspInit+0x60>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000
 8000408:	40010000 	.word	0x40010000

0800040c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a1f      	ldr	r2, [pc, #124]	; (80004a4 <HAL_UART_MspInit+0x98>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d137      	bne.n	800049c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <HAL_UART_MspInit+0x9c>)
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	4a1d      	ldr	r2, [pc, #116]	; (80004a8 <HAL_UART_MspInit+0x9c>)
 8000432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000436:	61d3      	str	r3, [r2, #28]
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <HAL_UART_MspInit+0x9c>)
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <HAL_UART_MspInit+0x9c>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <HAL_UART_MspInit+0x9c>)
 800044a:	f043 0304 	orr.w	r3, r3, #4
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <HAL_UART_MspInit+0x9c>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800045c:	2304      	movs	r3, #4
 800045e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000460:	2302      	movs	r3, #2
 8000462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000464:	2303      	movs	r3, #3
 8000466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	480f      	ldr	r0, [pc, #60]	; (80004ac <HAL_UART_MspInit+0xa0>)
 8000470:	f000 fb0a 	bl	8000a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000474:	2308      	movs	r3, #8
 8000476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4619      	mov	r1, r3
 8000486:	4809      	ldr	r0, [pc, #36]	; (80004ac <HAL_UART_MspInit+0xa0>)
 8000488:	f000 fafe 	bl	8000a88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2100      	movs	r1, #0
 8000490:	2026      	movs	r0, #38	; 0x26
 8000492:	f000 fa12 	bl	80008ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000496:	2026      	movs	r0, #38	; 0x26
 8000498:	f000 fa2b 	bl	80008f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40004400 	.word	0x40004400
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <HardFault_Handler+0x4>

080004c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <MemManage_Handler+0x4>

080004c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <BusFault_Handler+0x4>

080004ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <UsageFault_Handler+0x4>

080004d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fc:	f000 f8c8 	bl	8000690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800050a:	f000 fd79 	bl	8001000 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200012b4 	.word	0x200012b4

08000518 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800051e:	f000 fd6f 	bl	8001000 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200012b4 	.word	0x200012b4

0800052c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <USART2_IRQHandler+0x10>)
 8000532:	f002 fe8b 	bl	800324c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000500 	.word	0x20000500

08000540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000548:	4a14      	ldr	r2, [pc, #80]	; (800059c <_sbrk+0x5c>)
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <_sbrk+0x60>)
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <_sbrk+0x64>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <_sbrk+0x64>)
 800055e:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <_sbrk+0x68>)
 8000560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <_sbrk+0x64>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	429a      	cmp	r2, r3
 800056e:	d207      	bcs.n	8000580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000570:	f007 fcba 	bl	8007ee8 <__errno>
 8000574:	4602      	mov	r2, r0
 8000576:	230c      	movs	r3, #12
 8000578:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	e009      	b.n	8000594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <_sbrk+0x64>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000586:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <_sbrk+0x64>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4413      	add	r3, r2
 800058e:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <_sbrk+0x64>)
 8000590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000592:	68fb      	ldr	r3, [r7, #12]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20005000 	.word	0x20005000
 80005a0:	00000400 	.word	0x00000400
 80005a4:	20000200 	.word	0x20000200
 80005a8:	200015a8 	.word	0x200015a8

080005ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005de:	f7ff ffe5 	bl	80005ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005e2:	f007 fc87 	bl	8007ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e6:	f7ff fdb9 	bl	800015c <main>
  bx lr
 80005ea:	4770      	bx	lr
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80005f4:	08008840 	.word	0x08008840
  ldr r2, =_sbss
 80005f8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80005fc:	200015a4 	.word	0x200015a4

08000600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_2_IRQHandler>
	...

08000604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <HAL_Init+0x28>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_Init+0x28>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f945 	bl	80008a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f808 	bl	8000630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000620:	f7ff fec2 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40022000 	.word	0x40022000

08000630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_InitTick+0x54>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_InitTick+0x58>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	fbb3 f3f1 	udiv	r3, r3, r1
 800064a:	fbb2 f3f3 	udiv	r3, r2, r3
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f95d 	bl	800090e <HAL_SYSTICK_Config>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	e00e      	b.n	800067c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d80a      	bhi.n	800067a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000664:	2200      	movs	r2, #0
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	f04f 30ff 	mov.w	r0, #4294967295
 800066c:	f000 f925 	bl	80008ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_InitTick+0x5c>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000676:	2300      	movs	r3, #0
 8000678:	e000      	b.n	800067c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	20000008 	.word	0x20000008
 800068c:	20000004 	.word	0x20000004

08000690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_IncTick+0x1c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_IncTick+0x20>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4413      	add	r3, r2
 80006a0:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <HAL_IncTick+0x20>)
 80006a2:	6013      	str	r3, [r2, #0]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	20000008 	.word	0x20000008
 80006b0:	2000061c 	.word	0x2000061c

080006b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return uwTick;
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <HAL_GetTick+0x10>)
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	2000061c 	.word	0x2000061c

080006c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d0:	f7ff fff0 	bl	80006b4 <HAL_GetTick>
 80006d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e0:	d005      	beq.n	80006ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_Delay+0x40>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ee:	bf00      	nop
 80006f0:	f7ff ffe0 	bl	80006b4 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d8f7      	bhi.n	80006f0 <HAL_Delay+0x28>
  {
  }
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000008 	.word	0x20000008

0800070c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073e:	4a04      	ldr	r2, [pc, #16]	; (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	60d3      	str	r3, [r2, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <__NVIC_GetPriorityGrouping+0x18>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	f003 0307 	and.w	r3, r3, #7
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	db0b      	blt.n	800079a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 021f 	and.w	r2, r3, #31
 8000788:	4906      	ldr	r1, [pc, #24]	; (80007a4 <__NVIC_EnableIRQ+0x34>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	2001      	movs	r0, #1
 8000792:	fa00 f202 	lsl.w	r2, r0, r2
 8000796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100

080007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db0a      	blt.n	80007d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	490c      	ldr	r1, [pc, #48]	; (80007f4 <__NVIC_SetPriority+0x4c>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	0112      	lsls	r2, r2, #4
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	440b      	add	r3, r1
 80007cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d0:	e00a      	b.n	80007e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4908      	ldr	r1, [pc, #32]	; (80007f8 <__NVIC_SetPriority+0x50>)
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	3b04      	subs	r3, #4
 80007e0:	0112      	lsls	r2, r2, #4
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	761a      	strb	r2, [r3, #24]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	f1c3 0307 	rsb	r3, r3, #7
 8000816:	2b04      	cmp	r3, #4
 8000818:	bf28      	it	cs
 800081a:	2304      	movcs	r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3304      	adds	r3, #4
 8000822:	2b06      	cmp	r3, #6
 8000824:	d902      	bls.n	800082c <NVIC_EncodePriority+0x30>
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3b03      	subs	r3, #3
 800082a:	e000      	b.n	800082e <NVIC_EncodePriority+0x32>
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	f04f 32ff 	mov.w	r2, #4294967295
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43da      	mvns	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	401a      	ands	r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000844:	f04f 31ff 	mov.w	r1, #4294967295
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43d9      	mvns	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	4313      	orrs	r3, r2
         );
}
 8000856:	4618      	mov	r0, r3
 8000858:	3724      	adds	r7, #36	; 0x24
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000870:	d301      	bcc.n	8000876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000872:	2301      	movs	r3, #1
 8000874:	e00f      	b.n	8000896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <SysTick_Config+0x40>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087e:	210f      	movs	r1, #15
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f7ff ff90 	bl	80007a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <SysTick_Config+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <SysTick_Config+0x40>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff2d 	bl	800070c <__NVIC_SetPriorityGrouping>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008cc:	f7ff ff42 	bl	8000754 <__NVIC_GetPriorityGrouping>
 80008d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff90 	bl	80007fc <NVIC_EncodePriority>
 80008dc:	4602      	mov	r2, r0
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff5f 	bl	80007a8 <__NVIC_SetPriority>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff35 	bl	8000770 <__NVIC_EnableIRQ>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffa2 	bl	8000860 <SysTick_Config>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000938:	2b02      	cmp	r3, #2
 800093a:	d008      	beq.n	800094e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2204      	movs	r2, #4
 8000940:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e020      	b.n	8000990 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 020e 	bic.w	r2, r2, #14
 800095c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0201 	bic.w	r2, r2, #1
 800096c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000976:	2101      	movs	r1, #1
 8000978:	fa01 f202 	lsl.w	r2, r1, r2
 800097c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800098e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
	...

0800099c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d005      	beq.n	80009be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2204      	movs	r2, #4
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e051      	b.n	8000a62 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 020e 	bic.w	r2, r2, #14
 80009cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f022 0201 	bic.w	r2, r2, #1
 80009dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <HAL_DMA_Abort_IT+0xd0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d029      	beq.n	8000a3c <HAL_DMA_Abort_IT+0xa0>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <HAL_DMA_Abort_IT+0xd4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d022      	beq.n	8000a38 <HAL_DMA_Abort_IT+0x9c>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a1f      	ldr	r2, [pc, #124]	; (8000a74 <HAL_DMA_Abort_IT+0xd8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d01a      	beq.n	8000a32 <HAL_DMA_Abort_IT+0x96>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <HAL_DMA_Abort_IT+0xdc>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d012      	beq.n	8000a2c <HAL_DMA_Abort_IT+0x90>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_DMA_Abort_IT+0xe0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d00a      	beq.n	8000a26 <HAL_DMA_Abort_IT+0x8a>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <HAL_DMA_Abort_IT+0xe4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d102      	bne.n	8000a20 <HAL_DMA_Abort_IT+0x84>
 8000a1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a1e:	e00e      	b.n	8000a3e <HAL_DMA_Abort_IT+0xa2>
 8000a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a24:	e00b      	b.n	8000a3e <HAL_DMA_Abort_IT+0xa2>
 8000a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2a:	e008      	b.n	8000a3e <HAL_DMA_Abort_IT+0xa2>
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	e005      	b.n	8000a3e <HAL_DMA_Abort_IT+0xa2>
 8000a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a36:	e002      	b.n	8000a3e <HAL_DMA_Abort_IT+0xa2>
 8000a38:	2310      	movs	r3, #16
 8000a3a:	e000      	b.n	8000a3e <HAL_DMA_Abort_IT+0xa2>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <HAL_DMA_Abort_IT+0xe8>)
 8000a40:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2201      	movs	r2, #1
 8000a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	4798      	blx	r3
    } 
  }
  return status;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40020008 	.word	0x40020008
 8000a70:	4002001c 	.word	0x4002001c
 8000a74:	40020030 	.word	0x40020030
 8000a78:	40020044 	.word	0x40020044
 8000a7c:	40020058 	.word	0x40020058
 8000a80:	4002006c 	.word	0x4002006c
 8000a84:	40020000 	.word	0x40020000

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b08b      	sub	sp, #44	; 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e127      	b.n	8000cec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8116 	bne.w	8000ce6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b12      	cmp	r3, #18
 8000ac0:	d034      	beq.n	8000b2c <HAL_GPIO_Init+0xa4>
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d80d      	bhi.n	8000ae2 <HAL_GPIO_Init+0x5a>
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d02b      	beq.n	8000b22 <HAL_GPIO_Init+0x9a>
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d804      	bhi.n	8000ad8 <HAL_GPIO_Init+0x50>
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d031      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d01c      	beq.n	8000b10 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ad6:	e048      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d043      	beq.n	8000b64 <HAL_GPIO_Init+0xdc>
 8000adc:	2b11      	cmp	r3, #17
 8000ade:	d01b      	beq.n	8000b18 <HAL_GPIO_Init+0x90>
          break;
 8000ae0:	e043      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ae2:	4a89      	ldr	r2, [pc, #548]	; (8000d08 <HAL_GPIO_Init+0x280>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d026      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
 8000ae8:	4a87      	ldr	r2, [pc, #540]	; (8000d08 <HAL_GPIO_Init+0x280>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d806      	bhi.n	8000afc <HAL_GPIO_Init+0x74>
 8000aee:	4a87      	ldr	r2, [pc, #540]	; (8000d0c <HAL_GPIO_Init+0x284>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d020      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
 8000af4:	4a86      	ldr	r2, [pc, #536]	; (8000d10 <HAL_GPIO_Init+0x288>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d01d      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
          break;
 8000afa:	e036      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000afc:	4a85      	ldr	r2, [pc, #532]	; (8000d14 <HAL_GPIO_Init+0x28c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d019      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
 8000b02:	4a85      	ldr	r2, [pc, #532]	; (8000d18 <HAL_GPIO_Init+0x290>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d016      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
 8000b08:	4a84      	ldr	r2, [pc, #528]	; (8000d1c <HAL_GPIO_Init+0x294>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d013      	beq.n	8000b36 <HAL_GPIO_Init+0xae>
          break;
 8000b0e:	e02c      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	623b      	str	r3, [r7, #32]
          break;
 8000b16:	e028      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	e023      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	3308      	adds	r3, #8
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e01e      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	330c      	adds	r3, #12
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e019      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d102      	bne.n	8000b44 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	623b      	str	r3, [r7, #32]
          break;
 8000b42:	e012      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d105      	bne.n	8000b58 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	611a      	str	r2, [r3, #16]
          break;
 8000b56:	e008      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	615a      	str	r2, [r3, #20]
          break;
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
          break;
 8000b68:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	2bff      	cmp	r3, #255	; 0xff
 8000b6e:	d801      	bhi.n	8000b74 <HAL_GPIO_Init+0xec>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	e001      	b.n	8000b78 <HAL_GPIO_Init+0xf0>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3304      	adds	r3, #4
 8000b78:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	2bff      	cmp	r3, #255	; 0xff
 8000b7e:	d802      	bhi.n	8000b86 <HAL_GPIO_Init+0xfe>
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	e002      	b.n	8000b8c <HAL_GPIO_Init+0x104>
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	3b08      	subs	r3, #8
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	210f      	movs	r1, #15
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	6a39      	ldr	r1, [r7, #32]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 8096 	beq.w	8000ce6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bba:	4b59      	ldr	r3, [pc, #356]	; (8000d20 <HAL_GPIO_Init+0x298>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a58      	ldr	r2, [pc, #352]	; (8000d20 <HAL_GPIO_Init+0x298>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b56      	ldr	r3, [pc, #344]	; (8000d20 <HAL_GPIO_Init+0x298>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bd2:	4a54      	ldr	r2, [pc, #336]	; (8000d24 <HAL_GPIO_Init+0x29c>)
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3302      	adds	r3, #2
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	220f      	movs	r2, #15
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4b      	ldr	r2, [pc, #300]	; (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d013      	beq.n	8000c26 <HAL_GPIO_Init+0x19e>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d00d      	beq.n	8000c22 <HAL_GPIO_Init+0x19a>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a49      	ldr	r2, [pc, #292]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d007      	beq.n	8000c1e <HAL_GPIO_Init+0x196>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a48      	ldr	r2, [pc, #288]	; (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_GPIO_Init+0x192>
 8000c16:	2303      	movs	r3, #3
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x1a0>
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	e004      	b.n	8000c28 <HAL_GPIO_Init+0x1a0>
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e002      	b.n	8000c28 <HAL_GPIO_Init+0x1a0>
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <HAL_GPIO_Init+0x1a0>
 8000c26:	2300      	movs	r3, #0
 8000c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c2a:	f002 0203 	and.w	r2, r2, #3
 8000c2e:	0092      	lsls	r2, r2, #2
 8000c30:	4093      	lsls	r3, r2
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c38:	493a      	ldr	r1, [pc, #232]	; (8000d24 <HAL_GPIO_Init+0x29c>)
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d006      	beq.n	8000c60 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c52:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	4938      	ldr	r1, [pc, #224]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
 8000c5e:	e006      	b.n	8000c6e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	4933      	ldr	r1, [pc, #204]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	492e      	ldr	r1, [pc, #184]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	604b      	str	r3, [r1, #4]
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4929      	ldr	r1, [pc, #164]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4924      	ldr	r1, [pc, #144]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	608b      	str	r3, [r1, #8]
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	491f      	ldr	r1, [pc, #124]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	491a      	ldr	r1, [pc, #104]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60cb      	str	r3, [r1, #12]
 8000cd6:	e006      	b.n	8000ce6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	4915      	ldr	r1, [pc, #84]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	3301      	adds	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f47f aed0 	bne.w	8000a9c <HAL_GPIO_Init+0x14>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	372c      	adds	r7, #44	; 0x2c
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	10210000 	.word	0x10210000
 8000d0c:	10110000 	.word	0x10110000
 8000d10:	10120000 	.word	0x10120000
 8000d14:	10310000 	.word	0x10310000
 8000d18:	10320000 	.word	0x10320000
 8000d1c:	10220000 	.word	0x10220000
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	40010c00 	.word	0x40010c00
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40011400 	.word	0x40011400
 8000d38:	40010400 	.word	0x40010400

08000d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d4c:	787b      	ldrb	r3, [r7, #1]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d58:	e003      	b.n	8000d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d5a:	887b      	ldrh	r3, [r7, #2]
 8000d5c:	041a      	lsls	r2, r3, #16
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	611a      	str	r2, [r3, #16]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d7e:	887a      	ldrh	r2, [r7, #2]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4013      	ands	r3, r2
 8000d84:	041a      	lsls	r2, r3, #16
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43d9      	mvns	r1, r3
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	400b      	ands	r3, r1
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	611a      	str	r2, [r3, #16]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da0:	b08b      	sub	sp, #44	; 0x2c
 8000da2:	af06      	add	r7, sp, #24
 8000da4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e0fd      	b.n	8000fac <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d106      	bne.n	8000dca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f006 fddd 	bl	8007984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fe48 	bl	8003a6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	687e      	ldr	r6, [r7, #4]
 8000de4:	466d      	mov	r5, sp
 8000de6:	f106 0410 	add.w	r4, r6, #16
 8000dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	602b      	str	r3, [r5, #0]
 8000df2:	1d33      	adds	r3, r6, #4
 8000df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000df6:	6838      	ldr	r0, [r7, #0]
 8000df8:	f002 fe12 	bl	8003a20 <USB_CoreInit>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2202      	movs	r2, #2
 8000e06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e0ce      	b.n	8000fac <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 fe43 	bl	8003aa0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	e04c      	b.n	8000eba <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	3301      	adds	r3, #1
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	440b      	add	r3, r1
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	b298      	uxth	r0, r3
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3336      	adds	r3, #54	; 0x36
 8000e5e:	4602      	mov	r2, r0
 8000e60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3303      	adds	r3, #3
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e78:	7bfa      	ldrb	r2, [r7, #15]
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	440b      	add	r3, r1
 8000e86:	3338      	adds	r3, #56	; 0x38
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	333c      	adds	r3, #60	; 0x3c
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ea0:	7bfa      	ldrb	r2, [r7, #15]
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	440b      	add	r3, r1
 8000eae:	3340      	adds	r3, #64	; 0x40
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	7bfa      	ldrb	r2, [r7, #15]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3ad      	bcc.n	8000e20 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e044      	b.n	8000f54 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	440b      	add	r3, r1
 8000eee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	3301      	adds	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	7bfa      	ldrb	r2, [r7, #15]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d3b5      	bcc.n	8000eca <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	687e      	ldr	r6, [r7, #4]
 8000f66:	466d      	mov	r5, sp
 8000f68:	f106 0410 	add.w	r4, r6, #16
 8000f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	602b      	str	r3, [r5, #0]
 8000f74:	1d33      	adds	r3, r6, #4
 8000f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f78:	6838      	ldr	r0, [r7, #0]
 8000f7a:	f002 fd9d 	bl	8003ab8 <USB_DevInit>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2202      	movs	r2, #2
 8000f88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e00d      	b.n	8000fac <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 ff0e 	bl	8005dc6 <USB_DevDisconnect>

  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_PCD_Start+0x16>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e016      	b.n	8000ff8 <HAL_PCD_Start+0x44>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 fd32 	bl	8003a40 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000fdc:	2101      	movs	r1, #1
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f006 ff4b 	bl	8007e7a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 fee2 	bl	8005db2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f004 fee4 	bl	8005dda <USB_ReadInterrupts>
 8001012:	4603      	mov	r3, r0
 8001014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800101c:	d102      	bne.n	8001024 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 fb61 	bl	80016e6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fed6 	bl	8005dda <USB_ReadInterrupts>
 800102e:	4603      	mov	r3, r0
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001038:	d112      	bne.n	8001060 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001042:	b29a      	uxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800104c:	b292      	uxth	r2, r2
 800104e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f006 fd19 	bl	8007a8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001058:	2100      	movs	r1, #0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f925 	bl	80012aa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f004 feb8 	bl	8005dda <USB_ReadInterrupts>
 800106a:	4603      	mov	r3, r0
 800106c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001074:	d10b      	bne.n	800108e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800107e:	b29a      	uxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001088:	b292      	uxth	r2, r2
 800108a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fea1 	bl	8005dda <USB_ReadInterrupts>
 8001098:	4603      	mov	r3, r0
 800109a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010a2:	d10b      	bne.n	80010bc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010b6:	b292      	uxth	r2, r2
 80010b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fe8a 	bl	8005dda <USB_ReadInterrupts>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010d0:	d126      	bne.n	8001120 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0204 	bic.w	r2, r2, #4
 80010e4:	b292      	uxth	r2, r2
 80010e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0208 	bic.w	r2, r2, #8
 80010fc:	b292      	uxth	r2, r2
 80010fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f006 fcfa 	bl	8007afc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001110:	b29a      	uxth	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800111a:	b292      	uxth	r2, r2
 800111c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f004 fe58 	bl	8005dda <USB_ReadInterrupts>
 800112a:	4603      	mov	r3, r0
 800112c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001134:	f040 8084 	bne.w	8001240 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	77fb      	strb	r3, [r7, #31]
 800113c:	e011      	b.n	8001162 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	7ffb      	ldrb	r3, [r7, #31]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	441a      	add	r2, r3
 800114a:	7ffb      	ldrb	r3, [r7, #31]
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	b292      	uxth	r2, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	f107 0120 	add.w	r1, r7, #32
 8001156:	440b      	add	r3, r1
 8001158:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800115c:	7ffb      	ldrb	r3, [r7, #31]
 800115e:	3301      	adds	r3, #1
 8001160:	77fb      	strb	r3, [r7, #31]
 8001162:	7ffb      	ldrb	r3, [r7, #31]
 8001164:	2b07      	cmp	r3, #7
 8001166:	d9ea      	bls.n	800113e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0201 	orr.w	r2, r2, #1
 800117a:	b292      	uxth	r2, r2
 800117c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0201 	bic.w	r2, r2, #1
 8001192:	b292      	uxth	r2, r2
 8001194:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001198:	bf00      	nop
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f6      	beq.n	800119a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011be:	b292      	uxth	r2, r2
 80011c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	77fb      	strb	r3, [r7, #31]
 80011c8:	e010      	b.n	80011ec <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	4611      	mov	r1, r2
 80011d2:	7ffa      	ldrb	r2, [r7, #31]
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	440a      	add	r2, r1
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	f107 0120 	add.w	r1, r7, #32
 80011de:	440b      	add	r3, r1
 80011e0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80011e4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	3301      	adds	r3, #1
 80011ea:	77fb      	strb	r3, [r7, #31]
 80011ec:	7ffb      	ldrb	r3, [r7, #31]
 80011ee:	2b07      	cmp	r3, #7
 80011f0:	d9eb      	bls.n	80011ca <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0208 	orr.w	r2, r2, #8
 8001204:	b292      	uxth	r2, r2
 8001206:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800121c:	b292      	uxth	r2, r2
 800121e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	b292      	uxth	r2, r2
 8001236:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f006 fc44 	bl	8007ac8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f004 fdc8 	bl	8005dda <USB_ReadInterrupts>
 800124a:	4603      	mov	r3, r0
 800124c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001254:	d10e      	bne.n	8001274 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800125e:	b29a      	uxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001268:	b292      	uxth	r2, r2
 800126a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f006 fbfd 	bl	8007a6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fdae 	bl	8005dda <USB_ReadInterrupts>
 800127e:	4603      	mov	r3, r0
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001288:	d10b      	bne.n	80012a2 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800129c:	b292      	uxth	r2, r2
 800129e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_PCD_SetAddress+0x1a>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e013      	b.n	80012ec <HAL_PCD_SetAddress+0x42>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	78fa      	ldrb	r2, [r7, #3]
 80012d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	78fa      	ldrb	r2, [r7, #3]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 fd55 	bl	8005d8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	4608      	mov	r0, r1
 80012fe:	4611      	mov	r1, r2
 8001300:	461a      	mov	r2, r3
 8001302:	4603      	mov	r3, r0
 8001304:	70fb      	strb	r3, [r7, #3]
 8001306:	460b      	mov	r3, r1
 8001308:	803b      	strh	r3, [r7, #0]
 800130a:	4613      	mov	r3, r2
 800130c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001316:	2b00      	cmp	r3, #0
 8001318:	da0e      	bge.n	8001338 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	705a      	strb	r2, [r3, #1]
 8001336:	e00e      	b.n	8001356 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f003 0207 	and.w	r2, r3, #7
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	b2da      	uxtb	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001362:	883a      	ldrh	r2, [r7, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	78ba      	ldrb	r2, [r7, #2]
 800136c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b29a      	uxth	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001380:	78bb      	ldrb	r3, [r7, #2]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d102      	bne.n	800138c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_PCD_EP_Open+0xa6>
 8001396:	2302      	movs	r3, #2
 8001398:	e00e      	b.n	80013b8 <HAL_PCD_EP_Open+0xc4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68f9      	ldr	r1, [r7, #12]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fba5 	bl	8003af8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80013b6:	7afb      	ldrb	r3, [r7, #11]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da0e      	bge.n	80013f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	705a      	strb	r2, [r3, #1]
 80013f0:	e00e      	b.n	8001410 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	f003 0207 	and.w	r2, r3, #7
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	b2da      	uxtb	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_PCD_EP_Close+0x6a>
 8001426:	2302      	movs	r3, #2
 8001428:	e00e      	b.n	8001448 <HAL_PCD_EP_Close+0x88>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fec7 	bl	80041cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	460b      	mov	r3, r1
 800145e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001460:	7afb      	ldrb	r3, [r7, #11]
 8001462:	f003 0207 	and.w	r2, r3, #7
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2200      	movs	r2, #0
 800148e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001490:	7afb      	ldrb	r3, [r7, #11]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	b2da      	uxtb	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800149c:	7afb      	ldrb	r3, [r7, #11]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6979      	ldr	r1, [r7, #20]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 f879 	bl	80045a4 <USB_EPStartXfer>
 80014b2:	e005      	b.n	80014c0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6979      	ldr	r1, [r7, #20]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 f872 	bl	80045a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	f003 0207 	and.w	r2, r3, #7
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014ec:	681b      	ldr	r3, [r3, #0]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	460b      	mov	r3, r1
 8001506:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001508:	7afb      	ldrb	r3, [r7, #11]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2201      	movs	r2, #1
 8001542:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	b2da      	uxtb	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001550:	7afb      	ldrb	r3, [r7, #11]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6979      	ldr	r1, [r7, #20]
 8001560:	4618      	mov	r0, r3
 8001562:	f003 f81f 	bl	80045a4 <USB_EPStartXfer>
 8001566:	e005      	b.n	8001574 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6979      	ldr	r1, [r7, #20]
 800156e:	4618      	mov	r0, r3
 8001570:	f003 f818 	bl	80045a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	f003 0207 	and.w	r2, r3, #7
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	d901      	bls.n	800159c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e04c      	b.n	8001636 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800159c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da0e      	bge.n	80015c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	705a      	strb	r2, [r3, #1]
 80015c0:	e00c      	b.n	80015dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_PCD_EP_SetStall+0x7e>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e01c      	b.n	8001636 <HAL_PCD_EP_SetStall+0xb8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68f9      	ldr	r1, [r7, #12]
 800160a:	4618      	mov	r0, r3
 800160c:	f004 fac1 	bl	8005b92 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f004 fbe6 	bl	8005df8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	f003 020f 	and.w	r2, r3, #15
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	d901      	bls.n	800165c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e040      	b.n	80016de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800165c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001660:	2b00      	cmp	r3, #0
 8001662:	da0e      	bge.n	8001682 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2201      	movs	r2, #1
 800167e:	705a      	strb	r2, [r3, #1]
 8001680:	e00e      	b.n	80016a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	f003 0207 	and.w	r2, r3, #7
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_PCD_EP_ClrStall+0x82>
 80016bc:	2302      	movs	r3, #2
 80016be:	e00e      	b.n	80016de <HAL_PCD_EP_ClrStall+0xa0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 faaf 	bl	8005c32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b08e      	sub	sp, #56	; 0x38
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016ee:	e2ec      	b.n	8001cca <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001706:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 8161 	bne.w	80019d2 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001710:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	d152      	bne.n	80017c0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	b29b      	uxth	r3, r3
 8001722:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172a:	81fb      	strh	r3, [r7, #14]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	89fb      	ldrh	r3, [r7, #14]
 8001732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800173a:	b29b      	uxth	r3, r3
 800173c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3328      	adds	r3, #40	; 0x28
 8001742:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800174c:	b29b      	uxth	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4413      	add	r3, r2
 8001758:	3302      	adds	r3, #2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	4413      	add	r3, r2
 8001762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	441a      	add	r2, r3
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f006 f95a 	bl	8007a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 829b 	beq.w	8001cca <PCD_EP_ISR_Handler+0x5e4>
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 8296 	bne.w	8001cca <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	b292      	uxth	r2, r2
 80017b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017be:	e284      	b.n	8001cca <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d034      	beq.n	8001844 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	3306      	adds	r3, #6
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001818:	b29b      	uxth	r3, r3
 800181a:	f004 fb3c 	bl	8005e96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	b29a      	uxth	r2, r3
 8001826:	f640 738f 	movw	r3, #3983	; 0xf8f
 800182a:	4013      	ands	r3, r2
 800182c:	823b      	strh	r3, [r7, #16]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	8a3a      	ldrh	r2, [r7, #16]
 8001834:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001838:	b292      	uxth	r2, r2
 800183a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f006 f8cf 	bl	80079e0 <HAL_PCD_SetupStageCallback>
 8001842:	e242      	b.n	8001cca <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001844:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001848:	2b00      	cmp	r3, #0
 800184a:	f280 823e 	bge.w	8001cca <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	b29a      	uxth	r2, r3
 8001856:	f640 738f 	movw	r3, #3983	; 0xf8f
 800185a:	4013      	ands	r3, r2
 800185c:	83bb      	strh	r3, [r7, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	8bba      	ldrh	r2, [r7, #28]
 8001864:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001868:	b292      	uxth	r2, r2
 800186a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	3306      	adds	r3, #6
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	4413      	add	r3, r2
 800188a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d019      	beq.n	80018d4 <PCD_EP_ISR_Handler+0x1ee>
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d015      	beq.n	80018d4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	6959      	ldr	r1, [r3, #20]
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	f004 faec 	bl	8005e96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	441a      	add	r2, r3
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018cc:	2100      	movs	r1, #0
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f006 f898 	bl	8007a04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f040 81f2 	bne.w	8001cca <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	4413      	add	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d112      	bne.n	8001934 <PCD_EP_ISR_Handler+0x24e>
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001918:	b29a      	uxth	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	801a      	strh	r2, [r3, #0]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800192c:	b29a      	uxth	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	801a      	strh	r2, [r3, #0]
 8001932:	e02f      	b.n	8001994 <PCD_EP_ISR_Handler+0x2ae>
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2b3e      	cmp	r3, #62	; 0x3e
 800193a:	d813      	bhi.n	8001964 <PCD_EP_ISR_Handler+0x27e>
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <PCD_EP_ISR_Handler+0x270>
 8001950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001952:	3301      	adds	r3, #1
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
 8001956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001958:	b29b      	uxth	r3, r3
 800195a:	029b      	lsls	r3, r3, #10
 800195c:	b29a      	uxth	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	e017      	b.n	8001994 <PCD_EP_ISR_Handler+0x2ae>
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <PCD_EP_ISR_Handler+0x298>
 8001978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197a:	3b01      	subs	r3, #1
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
 800197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001980:	b29b      	uxth	r3, r3
 8001982:	029b      	lsls	r3, r3, #10
 8001984:	b29b      	uxth	r3, r3
 8001986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800198a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800198e:	b29a      	uxth	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019a4:	827b      	strh	r3, [r7, #18]
 80019a6:	8a7b      	ldrh	r3, [r7, #18]
 80019a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80019ac:	827b      	strh	r3, [r7, #18]
 80019ae:	8a7b      	ldrh	r3, [r7, #18]
 80019b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019b4:	827b      	strh	r3, [r7, #18]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	8a7b      	ldrh	r3, [r7, #18]
 80019bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	8013      	strh	r3, [r2, #0]
 80019d0:	e17b      	b.n	8001cca <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f280 80ea 	bge.w	8001bc2 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a04:	4013      	ands	r3, r2
 8001a06:	853b      	strh	r3, [r7, #40]	; 0x28
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a1c:	b292      	uxth	r2, r2
 8001a1e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a20:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	7b1b      	ldrb	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d122      	bne.n	8001a84 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	3306      	adds	r3, #6
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a66:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001a68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8087 	beq.w	8001b7e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	6959      	ldr	r1, [r3, #20]
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	88da      	ldrh	r2, [r3, #6]
 8001a7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a7e:	f004 fa0a 	bl	8005e96 <USB_ReadPMA>
 8001a82:	e07c      	b.n	8001b7e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	78db      	ldrb	r3, [r3, #3]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d108      	bne.n	8001a9e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a8e:	461a      	mov	r2, r3
 8001a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f927 	bl	8001ce6 <HAL_PCD_EP_DB_Receive>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a9c:	e06f      	b.n	8001b7e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab8:	847b      	strh	r3, [r7, #34]	; 0x22
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	441a      	add	r2, r3
 8001ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d021      	beq.n	8001b3c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b20:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d02a      	beq.n	8001b7e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	6959      	ldr	r1, [r3, #20]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	891a      	ldrh	r2, [r3, #8]
 8001b34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b36:	f004 f9ae 	bl	8005e96 <USB_ReadPMA>
 8001b3a:	e020      	b.n	8001b7e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3306      	adds	r3, #6
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b64:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	6959      	ldr	r1, [r3, #20]
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	895a      	ldrh	r2, [r3, #10]
 8001b78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b7a:	f004 f98c 	bl	8005e96 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	69da      	ldr	r2, [r3, #28]
 8001b82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b84:	441a      	add	r2, r3
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b90:	441a      	add	r2, r3
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <PCD_EP_ISR_Handler+0x4c2>
 8001b9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d206      	bcs.n	8001bb6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f005 ff28 	bl	8007a04 <HAL_PCD_DataOutStageCallback>
 8001bb4:	e005      	b.n	8001bc2 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fcf1 	bl	80045a4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d07e      	beq.n	8001cca <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfa:	843b      	strh	r3, [r7, #32]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	441a      	add	r2, r3
 8001c0a:	8c3b      	ldrh	r3, [r7, #32]
 8001c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	78db      	ldrb	r3, [r3, #3]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d00c      	beq.n	8001c3a <PCD_EP_ISR_Handler+0x554>
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	78db      	ldrb	r3, [r3, #3]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d146      	bne.n	8001cbe <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001c30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d141      	bne.n	8001cbe <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c62:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	8bfb      	ldrh	r3, [r7, #30]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d906      	bls.n	8001c7c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	8bfb      	ldrh	r3, [r7, #30]
 8001c74:	1ad2      	subs	r2, r2, r3
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	619a      	str	r2, [r3, #24]
 8001c7a:	e002      	b.n	8001c82 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f005 fed2 	bl	8007a3a <HAL_PCD_DataInStageCallback>
 8001c96:	e018      	b.n	8001cca <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	8bfb      	ldrh	r3, [r7, #30]
 8001c9e:	441a      	add	r2, r3
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	69da      	ldr	r2, [r3, #28]
 8001ca8:	8bfb      	ldrh	r3, [r7, #30]
 8001caa:	441a      	add	r2, r3
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 fc74 	bl	80045a4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001cbc:	e005      	b.n	8001cca <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001cbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f91b 	bl	8001f00 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f6ff ad0a 	blt.w	80016f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3738      	adds	r7, #56	; 0x38
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b088      	sub	sp, #32
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d07e      	beq.n	8001dfc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	3302      	adds	r3, #2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d26:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	8b7b      	ldrh	r3, [r7, #26]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d306      	bcc.n	8001d40 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	8b7b      	ldrh	r3, [r7, #26]
 8001d38:	1ad2      	subs	r2, r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	619a      	str	r2, [r3, #24]
 8001d3e:	e002      	b.n	8001d46 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d123      	bne.n	8001d96 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d68:	833b      	strh	r3, [r7, #24]
 8001d6a:	8b3b      	ldrh	r3, [r7, #24]
 8001d6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d70:	833b      	strh	r3, [r7, #24]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	441a      	add	r2, r3
 8001d80:	8b3b      	ldrh	r3, [r7, #24]
 8001d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01f      	beq.n	8001de0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dba:	82fb      	strh	r3, [r7, #22]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	441a      	add	r2, r3
 8001dca:	8afb      	ldrh	r3, [r7, #22]
 8001dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001de0:	8b7b      	ldrh	r3, [r7, #26]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8087 	beq.w	8001ef6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6959      	ldr	r1, [r3, #20]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	891a      	ldrh	r2, [r3, #8]
 8001df4:	8b7b      	ldrh	r3, [r7, #26]
 8001df6:	f004 f84e 	bl	8005e96 <USB_ReadPMA>
 8001dfa:	e07c      	b.n	8001ef6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3306      	adds	r3, #6
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	8b7b      	ldrh	r3, [r7, #26]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d306      	bcc.n	8001e3e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	699a      	ldr	r2, [r3, #24]
 8001e34:	8b7b      	ldrh	r3, [r7, #26]
 8001e36:	1ad2      	subs	r2, r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	619a      	str	r2, [r3, #24]
 8001e3c:	e002      	b.n	8001e44 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d123      	bne.n	8001e94 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e66:	83fb      	strh	r3, [r7, #30]
 8001e68:	8bfb      	ldrh	r3, [r7, #30]
 8001e6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e6e:	83fb      	strh	r3, [r7, #30]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	441a      	add	r2, r3
 8001e7e:	8bfb      	ldrh	r3, [r7, #30]
 8001e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11f      	bne.n	8001ede <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb8:	83bb      	strh	r3, [r7, #28]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	441a      	add	r2, r3
 8001ec8:	8bbb      	ldrh	r3, [r7, #28]
 8001eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ede:	8b7b      	ldrh	r3, [r7, #26]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6959      	ldr	r1, [r3, #20]
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	895a      	ldrh	r2, [r3, #10]
 8001ef0:	8b7b      	ldrh	r3, [r7, #26]
 8001ef2:	f003 ffd0 	bl	8005e96 <USB_ReadPMA>
    }
  }

  return count;
 8001ef6:	8b7b      	ldrh	r3, [r7, #26]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0a2      	sub	sp, #136	; 0x88
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 81c7 	beq.w	80022a8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f42:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len > TxByteNbre)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d907      	bls.n	8001f62 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f5a:	1ad2      	subs	r2, r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	619a      	str	r2, [r3, #24]
 8001f60:	e002      	b.n	8001f68 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 80b9 	bne.w	80020e4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	785b      	ldrb	r3, [r3, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d126      	bne.n	8001fc8 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	4413      	add	r3, r2
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	011a      	lsls	r2, r3, #4
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	e01a      	b.n	8001ffe <HAL_PCD_EP_DB_Transmit+0xfe>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	785b      	ldrb	r3, [r3, #1]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d116      	bne.n	8001ffe <HAL_PCD_EP_DB_Transmit+0xfe>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	4413      	add	r3, r2
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	011a      	lsls	r2, r3, #4
 8001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	785b      	ldrb	r3, [r3, #1]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d126      	bne.n	800205a <HAL_PCD_EP_DB_Transmit+0x15a>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4413      	add	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	011a      	lsls	r2, r3, #4
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4413      	add	r3, r2
 800202e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	b29b      	uxth	r3, r3
 800203a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800203e:	b29a      	uxth	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	801a      	strh	r2, [r3, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800204e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002052:	b29a      	uxth	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	801a      	strh	r2, [r3, #0]
 8002058:	e017      	b.n	800208a <HAL_PCD_EP_DB_Transmit+0x18a>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d113      	bne.n	800208a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	4413      	add	r3, r2
 8002072:	623b      	str	r3, [r7, #32]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	011a      	lsls	r2, r3, #4
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	4413      	add	r3, r2
 800207e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2200      	movs	r2, #0
 8002088:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f005 fcd2 	bl	8007a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 82d1 	beq.w	8002644 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020bc:	827b      	strh	r3, [r7, #18]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	441a      	add	r2, r3
 80020cc:	8a7b      	ldrh	r3, [r7, #18]
 80020ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020de:	b29b      	uxth	r3, r3
 80020e0:	8013      	strh	r3, [r2, #0]
 80020e2:	e2af      	b.n	8002644 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d021      	beq.n	8002132 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002108:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	441a      	add	r2, r3
 800211a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800211e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800212a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212e:	b29b      	uxth	r3, r3
 8002130:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002138:	2b01      	cmp	r3, #1
 800213a:	f040 8283 	bne.w	8002644 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002146:	441a      	add	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002154:	441a      	add	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	429a      	cmp	r2, r3
 8002164:	d309      	bcc.n	800217a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002172:	1ad2      	subs	r2, r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	621a      	str	r2, [r3, #32]
 8002178:	e015      	b.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002182:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002186:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002190:	e009      	b.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2200      	movs	r2, #0
 80021a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d155      	bne.n	800225a <HAL_PCD_EP_DB_Transmit+0x35a>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c2:	4413      	add	r3, r2
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	011a      	lsls	r2, r3, #4
 80021cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ce:	4413      	add	r3, r2
 80021d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
 80021d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d112      	bne.n	8002202 <HAL_PCD_EP_DB_Transmit+0x302>
 80021dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ea:	801a      	strh	r2, [r3, #0]
 80021ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fe:	801a      	strh	r2, [r3, #0]
 8002200:	e047      	b.n	8002292 <HAL_PCD_EP_DB_Transmit+0x392>
 8002202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002204:	2b3e      	cmp	r3, #62	; 0x3e
 8002206:	d811      	bhi.n	800222c <HAL_PCD_EP_DB_Transmit+0x32c>
 8002208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	653b      	str	r3, [r7, #80]	; 0x50
 800220e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_PCD_EP_DB_Transmit+0x31e>
 8002218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221a:	3301      	adds	r3, #1
 800221c:	653b      	str	r3, [r7, #80]	; 0x50
 800221e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002220:	b29b      	uxth	r3, r3
 8002222:	029b      	lsls	r3, r3, #10
 8002224:	b29a      	uxth	r2, r3
 8002226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	e032      	b.n	8002292 <HAL_PCD_EP_DB_Transmit+0x392>
 800222c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	653b      	str	r3, [r7, #80]	; 0x50
 8002232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <HAL_PCD_EP_DB_Transmit+0x342>
 800223c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800223e:	3b01      	subs	r3, #1
 8002240:	653b      	str	r3, [r7, #80]	; 0x50
 8002242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002244:	b29b      	uxth	r3, r3
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	b29b      	uxth	r3, r3
 800224a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800224e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002252:	b29a      	uxth	r2, r3
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	801a      	strh	r2, [r3, #0]
 8002258:	e01b      	b.n	8002292 <HAL_PCD_EP_DB_Transmit+0x392>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	785b      	ldrb	r3, [r3, #1]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d117      	bne.n	8002292 <HAL_PCD_EP_DB_Transmit+0x392>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	643b      	str	r3, [r7, #64]	; 0x40
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002270:	b29b      	uxth	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002276:	4413      	add	r3, r2
 8002278:	643b      	str	r3, [r7, #64]	; 0x40
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	011a      	lsls	r2, r3, #4
 8002280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002282:	4413      	add	r3, r2
 8002284:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800228c:	b29a      	uxth	r2, r3
 800228e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002290:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	6959      	ldr	r1, [r3, #20]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	891a      	ldrh	r2, [r3, #8]
 800229e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f003 fdb4 	bl	8005e0e <USB_WritePMA>
 80022a6:	e1cd      	b.n	8002644 <HAL_PCD_EP_DB_Transmit+0x744>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	3306      	adds	r3, #6
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len >= TxByteNbre)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80022dc:	429a      	cmp	r2, r3
 80022de:	d307      	bcc.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80022e8:	1ad2      	subs	r2, r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	619a      	str	r2, [r3, #24]
 80022ee:	e002      	b.n	80022f6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 80c1 	bne.w	8002482 <HAL_PCD_EP_DB_Transmit+0x582>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d126      	bne.n	8002356 <HAL_PCD_EP_DB_Transmit+0x456>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002316:	b29b      	uxth	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800231c:	4413      	add	r3, r2
 800231e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	011a      	lsls	r2, r3, #4
 8002326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002328:	4413      	add	r3, r2
 800232a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800232e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800233a:	b29a      	uxth	r2, r3
 800233c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800234a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800234e:	b29a      	uxth	r2, r3
 8002350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	e01a      	b.n	800238c <HAL_PCD_EP_DB_Transmit+0x48c>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d116      	bne.n	800238c <HAL_PCD_EP_DB_Transmit+0x48c>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	673b      	str	r3, [r7, #112]	; 0x70
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800236c:	b29b      	uxth	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002372:	4413      	add	r3, r2
 8002374:	673b      	str	r3, [r7, #112]	; 0x70
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	011a      	lsls	r2, r3, #4
 800237c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800237e:	4413      	add	r3, r2
 8002380:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002384:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002388:	2200      	movs	r2, #0
 800238a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d126      	bne.n	80023ea <HAL_PCD_EP_DB_Transmit+0x4ea>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b0:	4413      	add	r3, r2
 80023b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	011a      	lsls	r2, r3, #4
 80023ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023bc:	4413      	add	r3, r2
 80023be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80023c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d2:	801a      	strh	r2, [r3, #0]
 80023d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	e01c      	b.n	8002424 <HAL_PCD_EP_DB_Transmit+0x524>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d118      	bne.n	8002424 <HAL_PCD_EP_DB_Transmit+0x524>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002402:	4413      	add	r3, r2
 8002404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	011a      	lsls	r2, r3, #4
 800240e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002412:	4413      	add	r3, r2
 8002414:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800241c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002420:	2200      	movs	r2, #0
 8002422:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f005 fb05 	bl	8007a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 8104 	bne.w	8002644 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b29b      	uxth	r3, r3
 800244e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	441a      	add	r2, r3
 8002468:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800246c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247c:	b29b      	uxth	r3, r3
 800247e:	8013      	strh	r3, [r2, #0]
 8002480:	e0e0      	b.n	8002644 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d121      	bne.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x5d0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	441a      	add	r2, r3
 80024b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80024bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	f040 80b4 	bne.w	8002644 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80024e4:	441a      	add	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	69da      	ldr	r2, [r3, #28]
 80024ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80024f2:	441a      	add	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d309      	bcc.n	8002518 <HAL_PCD_EP_DB_Transmit+0x618>
        {
          len = ep->maxpacket;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6a1a      	ldr	r2, [r3, #32]
 800250e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002510:	1ad2      	subs	r2, r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	621a      	str	r2, [r3, #32]
 8002516:	e015      	b.n	8002544 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else if (ep->xfer_len_db == 0U)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_PCD_EP_DB_Transmit+0x630>
        {
          len = TxByteNbre;
 8002520:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002524:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800252e:	e009      	b.n	8002544 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else
        {
          len = ep->xfer_len_db;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	667b      	str	r3, [r7, #100]	; 0x64
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d155      	bne.n	80025fe <HAL_PCD_EP_DB_Transmit+0x6fe>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002560:	b29b      	uxth	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002566:	4413      	add	r3, r2
 8002568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	011a      	lsls	r2, r3, #4
 8002570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002572:	4413      	add	r3, r2
 8002574:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002578:	65bb      	str	r3, [r7, #88]	; 0x58
 800257a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257c:	2b00      	cmp	r3, #0
 800257e:	d112      	bne.n	80025a6 <HAL_PCD_EP_DB_Transmit+0x6a6>
 8002580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800258a:	b29a      	uxth	r2, r3
 800258c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800259a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259e:	b29a      	uxth	r2, r3
 80025a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a2:	801a      	strh	r2, [r3, #0]
 80025a4:	e044      	b.n	8002630 <HAL_PCD_EP_DB_Transmit+0x730>
 80025a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a8:	2b3e      	cmp	r3, #62	; 0x3e
 80025aa:	d811      	bhi.n	80025d0 <HAL_PCD_EP_DB_Transmit+0x6d0>
 80025ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	677b      	str	r3, [r7, #116]	; 0x74
 80025b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_PCD_EP_DB_Transmit+0x6c2>
 80025bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025be:	3301      	adds	r3, #1
 80025c0:	677b      	str	r3, [r7, #116]	; 0x74
 80025c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	e02f      	b.n	8002630 <HAL_PCD_EP_DB_Transmit+0x730>
 80025d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	677b      	str	r3, [r7, #116]	; 0x74
 80025d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x6e6>
 80025e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e2:	3b01      	subs	r3, #1
 80025e4:	677b      	str	r3, [r7, #116]	; 0x74
 80025e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	029b      	lsls	r3, r3, #10
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025fa:	801a      	strh	r2, [r3, #0]
 80025fc:	e018      	b.n	8002630 <HAL_PCD_EP_DB_Transmit+0x730>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	785b      	ldrb	r3, [r3, #1]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d114      	bne.n	8002630 <HAL_PCD_EP_DB_Transmit+0x730>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260e:	b29b      	uxth	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002614:	4413      	add	r3, r2
 8002616:	667b      	str	r3, [r7, #100]	; 0x64
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	011a      	lsls	r2, r3, #4
 800261e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002620:	4413      	add	r3, r2
 8002622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002626:	663b      	str	r3, [r7, #96]	; 0x60
 8002628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262a:	b29a      	uxth	r2, r3
 800262c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6959      	ldr	r1, [r3, #20]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	895a      	ldrh	r2, [r3, #10]
 800263c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800263e:	b29b      	uxth	r3, r3
 8002640:	f003 fbe5 	bl	8005e0e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800265e:	823b      	strh	r3, [r7, #16]
 8002660:	8a3b      	ldrh	r3, [r7, #16]
 8002662:	f083 0310 	eor.w	r3, r3, #16
 8002666:	823b      	strh	r3, [r7, #16]
 8002668:	8a3b      	ldrh	r3, [r7, #16]
 800266a:	f083 0320 	eor.w	r3, r3, #32
 800266e:	823b      	strh	r3, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	441a      	add	r2, r3
 800267e:	8a3b      	ldrh	r3, [r7, #16]
 8002680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002690:	b29b      	uxth	r3, r3
 8002692:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3788      	adds	r7, #136	; 0x88
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800269e:	b480      	push	{r7}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	817b      	strh	r3, [r7, #10]
 80026ac:	4613      	mov	r3, r2
 80026ae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80026b0:	897b      	ldrh	r3, [r7, #10]
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026bc:	897b      	ldrh	r3, [r7, #10]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e009      	b.n	80026e8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026d4:	897a      	ldrh	r2, [r7, #10]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4413      	add	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026e8:	893b      	ldrh	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d107      	bne.n	80026fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2200      	movs	r2, #0
 80026f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	80da      	strh	r2, [r3, #6]
 80026fc:	e00b      	b.n	8002716 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2201      	movs	r2, #1
 8002702:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	b29a      	uxth	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0c1b      	lsrs	r3, r3, #16
 8002710:	b29a      	uxth	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
	...

08002724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e26c      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8087 	beq.w	8002852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002744:	4b92      	ldr	r3, [pc, #584]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b04      	cmp	r3, #4
 800274e:	d00c      	beq.n	800276a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002750:	4b8f      	ldr	r3, [pc, #572]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b08      	cmp	r3, #8
 800275a:	d112      	bne.n	8002782 <HAL_RCC_OscConfig+0x5e>
 800275c:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002768:	d10b      	bne.n	8002782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276a:	4b89      	ldr	r3, [pc, #548]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d06c      	beq.n	8002850 <HAL_RCC_OscConfig+0x12c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d168      	bne.n	8002850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e246      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x76>
 800278c:	4b80      	ldr	r3, [pc, #512]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a7f      	ldr	r2, [pc, #508]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e02e      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x98>
 80027a2:	4b7b      	ldr	r3, [pc, #492]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a7a      	ldr	r2, [pc, #488]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b78      	ldr	r3, [pc, #480]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a77      	ldr	r2, [pc, #476]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e01d      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0xbc>
 80027c6:	4b72      	ldr	r3, [pc, #456]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a71      	ldr	r2, [pc, #452]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b6f      	ldr	r3, [pc, #444]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a6e      	ldr	r2, [pc, #440]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 80027e0:	4b6b      	ldr	r3, [pc, #428]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a6a      	ldr	r2, [pc, #424]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b68      	ldr	r3, [pc, #416]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a67      	ldr	r2, [pc, #412]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fd ff58 	bl	80006b4 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7fd ff54 	bl	80006b4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e1fa      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	4b5d      	ldr	r3, [pc, #372]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0xe4>
 8002826:	e014      	b.n	8002852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fd ff44 	bl	80006b4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7fd ff40 	bl	80006b4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1e6      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x10c>
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d063      	beq.n	8002926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800285e:	4b4c      	ldr	r3, [pc, #304]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800286a:	4b49      	ldr	r3, [pc, #292]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b08      	cmp	r3, #8
 8002874:	d11c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x18c>
 8002876:	4b46      	ldr	r3, [pc, #280]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d116      	bne.n	80028b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002882:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_RCC_OscConfig+0x176>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d001      	beq.n	800289a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e1ba      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289a:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4939      	ldr	r1, [pc, #228]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ae:	e03a      	b.n	8002926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b8:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_RCC_OscConfig+0x270>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fd fef9 	bl	80006b4 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c6:	f7fd fef5 	bl	80006b4 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e19b      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e4:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4927      	ldr	r1, [pc, #156]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fa:	4b26      	ldr	r3, [pc, #152]	; (8002994 <HAL_RCC_OscConfig+0x270>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fd fed8 	bl	80006b4 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002908:	f7fd fed4 	bl	80006b4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e17a      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d03a      	beq.n	80029a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d019      	beq.n	800296e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293a:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002940:	f7fd feb8 	bl	80006b4 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002948:	f7fd feb4 	bl	80006b4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e15a      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_RCC_OscConfig+0x26c>)
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002966:	2001      	movs	r0, #1
 8002968:	f000 fada 	bl	8002f20 <RCC_Delay>
 800296c:	e01c      	b.n	80029a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_RCC_OscConfig+0x274>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002974:	f7fd fe9e 	bl	80006b4 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297a:	e00f      	b.n	800299c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297c:	f7fd fe9a 	bl	80006b4 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d908      	bls.n	800299c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e140      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	42420000 	.word	0x42420000
 8002998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	4b9e      	ldr	r3, [pc, #632]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e9      	bne.n	800297c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a6 	beq.w	8002b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ba:	4b97      	ldr	r3, [pc, #604]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	4b94      	ldr	r3, [pc, #592]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a93      	ldr	r2, [pc, #588]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	61d3      	str	r3, [r2, #28]
 80029d2:	4b91      	ldr	r3, [pc, #580]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029de:	2301      	movs	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e2:	4b8e      	ldr	r3, [pc, #568]	; (8002c1c <HAL_RCC_OscConfig+0x4f8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d118      	bne.n	8002a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ee:	4b8b      	ldr	r3, [pc, #556]	; (8002c1c <HAL_RCC_OscConfig+0x4f8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a8a      	ldr	r2, [pc, #552]	; (8002c1c <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fa:	f7fd fe5b 	bl	80006b4 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a02:	f7fd fe57 	bl	80006b4 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b64      	cmp	r3, #100	; 0x64
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e0fd      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	4b81      	ldr	r3, [pc, #516]	; (8002c1c <HAL_RCC_OscConfig+0x4f8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x312>
 8002a28:	4b7b      	ldr	r3, [pc, #492]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a7a      	ldr	r2, [pc, #488]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e02d      	b.n	8002a92 <HAL_RCC_OscConfig+0x36e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x334>
 8002a3e:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a75      	ldr	r2, [pc, #468]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6213      	str	r3, [r2, #32]
 8002a4a:	4b73      	ldr	r3, [pc, #460]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4a72      	ldr	r2, [pc, #456]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	6213      	str	r3, [r2, #32]
 8002a56:	e01c      	b.n	8002a92 <HAL_RCC_OscConfig+0x36e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d10c      	bne.n	8002a7a <HAL_RCC_OscConfig+0x356>
 8002a60:	4b6d      	ldr	r3, [pc, #436]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4a6c      	ldr	r2, [pc, #432]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	6213      	str	r3, [r2, #32]
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4a69      	ldr	r2, [pc, #420]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6213      	str	r3, [r2, #32]
 8002a78:	e00b      	b.n	8002a92 <HAL_RCC_OscConfig+0x36e>
 8002a7a:	4b67      	ldr	r3, [pc, #412]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4a66      	ldr	r2, [pc, #408]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6213      	str	r3, [r2, #32]
 8002a86:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a63      	ldr	r2, [pc, #396]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d015      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fd fe0b 	bl	80006b4 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fd fe07 	bl	80006b4 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0ab      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ee      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x37e>
 8002ac4:	e014      	b.n	8002af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7fd fdf5 	bl	80006b4 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fd fdf1 	bl	80006b4 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e095      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ee      	bne.n	8002ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af6:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4a47      	ldr	r2, [pc, #284]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8081 	beq.w	8002c0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0c:	4b42      	ldr	r3, [pc, #264]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d061      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d146      	bne.n	8002bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b20:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <HAL_RCC_OscConfig+0x4fc>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fd fdc5 	bl	80006b4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fd fdc1 	bl	80006b4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e067      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b40:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b54:	d108      	bne.n	8002b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b56:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	492d      	ldr	r1, [pc, #180]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a19      	ldr	r1, [r3, #32]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	4927      	ldr	r1, [pc, #156]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <HAL_RCC_OscConfig+0x4fc>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fd fd95 	bl	80006b4 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fd fd91 	bl	80006b4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e037      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x46a>
 8002bac:	e02f      	b.n	8002c0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <HAL_RCC_OscConfig+0x4fc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fd fd7e 	bl	80006b4 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fd fd7a 	bl	80006b4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e020      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x498>
 8002bda:	e018      	b.n	8002c0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e013      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_OscConfig+0x4f4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	42420060 	.word	0x42420060

08002c24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0d0      	b.n	8002dda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c38:	4b6a      	ldr	r3, [pc, #424]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d910      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b67      	ldr	r3, [pc, #412]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 0207 	bic.w	r2, r3, #7
 8002c4e:	4965      	ldr	r1, [pc, #404]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b63      	ldr	r3, [pc, #396]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0b8      	b.n	8002dda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d020      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c80:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c98:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a52      	ldr	r2, [pc, #328]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ca2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca4:	4b50      	ldr	r3, [pc, #320]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	494d      	ldr	r1, [pc, #308]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d040      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d115      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e07f      	b.n	8002dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e073      	b.n	8002dda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06b      	b.n	8002dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d02:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f023 0203 	bic.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4936      	ldr	r1, [pc, #216]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d14:	f7fd fcce 	bl	80006b4 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1c:	f7fd fcca 	bl	80006b4 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e053      	b.n	8002dda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 020c 	and.w	r2, r3, #12
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d1eb      	bne.n	8002d1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d44:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d210      	bcs.n	8002d74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 0207 	bic.w	r2, r3, #7
 8002d5a:	4922      	ldr	r1, [pc, #136]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e032      	b.n	8002dda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4916      	ldr	r1, [pc, #88]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	490e      	ldr	r1, [pc, #56]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002db2:	f000 f821 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002db6:	4601      	mov	r1, r0
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	5cd3      	ldrb	r3, [r2, r3]
 8002dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8002dca:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <HAL_RCC_ClockConfig+0x1cc>)
 8002dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_ClockConfig+0x1d0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fc2c 	bl	8000630 <HAL_InitTick>

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40022000 	.word	0x40022000
 8002de8:	40021000 	.word	0x40021000
 8002dec:	080087ec 	.word	0x080087ec
 8002df0:	20000000 	.word	0x20000000
 8002df4:	20000004 	.word	0x20000004

08002df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b490      	push	{r4, r7}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e00:	1d3c      	adds	r4, r7, #4
 8002e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e08:	4b28      	ldr	r3, [pc, #160]	; (8002eac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e22:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d002      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0x40>
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_GetSysClockFreq+0x46>
 8002e36:	e02d      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e3a:	623b      	str	r3, [r7, #32]
      break;
 8002e3c:	e02d      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	0c9b      	lsrs	r3, r3, #18
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	0c5b      	lsrs	r3, r3, #17
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e76:	fb02 f203 	mul.w	r2, r2, r3
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
 8002e82:	e004      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	623b      	str	r3, [r7, #32]
      break;
 8002e92:	e002      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e96:	623b      	str	r3, [r7, #32]
      break;
 8002e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3728      	adds	r7, #40	; 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc90      	pop	{r4, r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	08008788 	.word	0x08008788
 8002eac:	08008798 	.word	0x08008798
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	007a1200 	.word	0x007a1200
 8002eb8:	003d0900 	.word	0x003d0900

08002ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec0:	4b02      	ldr	r3, [pc, #8]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	20000000 	.word	0x20000000

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ed4:	f7ff fff2 	bl	8002ebc <HAL_RCC_GetHCLKFreq>
 8002ed8:	4601      	mov	r1, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee6:	5cd3      	ldrb	r3, [r2, r3]
 8002ee8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	080087fc 	.word	0x080087fc

08002ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002efc:	f7ff ffde 	bl	8002ebc <HAL_RCC_GetHCLKFreq>
 8002f00:	4601      	mov	r1, r0
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	0adb      	lsrs	r3, r3, #11
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	080087fc 	.word	0x080087fc

08002f20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <RCC_Delay+0x34>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <RCC_Delay+0x38>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	0a5b      	lsrs	r3, r3, #9
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f3c:	bf00      	nop
  }
  while (Delay --);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1e5a      	subs	r2, r3, #1
 8002f42:	60fa      	str	r2, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f9      	bne.n	8002f3c <RCC_Delay+0x1c>
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000
 8002f58:	10624dd3 	.word	0x10624dd3

08002f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d07d      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7c:	4b4f      	ldr	r3, [pc, #316]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10d      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f88:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4a4b      	ldr	r2, [pc, #300]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f92:	61d3      	str	r3, [r2, #28]
 8002f94:	4b49      	ldr	r3, [pc, #292]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	4b46      	ldr	r3, [pc, #280]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d118      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb0:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a42      	ldr	r2, [pc, #264]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbc:	f7fd fb7a 	bl	80006b4 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc4:	f7fd fb76 	bl	80006b4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e06d      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02e      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d027      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003000:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003008:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800300a:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003016:	4a29      	ldr	r2, [pc, #164]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d014      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fd fb45 	bl	80006b4 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fd fb41 	bl	80006b4 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e036      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ee      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003050:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4917      	ldr	r1, [pc, #92]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	4313      	orrs	r3, r2
 8003060:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003068:	4b14      	ldr	r3, [pc, #80]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4a13      	ldr	r2, [pc, #76]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003072:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003080:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	490b      	ldr	r1, [pc, #44]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4904      	ldr	r1, [pc, #16]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40007000 	.word	0x40007000
 80030c4:	42420440 	.word	0x42420440

080030c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e03f      	b.n	800315a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd f98c 	bl	800040c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800310a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fbf9 	bl	8003904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	4613      	mov	r3, r2
 800316e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b20      	cmp	r3, #32
 800317a:	d130      	bne.n	80031de <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_UART_Transmit_IT+0x26>
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e029      	b.n	80031e0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_UART_Transmit_IT+0x38>
 8003196:	2302      	movs	r3, #2
 8003198:	e022      	b.n	80031e0 <HAL_UART_Transmit_IT+0x7e>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	88fa      	ldrh	r2, [r7, #6]
 80031b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2221      	movs	r2, #33	; 0x21
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	4613      	mov	r3, r2
 80031f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b20      	cmp	r3, #32
 8003202:	d11d      	bne.n	8003240 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_UART_Receive_IT+0x26>
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e016      	b.n	8003242 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_UART_Receive_IT+0x38>
 800321e:	2302      	movs	r3, #2
 8003220:	e00f      	b.n	8003242 <HAL_UART_Receive_IT+0x58>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	461a      	mov	r2, r3
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f9da 	bl	80035f0 <UART_Start_Receive_IT>
 800323c:	4603      	mov	r3, r0
 800323e:	e000      	b.n	8003242 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003240:	2302      	movs	r3, #2
  }
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_UART_IRQHandler+0x52>
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa8a 	bl	80037b0 <UART_Receive_IT>
      return;
 800329c:	e17c      	b.n	8003598 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80b1 	beq.w	8003408 <HAL_UART_IRQHandler+0x1bc>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <HAL_UART_IRQHandler+0x70>
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80a6 	beq.w	8003408 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_UART_IRQHandler+0x90>
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_UART_IRQHandler+0xb0>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f043 0202 	orr.w	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_UART_IRQHandler+0xd0>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00f      	beq.n	8003346 <HAL_UART_IRQHandler+0xfa>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <HAL_UART_IRQHandler+0xee>
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f043 0208 	orr.w	r2, r3, #8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 811f 	beq.w	800358e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_UART_IRQHandler+0x11e>
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fa23 	bl	80037b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <HAL_UART_IRQHandler+0x146>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d031      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f965 	bl	8003662 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d023      	beq.n	80033ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d013      	beq.n	80033e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	4a77      	ldr	r2, [pc, #476]	; (80035a0 <HAL_UART_IRQHandler+0x354>)
 80033c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd fae6 	bl	800099c <HAL_DMA_Abort_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033e0:	4610      	mov	r0, r2
 80033e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	e00e      	b.n	8003404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8ee 	bl	80035c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	e00a      	b.n	8003404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8ea 	bl	80035c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e006      	b.n	8003404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8e6 	bl	80035c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003402:	e0c4      	b.n	800358e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	bf00      	nop
    return;
 8003406:	e0c2      	b.n	800358e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	2b01      	cmp	r3, #1
 800340e:	f040 80a1 	bne.w	8003554 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 809b 	beq.w	8003554 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8095 	beq.w	8003554 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d04e      	beq.n	80034ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003458:	8a3b      	ldrh	r3, [r7, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8099 	beq.w	8003592 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003464:	8a3a      	ldrh	r2, [r7, #16]
 8003466:	429a      	cmp	r2, r3
 8003468:	f080 8093 	bcs.w	8003592 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8a3a      	ldrh	r2, [r7, #16]
 8003470:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b20      	cmp	r3, #32
 800347a:	d02b      	beq.n	80034d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800348a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0210 	bic.w	r2, r2, #16
 80034c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd fa29 	bl	8000926 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f878 	bl	80035da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034ea:	e052      	b.n	8003592 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d048      	beq.n	8003596 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003504:	8a7b      	ldrh	r3, [r7, #18]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d045      	beq.n	8003596 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003518:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0210 	bic.w	r2, r2, #16
 8003546:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003548:	8a7b      	ldrh	r3, [r7, #18]
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f844 	bl	80035da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003552:	e020      	b.n	8003596 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_UART_IRQHandler+0x324>
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f8ba 	bl	80036e2 <UART_Transmit_IT>
    return;
 800356e:	e013      	b.n	8003598 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00e      	beq.n	8003598 <HAL_UART_IRQHandler+0x34c>
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f8fb 	bl	8003780 <UART_EndTransmit_IT>
    return;
 800358a:	bf00      	nop
 800358c:	e004      	b.n	8003598 <HAL_UART_IRQHandler+0x34c>
    return;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <HAL_UART_IRQHandler+0x34c>
      return;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HAL_UART_IRQHandler+0x34c>
      return;
 8003596:	bf00      	nop
  }
}
 8003598:	3728      	adds	r7, #40	; 0x28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	080036bb 	.word	0x080036bb

080035a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr

080035b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2222      	movs	r2, #34	; 0x22
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003634:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0220 	orr.w	r2, r2, #32
 8003654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003678:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0210 	bic.w	r2, r2, #16
 80036a0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff ff77 	bl	80035c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b21      	cmp	r3, #33	; 0x21
 80036f4:	d13e      	bne.n	8003774 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fe:	d114      	bne.n	800372a <UART_Transmit_IT+0x48>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d110      	bne.n	800372a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	1c9a      	adds	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	621a      	str	r2, [r3, #32]
 8003728:	e008      	b.n	800373c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6211      	str	r1, [r2, #32]
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4619      	mov	r1, r3
 800374a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10f      	bne.n	8003770 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800375e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800376e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003796:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff feff 	bl	80035a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b22      	cmp	r3, #34	; 0x22
 80037c2:	f040 8099 	bne.w	80038f8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d117      	bne.n	8003800 <UART_Receive_IT+0x50>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
 80037fe:	e026      	b.n	800384e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003812:	d007      	beq.n	8003824 <UART_Receive_IT+0x74>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <UART_Receive_IT+0x82>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e008      	b.n	8003844 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383e:	b2da      	uxtb	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29b      	uxth	r3, r3
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4619      	mov	r1, r3
 800385c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800385e:	2b00      	cmp	r3, #0
 8003860:	d148      	bne.n	80038f4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0220 	bic.w	r2, r2, #32
 8003870:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003880:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d123      	bne.n	80038ea <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0210 	bic.w	r2, r2, #16
 80038b6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d10a      	bne.n	80038dc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fe79 	bl	80035da <HAL_UARTEx_RxEventCallback>
 80038e8:	e002      	b.n	80038f0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fe63 	bl	80035b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e002      	b.n	80038fa <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800393e:	f023 030c 	bic.w	r3, r3, #12
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	430b      	orrs	r3, r1
 800394a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2c      	ldr	r2, [pc, #176]	; (8003a18 <UART_SetConfig+0x114>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7ff fac4 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	e002      	b.n	800397a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003974:	f7ff faac 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8003978:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009a      	lsls	r2, r3, #2
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <UART_SetConfig+0x118>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	0119      	lsls	r1, r3, #4
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <UART_SetConfig+0x118>)
 80039b2:	fba3 0302 	umull	r0, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2064      	movs	r0, #100	; 0x64
 80039ba:	fb00 f303 	mul.w	r3, r0, r3
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	3332      	adds	r3, #50	; 0x32
 80039c4:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <UART_SetConfig+0x118>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d0:	4419      	add	r1, r3
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009a      	lsls	r2, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <UART_SetConfig+0x118>)
 80039ea:	fba3 0302 	umull	r0, r3, r3, r2
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2064      	movs	r0, #100	; 0x64
 80039f2:	fb00 f303 	mul.w	r3, r0, r3
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	3332      	adds	r3, #50	; 0x32
 80039fc:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <UART_SetConfig+0x118>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	51eb851f 	.word	0x51eb851f

08003a20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a20:	b084      	sub	sp, #16
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	f107 0014 	add.w	r0, r7, #20
 8003a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	b004      	add	sp, #16
 8003a3e:	4770      	bx	lr

08003a40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a50:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a74:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a78:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ab8:	b084      	sub	sp, #16
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	f107 0014 	add.w	r0, r7, #20
 8003ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	b004      	add	sp, #16
 8003af6:	4770      	bx	lr

08003af8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b09b      	sub	sp, #108	; 0x6c
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	78db      	ldrb	r3, [r3, #3]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d81f      	bhi.n	8003b6a <USB_ActivateEndpoint+0x72>
 8003b2a:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <USB_ActivateEndpoint+0x38>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b41 	.word	0x08003b41
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b73 	.word	0x08003b73
 8003b3c:	08003b4f 	.word	0x08003b4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003b40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003b4c:	e012      	b.n	8003b74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003b4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b52:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003b56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003b5a:	e00b      	b.n	8003b74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003b5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b64:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003b68:	e004      	b.n	8003b74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003b70:	e000      	b.n	8003b74 <USB_ActivateEndpoint+0x7c>
      break;
 8003b72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	441a      	add	r2, r3
 8003b7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	441a      	add	r2, r3
 8003bc4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	7b1b      	ldrb	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f040 8149 	bne.w	8003e78 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8084 	beq.w	8003cf8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	4413      	add	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	011a      	lsls	r2, r3, #4
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	88db      	ldrh	r3, [r3, #6]
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	81fb      	strh	r3, [r7, #14]
 8003c32:	89fb      	ldrh	r3, [r7, #14]
 8003c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01b      	beq.n	8003c74 <USB_ActivateEndpoint+0x17c>
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	81bb      	strh	r3, [r7, #12]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	441a      	add	r2, r3
 8003c5e:	89bb      	ldrh	r3, [r7, #12]
 8003c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	78db      	ldrb	r3, [r3, #3]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d020      	beq.n	8003cbe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c92:	813b      	strh	r3, [r7, #8]
 8003c94:	893b      	ldrh	r3, [r7, #8]
 8003c96:	f083 0320 	eor.w	r3, r3, #32
 8003c9a:	813b      	strh	r3, [r7, #8]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	893b      	ldrh	r3, [r7, #8]
 8003ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	8013      	strh	r3, [r2, #0]
 8003cbc:	e27f      	b.n	80041be <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd4:	817b      	strh	r3, [r7, #10]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	441a      	add	r2, r3
 8003ce0:	897b      	ldrh	r3, [r7, #10]
 8003ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	8013      	strh	r3, [r2, #0]
 8003cf6:	e262      	b.n	80041be <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	4413      	add	r3, r2
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	011a      	lsls	r2, r3, #4
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	88db      	ldrh	r3, [r3, #6]
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	4413      	add	r3, r2
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	011a      	lsls	r2, r3, #4
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	4413      	add	r3, r2
 8003d4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d4e:	623b      	str	r3, [r7, #32]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d112      	bne.n	8003d7e <USB_ActivateEndpoint+0x286>
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	801a      	strh	r2, [r3, #0]
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	e02f      	b.n	8003dde <USB_ActivateEndpoint+0x2e6>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b3e      	cmp	r3, #62	; 0x3e
 8003d84:	d813      	bhi.n	8003dae <USB_ActivateEndpoint+0x2b6>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <USB_ActivateEndpoint+0x2a8>
 8003d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	029b      	lsls	r3, r3, #10
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	801a      	strh	r2, [r3, #0]
 8003dac:	e017      	b.n	8003dde <USB_ActivateEndpoint+0x2e6>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	663b      	str	r3, [r7, #96]	; 0x60
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <USB_ActivateEndpoint+0x2d0>
 8003dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	029b      	lsls	r3, r3, #10
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	83fb      	strh	r3, [r7, #30]
 8003dec:	8bfb      	ldrh	r3, [r7, #30]
 8003dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01b      	beq.n	8003e2e <USB_ActivateEndpoint+0x336>
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0c:	83bb      	strh	r3, [r7, #28]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	441a      	add	r2, r3
 8003e18:	8bbb      	ldrh	r3, [r7, #28]
 8003e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e44:	837b      	strh	r3, [r7, #26]
 8003e46:	8b7b      	ldrh	r3, [r7, #26]
 8003e48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e4c:	837b      	strh	r3, [r7, #26]
 8003e4e:	8b7b      	ldrh	r3, [r7, #26]
 8003e50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e54:	837b      	strh	r3, [r7, #26]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	441a      	add	r2, r3
 8003e60:	8b7b      	ldrh	r3, [r7, #26]
 8003e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	8013      	strh	r3, [r2, #0]
 8003e76:	e1a2      	b.n	80041be <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	441a      	add	r2, r3
 8003e9c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec4:	4413      	add	r3, r2
 8003ec6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	011a      	lsls	r2, r3, #4
 8003ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	891b      	ldrh	r3, [r3, #8]
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee6:	801a      	strh	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	653b      	str	r3, [r7, #80]	; 0x50
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef8:	4413      	add	r3, r2
 8003efa:	653b      	str	r3, [r7, #80]	; 0x50
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	011a      	lsls	r2, r3, #4
 8003f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	895b      	ldrh	r3, [r3, #10]
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8091 	bne.w	8004048 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003f34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01b      	beq.n	8003f76 <USB_ActivateEndpoint+0x47e>
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f54:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	441a      	add	r2, r3
 8003f60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	873b      	strh	r3, [r7, #56]	; 0x38
 8003f84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01b      	beq.n	8003fc6 <USB_ActivateEndpoint+0x4ce>
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	441a      	add	r2, r3
 8003fb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fdc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003fde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003fe0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003fe4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003fe6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003fe8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	441a      	add	r2, r3
 8003ff8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400a:	b29b      	uxth	r3, r3
 800400c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004024:	867b      	strh	r3, [r7, #50]	; 0x32
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004042:	b29b      	uxth	r3, r3
 8004044:	8013      	strh	r3, [r2, #0]
 8004046:	e0ba      	b.n	80041be <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004058:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800405c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01d      	beq.n	80040a0 <USB_ActivateEndpoint+0x5a8>
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800408c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409c:	b29b      	uxth	r3, r3
 800409e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80040b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01d      	beq.n	80040f8 <USB_ActivateEndpoint+0x600>
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80040e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	78db      	ldrb	r3, [r3, #3]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d024      	beq.n	800414a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800411a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800411e:	f083 0320 	eor.w	r3, r3, #32
 8004122:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	441a      	add	r2, r3
 8004130:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800413c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004144:	b29b      	uxth	r3, r3
 8004146:	8013      	strh	r3, [r2, #0]
 8004148:	e01d      	b.n	8004186 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004160:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	441a      	add	r2, r3
 800416e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800417a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004182:	b29b      	uxth	r3, r3
 8004184:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	441a      	add	r2, r3
 80041a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80041aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80041be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	376c      	adds	r7, #108	; 0x6c
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b08d      	sub	sp, #52	; 0x34
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	7b1b      	ldrb	r3, [r3, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f040 808e 	bne.w	80042fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d044      	beq.n	8004272 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	81bb      	strh	r3, [r7, #12]
 80041f6:	89bb      	ldrh	r3, [r7, #12]
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <USB_DeactivateEndpoint+0x6c>
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004216:	817b      	strh	r3, [r7, #10]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	897b      	ldrh	r3, [r7, #10]
 8004224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424e:	813b      	strh	r3, [r7, #8]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426c:	b29b      	uxth	r3, r3
 800426e:	8013      	strh	r3, [r2, #0]
 8004270:	e192      	b.n	8004598 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	827b      	strh	r3, [r7, #18]
 8004280:	8a7b      	ldrh	r3, [r7, #18]
 8004282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01b      	beq.n	80042c2 <USB_DeactivateEndpoint+0xf6>
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a0:	823b      	strh	r3, [r7, #16]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	441a      	add	r2, r3
 80042ac:	8a3b      	ldrh	r3, [r7, #16]
 80042ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042be:	b29b      	uxth	r3, r3
 80042c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d8:	81fb      	strh	r3, [r7, #14]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	441a      	add	r2, r3
 80042e4:	89fb      	ldrh	r3, [r7, #14]
 80042e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	8013      	strh	r3, [r2, #0]
 80042fa:	e14d      	b.n	8004598 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 80a5 	bne.w	8004450 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	843b      	strh	r3, [r7, #32]
 8004314:	8c3b      	ldrh	r3, [r7, #32]
 8004316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01b      	beq.n	8004356 <USB_DeactivateEndpoint+0x18a>
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004334:	83fb      	strh	r3, [r7, #30]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	441a      	add	r2, r3
 8004340:	8bfb      	ldrh	r3, [r7, #30]
 8004342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800434a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800434e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004352:	b29b      	uxth	r3, r3
 8004354:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	83bb      	strh	r3, [r7, #28]
 8004364:	8bbb      	ldrh	r3, [r7, #28]
 8004366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01b      	beq.n	80043a6 <USB_DeactivateEndpoint+0x1da>
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	837b      	strh	r3, [r7, #26]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	441a      	add	r2, r3
 8004390:	8b7b      	ldrh	r3, [r7, #26]
 8004392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	833b      	strh	r3, [r7, #24]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	8b3b      	ldrh	r3, [r7, #24]
 80043ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f4:	82fb      	strh	r3, [r7, #22]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	8afb      	ldrh	r3, [r7, #22]
 8004402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004412:	b29b      	uxth	r3, r3
 8004414:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800442c:	82bb      	strh	r3, [r7, #20]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	441a      	add	r2, r3
 8004438:	8abb      	ldrh	r3, [r7, #20]
 800443a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444a:	b29b      	uxth	r3, r3
 800444c:	8013      	strh	r3, [r2, #0]
 800444e:	e0a3      	b.n	8004598 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800445e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <USB_DeactivateEndpoint+0x2d4>
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800448c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80044ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80044b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01b      	beq.n	80044f0 <USB_DeactivateEndpoint+0x324>
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	441a      	add	r2, r3
 80044da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80044dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004506:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800454c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455c:	b29b      	uxth	r3, r3
 800455e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	847b      	strh	r3, [r7, #34]	; 0x22
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	441a      	add	r2, r3
 8004582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800458c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004594:	b29b      	uxth	r3, r3
 8004596:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3734      	adds	r7, #52	; 0x34
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b0cc      	sub	sp, #304	; 0x130
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	6018      	str	r0, [r3, #0]
 80045ae:	463b      	mov	r3, r7
 80045b0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045b2:	463b      	mov	r3, r7
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	f040 872e 	bne.w	800541a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80045be:	463b      	mov	r3, r7
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	463b      	mov	r3, r7
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d905      	bls.n	80045da <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80045ce:	463b      	mov	r3, r7
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80045d8:	e004      	b.n	80045e4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80045da:	463b      	mov	r3, r7
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80045e4:	463b      	mov	r3, r7
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	7b1b      	ldrb	r3, [r3, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d134      	bne.n	8004658 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80045ee:	463b      	mov	r3, r7
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6959      	ldr	r1, [r3, #20]
 80045f4:	463b      	mov	r3, r7
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	88da      	ldrh	r2, [r3, #6]
 80045fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045fe:	b29b      	uxth	r3, r3
 8004600:	1d38      	adds	r0, r7, #4
 8004602:	6800      	ldr	r0, [r0, #0]
 8004604:	f001 fc03 	bl	8005e0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004608:	f107 0310 	add.w	r3, r7, #16
 800460c:	1d3a      	adds	r2, r7, #4
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	4619      	mov	r1, r3
 800461e:	f107 0310 	add.w	r3, r7, #16
 8004622:	f107 0210 	add.w	r2, r7, #16
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	440a      	add	r2, r1
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	463b      	mov	r3, r7
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	011a      	lsls	r2, r3, #4
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4413      	add	r3, r2
 800463c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800464a:	b29a      	uxth	r2, r3
 800464c:	f107 030c 	add.w	r3, r7, #12
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	f000 beac 	b.w	80053b0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004658:	463b      	mov	r3, r7
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	78db      	ldrb	r3, [r3, #3]
 800465e:	2b02      	cmp	r3, #2
 8004660:	f040 838c 	bne.w	8004d7c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004664:	463b      	mov	r3, r7
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6a1a      	ldr	r2, [r3, #32]
 800466a:	463b      	mov	r3, r7
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	429a      	cmp	r2, r3
 8004672:	f240 8330 	bls.w	8004cd6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	463b      	mov	r3, r7
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004690:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004694:	1d3b      	adds	r3, r7, #4
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	463b      	mov	r3, r7
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	441a      	add	r2, r3
 80046a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80046b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80046ba:	463b      	mov	r3, r7
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046c4:	1ad2      	subs	r2, r2, r3
 80046c6:	463b      	mov	r3, r7
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80046cc:	1d3b      	adds	r3, r7, #4
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	463b      	mov	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 819e 	beq.w	8004a24 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046ec:	1d3a      	adds	r2, r7, #4
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	463b      	mov	r3, r7
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d17a      	bne.n	80047f2 <USB_EPStartXfer+0x24e>
 80046fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004700:	1d3a      	adds	r2, r7, #4
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	1d3b      	adds	r3, r7, #4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470e:	b29b      	uxth	r3, r3
 8004710:	4619      	mov	r1, r3
 8004712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004716:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	440a      	add	r2, r1
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	463b      	mov	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	011a      	lsls	r2, r3, #4
 8004728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4413      	add	r3, r2
 8004730:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d11a      	bne.n	8004778 <USB_EPStartXfer+0x1d4>
 8004742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004750:	b29a      	uxth	r2, r3
 8004752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476c:	b29a      	uxth	r2, r3
 800476e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e062      	b.n	800483e <USB_EPStartXfer+0x29a>
 8004778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800477c:	2b3e      	cmp	r3, #62	; 0x3e
 800477e:	d819      	bhi.n	80047b4 <USB_EPStartXfer+0x210>
 8004780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800478a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d004      	beq.n	80047a0 <USB_EPStartXfer+0x1fc>
 8004796:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800479a:	3301      	adds	r3, #1
 800479c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80047a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	029b      	lsls	r3, r3, #10
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	801a      	strh	r2, [r3, #0]
 80047b2:	e044      	b.n	800483e <USB_EPStartXfer+0x29a>
 80047b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80047be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d104      	bne.n	80047d4 <USB_EPStartXfer+0x230>
 80047ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047ce:	3b01      	subs	r3, #1
 80047d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80047d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047d8:	b29b      	uxth	r3, r3
 80047da:	029b      	lsls	r3, r3, #10
 80047dc:	b29b      	uxth	r3, r3
 80047de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	e025      	b.n	800483e <USB_EPStartXfer+0x29a>
 80047f2:	463b      	mov	r3, r7
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	785b      	ldrb	r3, [r3, #1]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d120      	bne.n	800483e <USB_EPStartXfer+0x29a>
 80047fc:	1d3b      	adds	r3, r7, #4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004804:	b29b      	uxth	r3, r3
 8004806:	4619      	mov	r1, r3
 8004808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800480c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	440a      	add	r2, r1
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	463b      	mov	r3, r7
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	011a      	lsls	r2, r3, #4
 800481e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4413      	add	r3, r2
 8004826:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800482a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004834:	b29a      	uxth	r2, r3
 8004836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800483e:	463b      	mov	r3, r7
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	895b      	ldrh	r3, [r3, #10]
 8004844:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004848:	463b      	mov	r3, r7
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6959      	ldr	r1, [r3, #20]
 800484e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004852:	b29b      	uxth	r3, r3
 8004854:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004858:	1d38      	adds	r0, r7, #4
 800485a:	6800      	ldr	r0, [r0, #0]
 800485c:	f001 fad7 	bl	8005e0e <USB_WritePMA>
            ep->xfer_buff += len;
 8004860:	463b      	mov	r3, r7
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486a:	441a      	add	r2, r3
 800486c:	463b      	mov	r3, r7
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004872:	463b      	mov	r3, r7
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6a1a      	ldr	r2, [r3, #32]
 8004878:	463b      	mov	r3, r7
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	d909      	bls.n	8004896 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004882:	463b      	mov	r3, r7
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800488c:	1ad2      	subs	r2, r2, r3
 800488e:	463b      	mov	r3, r7
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	621a      	str	r2, [r3, #32]
 8004894:	e008      	b.n	80048a8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8004896:	463b      	mov	r3, r7
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80048a0:	463b      	mov	r3, r7
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80048a8:	463b      	mov	r3, r7
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	785b      	ldrb	r3, [r3, #1]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d17a      	bne.n	80049a8 <USB_EPStartXfer+0x404>
 80048b2:	f107 0318 	add.w	r3, r7, #24
 80048b6:	1d3a      	adds	r2, r7, #4
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	1d3b      	adds	r3, r7, #4
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4619      	mov	r1, r3
 80048c8:	f107 0318 	add.w	r3, r7, #24
 80048cc:	f107 0218 	add.w	r2, r7, #24
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	440a      	add	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	463b      	mov	r3, r7
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	011a      	lsls	r2, r3, #4
 80048de:	f107 0318 	add.w	r3, r7, #24
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80048ea:	f107 0314 	add.w	r3, r7, #20
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d11a      	bne.n	800492e <USB_EPStartXfer+0x38a>
 80048f8:	f107 0314 	add.w	r3, r7, #20
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004906:	b29a      	uxth	r2, r3
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	f107 0314 	add.w	r3, r7, #20
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800491e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004922:	b29a      	uxth	r2, r3
 8004924:	f107 0314 	add.w	r3, r7, #20
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	e067      	b.n	80049fe <USB_EPStartXfer+0x45a>
 800492e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004932:	2b3e      	cmp	r3, #62	; 0x3e
 8004934:	d819      	bhi.n	800496a <USB_EPStartXfer+0x3c6>
 8004936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <USB_EPStartXfer+0x3b2>
 800494c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004950:	3301      	adds	r3, #1
 8004952:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004956:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800495a:	b29b      	uxth	r3, r3
 800495c:	029b      	lsls	r3, r3, #10
 800495e:	b29a      	uxth	r2, r3
 8004960:	f107 0314 	add.w	r3, r7, #20
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	e049      	b.n	80049fe <USB_EPStartXfer+0x45a>
 800496a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2b00      	cmp	r3, #0
 800497e:	d104      	bne.n	800498a <USB_EPStartXfer+0x3e6>
 8004980:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004984:	3b01      	subs	r3, #1
 8004986:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800498a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800498e:	b29b      	uxth	r3, r3
 8004990:	029b      	lsls	r3, r3, #10
 8004992:	b29b      	uxth	r3, r3
 8004994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499c:	b29a      	uxth	r2, r3
 800499e:	f107 0314 	add.w	r3, r7, #20
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	e02a      	b.n	80049fe <USB_EPStartXfer+0x45a>
 80049a8:	463b      	mov	r3, r7
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d125      	bne.n	80049fe <USB_EPStartXfer+0x45a>
 80049b2:	f107 0320 	add.w	r3, r7, #32
 80049b6:	1d3a      	adds	r2, r7, #4
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	1d3b      	adds	r3, r7, #4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4619      	mov	r1, r3
 80049c8:	f107 0320 	add.w	r3, r7, #32
 80049cc:	f107 0220 	add.w	r2, r7, #32
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	440a      	add	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	463b      	mov	r3, r7
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	011a      	lsls	r2, r3, #4
 80049de:	f107 0320 	add.w	r3, r7, #32
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4413      	add	r3, r2
 80049e6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80049ea:	f107 031c 	add.w	r3, r7, #28
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	f107 031c 	add.w	r3, r7, #28
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80049fe:	463b      	mov	r3, r7
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	891b      	ldrh	r3, [r3, #8]
 8004a04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a08:	463b      	mov	r3, r7
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6959      	ldr	r1, [r3, #20]
 8004a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a18:	1d38      	adds	r0, r7, #4
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	f001 f9f7 	bl	8005e0e <USB_WritePMA>
 8004a20:	f000 bcc6 	b.w	80053b0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a24:	463b      	mov	r3, r7
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	785b      	ldrb	r3, [r3, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d164      	bne.n	8004af8 <USB_EPStartXfer+0x554>
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a34:	1d3b      	adds	r3, r7, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a42:	4413      	add	r3, r2
 8004a44:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a46:	463b      	mov	r3, r7
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	011a      	lsls	r2, r3, #4
 8004a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a50:	4413      	add	r3, r2
 8004a52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a56:	647b      	str	r3, [r7, #68]	; 0x44
 8004a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d112      	bne.n	8004a86 <USB_EPStartXfer+0x4e2>
 8004a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	e057      	b.n	8004b36 <USB_EPStartXfer+0x592>
 8004a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a8c:	d817      	bhi.n	8004abe <USB_EPStartXfer+0x51a>
 8004a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <USB_EPStartXfer+0x50a>
 8004aa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004aae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	029b      	lsls	r3, r3, #10
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aba:	801a      	strh	r2, [r3, #0]
 8004abc:	e03b      	b.n	8004b36 <USB_EPStartXfer+0x592>
 8004abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d104      	bne.n	8004ade <USB_EPStartXfer+0x53a>
 8004ad4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ade:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	029b      	lsls	r3, r3, #10
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af4:	801a      	strh	r2, [r3, #0]
 8004af6:	e01e      	b.n	8004b36 <USB_EPStartXfer+0x592>
 8004af8:	463b      	mov	r3, r7
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d119      	bne.n	8004b36 <USB_EPStartXfer+0x592>
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	653b      	str	r3, [r7, #80]	; 0x50
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b16:	4413      	add	r3, r2
 8004b18:	653b      	str	r3, [r7, #80]	; 0x50
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	011a      	lsls	r2, r3, #4
 8004b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b24:	4413      	add	r3, r2
 8004b26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b36:	463b      	mov	r3, r7
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	891b      	ldrh	r3, [r3, #8]
 8004b3c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b40:	463b      	mov	r3, r7
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6959      	ldr	r1, [r3, #20]
 8004b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b50:	1d38      	adds	r0, r7, #4
 8004b52:	6800      	ldr	r0, [r0, #0]
 8004b54:	f001 f95b 	bl	8005e0e <USB_WritePMA>
            ep->xfer_buff += len;
 8004b58:	463b      	mov	r3, r7
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b62:	441a      	add	r2, r3
 8004b64:	463b      	mov	r3, r7
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6a1a      	ldr	r2, [r3, #32]
 8004b70:	463b      	mov	r3, r7
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d909      	bls.n	8004b8e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004b7a:	463b      	mov	r3, r7
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6a1a      	ldr	r2, [r3, #32]
 8004b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b84:	1ad2      	subs	r2, r2, r3
 8004b86:	463b      	mov	r3, r7
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	621a      	str	r2, [r3, #32]
 8004b8c:	e008      	b.n	8004ba0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b8e:	463b      	mov	r3, r7
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004b98:	463b      	mov	r3, r7
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ba0:	1d3b      	adds	r3, r7, #4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d164      	bne.n	8004c7a <USB_EPStartXfer+0x6d6>
 8004bb0:	1d3b      	adds	r3, r7, #4
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	4413      	add	r3, r2
 8004bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bc8:	463b      	mov	r3, r7
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	011a      	lsls	r2, r3, #4
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d112      	bne.n	8004c08 <USB_EPStartXfer+0x664>
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf0:	801a      	strh	r2, [r3, #0]
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	e054      	b.n	8004cb2 <USB_EPStartXfer+0x70e>
 8004c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c0c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c0e:	d817      	bhi.n	8004c40 <USB_EPStartXfer+0x69c>
 8004c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <USB_EPStartXfer+0x68c>
 8004c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	029b      	lsls	r3, r3, #10
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	e038      	b.n	8004cb2 <USB_EPStartXfer+0x70e>
 8004c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d104      	bne.n	8004c60 <USB_EPStartXfer+0x6bc>
 8004c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	029b      	lsls	r3, r3, #10
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	e01b      	b.n	8004cb2 <USB_EPStartXfer+0x70e>
 8004c7a:	463b      	mov	r3, r7
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d116      	bne.n	8004cb2 <USB_EPStartXfer+0x70e>
 8004c84:	1d3b      	adds	r3, r7, #4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c92:	4413      	add	r3, r2
 8004c94:	643b      	str	r3, [r7, #64]	; 0x40
 8004c96:	463b      	mov	r3, r7
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	011a      	lsls	r2, r3, #4
 8004c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004cb2:	463b      	mov	r3, r7
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	895b      	ldrh	r3, [r3, #10]
 8004cb8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6959      	ldr	r1, [r3, #20]
 8004cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ccc:	1d38      	adds	r0, r7, #4
 8004cce:	6800      	ldr	r0, [r0, #0]
 8004cd0:	f001 f89d 	bl	8005e0e <USB_WritePMA>
 8004cd4:	e36c      	b.n	80053b0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	463b      	mov	r3, r7
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	441a      	add	r2, r3
 8004d0c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d24:	1d3b      	adds	r3, r7, #4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2a:	1d3b      	adds	r3, r7, #4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d38:	4413      	add	r3, r2
 8004d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	011a      	lsls	r2, r3, #4
 8004d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d46:	4413      	add	r3, r2
 8004d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d58:	463b      	mov	r3, r7
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	891b      	ldrh	r3, [r3, #8]
 8004d5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d62:	463b      	mov	r3, r7
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6959      	ldr	r1, [r3, #20]
 8004d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d72:	1d38      	adds	r0, r7, #4
 8004d74:	6800      	ldr	r0, [r0, #0]
 8004d76:	f001 f84a 	bl	8005e0e <USB_WritePMA>
 8004d7a:	e319      	b.n	80053b0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004d7c:	1d3b      	adds	r3, r7, #4
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	463b      	mov	r3, r7
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004d9a:	1d3b      	adds	r3, r7, #4
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	463b      	mov	r3, r7
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dca:	1ad2      	subs	r2, r2, r3
 8004dcc:	463b      	mov	r3, r7
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dd2:	1d3b      	adds	r3, r7, #4
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8162 	beq.w	80050b2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004df6:	463b      	mov	r3, r7
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	785b      	ldrb	r3, [r3, #1]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d164      	bne.n	8004eca <USB_EPStartXfer+0x926>
 8004e00:	1d3b      	adds	r3, r7, #4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e06:	1d3b      	adds	r3, r7, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e14:	4413      	add	r3, r2
 8004e16:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e18:	463b      	mov	r3, r7
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	011a      	lsls	r2, r3, #4
 8004e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e22:	4413      	add	r3, r2
 8004e24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e28:	677b      	str	r3, [r7, #116]	; 0x74
 8004e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d112      	bne.n	8004e58 <USB_EPStartXfer+0x8b4>
 8004e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	e057      	b.n	8004f08 <USB_EPStartXfer+0x964>
 8004e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e5e:	d817      	bhi.n	8004e90 <USB_EPStartXfer+0x8ec>
 8004e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e64:	085b      	lsrs	r3, r3, #1
 8004e66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <USB_EPStartXfer+0x8dc>
 8004e76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e80:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	029b      	lsls	r3, r3, #10
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e8c:	801a      	strh	r2, [r3, #0]
 8004e8e:	e03b      	b.n	8004f08 <USB_EPStartXfer+0x964>
 8004e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d104      	bne.n	8004eb0 <USB_EPStartXfer+0x90c>
 8004ea6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004eb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	029b      	lsls	r3, r3, #10
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec6:	801a      	strh	r2, [r3, #0]
 8004ec8:	e01e      	b.n	8004f08 <USB_EPStartXfer+0x964>
 8004eca:	463b      	mov	r3, r7
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d119      	bne.n	8004f08 <USB_EPStartXfer+0x964>
 8004ed4:	1d3b      	adds	r3, r7, #4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004eea:	463b      	mov	r3, r7
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	011a      	lsls	r2, r3, #4
 8004ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004efc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004f08:	463b      	mov	r3, r7
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	895b      	ldrh	r3, [r3, #10]
 8004f0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6959      	ldr	r1, [r3, #20]
 8004f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004f22:	1d38      	adds	r0, r7, #4
 8004f24:	6800      	ldr	r0, [r0, #0]
 8004f26:	f000 ff72 	bl	8005e0e <USB_WritePMA>
          ep->xfer_buff += len;
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f34:	441a      	add	r2, r3
 8004f36:	463b      	mov	r3, r7
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004f3c:	463b      	mov	r3, r7
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a1a      	ldr	r2, [r3, #32]
 8004f42:	463b      	mov	r3, r7
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d909      	bls.n	8004f60 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f56:	1ad2      	subs	r2, r2, r3
 8004f58:	463b      	mov	r3, r7
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	621a      	str	r2, [r3, #32]
 8004f5e:	e008      	b.n	8004f72 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004f60:	463b      	mov	r3, r7
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 821a 	beq.w	80053b0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d164      	bne.n	8005050 <USB_EPStartXfer+0xaac>
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f8c:	1d3b      	adds	r3, r7, #4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f9a:	4413      	add	r3, r2
 8004f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	011a      	lsls	r2, r3, #4
 8004fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa8:	4413      	add	r3, r2
 8004faa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fae:	667b      	str	r3, [r7, #100]	; 0x64
 8004fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d112      	bne.n	8004fde <USB_EPStartXfer+0xa3a>
 8004fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fc6:	801a      	strh	r2, [r3, #0]
 8004fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	e057      	b.n	800508e <USB_EPStartXfer+0xaea>
 8004fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fe4:	d817      	bhi.n	8005016 <USB_EPStartXfer+0xa72>
 8004fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <USB_EPStartXfer+0xa62>
 8004ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005000:	3301      	adds	r3, #1
 8005002:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800500a:	b29b      	uxth	r3, r3
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	b29a      	uxth	r2, r3
 8005010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005012:	801a      	strh	r2, [r3, #0]
 8005014:	e03b      	b.n	800508e <USB_EPStartXfer+0xaea>
 8005016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <USB_EPStartXfer+0xa92>
 800502c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005030:	3b01      	subs	r3, #1
 8005032:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800503a:	b29b      	uxth	r3, r3
 800503c:	029b      	lsls	r3, r3, #10
 800503e:	b29b      	uxth	r3, r3
 8005040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005048:	b29a      	uxth	r2, r3
 800504a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	e01e      	b.n	800508e <USB_EPStartXfer+0xaea>
 8005050:	463b      	mov	r3, r7
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d119      	bne.n	800508e <USB_EPStartXfer+0xaea>
 800505a:	1d3b      	adds	r3, r7, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	673b      	str	r3, [r7, #112]	; 0x70
 8005060:	1d3b      	adds	r3, r7, #4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005068:	b29b      	uxth	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800506e:	4413      	add	r3, r2
 8005070:	673b      	str	r3, [r7, #112]	; 0x70
 8005072:	463b      	mov	r3, r7
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	011a      	lsls	r2, r3, #4
 800507a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800507c:	4413      	add	r3, r2
 800507e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005088:	b29a      	uxth	r2, r3
 800508a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800508e:	463b      	mov	r3, r7
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	891b      	ldrh	r3, [r3, #8]
 8005094:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6959      	ldr	r1, [r3, #20]
 800509e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050a8:	1d38      	adds	r0, r7, #4
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	f000 feaf 	bl	8005e0e <USB_WritePMA>
 80050b0:	e17e      	b.n	80053b0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d16f      	bne.n	800519c <USB_EPStartXfer+0xbf8>
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050d4:	4413      	add	r3, r2
 80050d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050da:	463b      	mov	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	011a      	lsls	r2, r3, #4
 80050e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050e6:	4413      	add	r3, r2
 80050e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d116      	bne.n	8005126 <USB_EPStartXfer+0xb82>
 80050f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005104:	b29a      	uxth	r2, r3
 8005106:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511c:	b29a      	uxth	r2, r3
 800511e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005122:	801a      	strh	r2, [r3, #0]
 8005124:	e05f      	b.n	80051e6 <USB_EPStartXfer+0xc42>
 8005126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512a:	2b3e      	cmp	r3, #62	; 0x3e
 800512c:	d818      	bhi.n	8005160 <USB_EPStartXfer+0xbbc>
 800512e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <USB_EPStartXfer+0xbaa>
 8005144:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005148:	3301      	adds	r3, #1
 800514a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800514e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005152:	b29b      	uxth	r3, r3
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	b29a      	uxth	r2, r3
 8005158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	e042      	b.n	80051e6 <USB_EPStartXfer+0xc42>
 8005160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800516a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	2b00      	cmp	r3, #0
 8005174:	d104      	bne.n	8005180 <USB_EPStartXfer+0xbdc>
 8005176:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800517a:	3b01      	subs	r3, #1
 800517c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005180:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005184:	b29b      	uxth	r3, r3
 8005186:	029b      	lsls	r3, r3, #10
 8005188:	b29b      	uxth	r3, r3
 800518a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005192:	b29a      	uxth	r2, r3
 8005194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005198:	801a      	strh	r2, [r3, #0]
 800519a:	e024      	b.n	80051e6 <USB_EPStartXfer+0xc42>
 800519c:	463b      	mov	r3, r7
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d11f      	bne.n	80051e6 <USB_EPStartXfer+0xc42>
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051be:	4413      	add	r3, r2
 80051c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	011a      	lsls	r2, r3, #4
 80051cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051d0:	4413      	add	r3, r2
 80051d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051de:	b29a      	uxth	r2, r3
 80051e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80051e6:	463b      	mov	r3, r7
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	891b      	ldrh	r3, [r3, #8]
 80051ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f0:	463b      	mov	r3, r7
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6959      	ldr	r1, [r3, #20]
 80051f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005200:	1d38      	adds	r0, r7, #4
 8005202:	6800      	ldr	r0, [r0, #0]
 8005204:	f000 fe03 	bl	8005e0e <USB_WritePMA>
          ep->xfer_buff += len;
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005212:	441a      	add	r2, r3
 8005214:	463b      	mov	r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800521a:	463b      	mov	r3, r7
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	463b      	mov	r3, r7
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	429a      	cmp	r2, r3
 8005228:	d909      	bls.n	800523e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800522a:	463b      	mov	r3, r7
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005234:	1ad2      	subs	r2, r2, r3
 8005236:	463b      	mov	r3, r7
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	621a      	str	r2, [r3, #32]
 800523c:	e008      	b.n	8005250 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800523e:	463b      	mov	r3, r7
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005248:	463b      	mov	r3, r7
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2200      	movs	r2, #0
 800524e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80ab 	beq.w	80053b0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005262:	463b      	mov	r3, r7
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d16f      	bne.n	800534c <USB_EPStartXfer+0xda8>
 800526c:	1d3b      	adds	r3, r7, #4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527c:	b29b      	uxth	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005284:	4413      	add	r3, r2
 8005286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800528a:	463b      	mov	r3, r7
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	011a      	lsls	r2, r3, #4
 8005292:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005296:	4413      	add	r3, r2
 8005298:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800529c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d116      	bne.n	80052d6 <USB_EPStartXfer+0xd32>
 80052a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ba:	801a      	strh	r2, [r3, #0]
 80052bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	e05b      	b.n	800538e <USB_EPStartXfer+0xdea>
 80052d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052da:	2b3e      	cmp	r3, #62	; 0x3e
 80052dc:	d818      	bhi.n	8005310 <USB_EPStartXfer+0xd6c>
 80052de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <USB_EPStartXfer+0xd5a>
 80052f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f8:	3301      	adds	r3, #1
 80052fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005302:	b29b      	uxth	r3, r3
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	b29a      	uxth	r2, r3
 8005308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	e03e      	b.n	800538e <USB_EPStartXfer+0xdea>
 8005310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800531a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531e:	f003 031f 	and.w	r3, r3, #31
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <USB_EPStartXfer+0xd8c>
 8005326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800532a:	3b01      	subs	r3, #1
 800532c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005334:	b29b      	uxth	r3, r3
 8005336:	029b      	lsls	r3, r3, #10
 8005338:	b29b      	uxth	r3, r3
 800533a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005342:	b29a      	uxth	r2, r3
 8005344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	e020      	b.n	800538e <USB_EPStartXfer+0xdea>
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d11b      	bne.n	800538e <USB_EPStartXfer+0xdea>
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535e:	b29b      	uxth	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005366:	4413      	add	r3, r2
 8005368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800536c:	463b      	mov	r3, r7
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	011a      	lsls	r2, r3, #4
 8005374:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005378:	4413      	add	r3, r2
 800537a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800537e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005386:	b29a      	uxth	r2, r3
 8005388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800538c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800538e:	463b      	mov	r3, r7
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	895b      	ldrh	r3, [r3, #10]
 8005394:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005398:	463b      	mov	r3, r7
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6959      	ldr	r1, [r3, #20]
 800539e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053a8:	1d38      	adds	r0, r7, #4
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	f000 fd2f 	bl	8005e0e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	463b      	mov	r3, r7
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f107 020a 	add.w	r2, r7, #10
 80053c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ce:	8013      	strh	r3, [r2, #0]
 80053d0:	f107 030a 	add.w	r3, r7, #10
 80053d4:	f107 020a 	add.w	r2, r7, #10
 80053d8:	8812      	ldrh	r2, [r2, #0]
 80053da:	f082 0210 	eor.w	r2, r2, #16
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	f107 030a 	add.w	r3, r7, #10
 80053e4:	f107 020a 	add.w	r2, r7, #10
 80053e8:	8812      	ldrh	r2, [r2, #0]
 80053ea:	f082 0220 	eor.w	r2, r2, #32
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	463b      	mov	r3, r7
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	f107 030a 	add.w	r3, r7, #10
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
 8005418:	e3b5      	b.n	8005b86 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800541a:	463b      	mov	r3, r7
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	7b1b      	ldrb	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	f040 8090 	bne.w	8005546 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005426:	463b      	mov	r3, r7
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	463b      	mov	r3, r7
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	429a      	cmp	r2, r3
 8005434:	d90e      	bls.n	8005454 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005436:	463b      	mov	r3, r7
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005440:	463b      	mov	r3, r7
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800544a:	1ad2      	subs	r2, r2, r3
 800544c:	463b      	mov	r3, r7
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	619a      	str	r2, [r3, #24]
 8005452:	e008      	b.n	8005466 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005454:	463b      	mov	r3, r7
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800545e:	463b      	mov	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005466:	1d3b      	adds	r3, r7, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800547e:	4413      	add	r3, r2
 8005480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005484:	463b      	mov	r3, r7
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	011a      	lsls	r2, r3, #4
 800548c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005490:	4413      	add	r3, r2
 8005492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800549a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d116      	bne.n	80054d0 <USB_EPStartXfer+0xf2c>
 80054a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054b4:	801a      	strh	r2, [r3, #0]
 80054b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054cc:	801a      	strh	r2, [r3, #0]
 80054ce:	e32c      	b.n	8005b2a <USB_EPStartXfer+0x1586>
 80054d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d4:	2b3e      	cmp	r3, #62	; 0x3e
 80054d6:	d818      	bhi.n	800550a <USB_EPStartXfer+0xf66>
 80054d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d004      	beq.n	80054f8 <USB_EPStartXfer+0xf54>
 80054ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054f2:	3301      	adds	r3, #1
 80054f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80054f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	029b      	lsls	r3, r3, #10
 8005500:	b29a      	uxth	r2, r3
 8005502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	e30f      	b.n	8005b2a <USB_EPStartXfer+0x1586>
 800550a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	2b00      	cmp	r3, #0
 800551e:	d104      	bne.n	800552a <USB_EPStartXfer+0xf86>
 8005520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005524:	3b01      	subs	r3, #1
 8005526:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800552a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800552e:	b29b      	uxth	r3, r3
 8005530:	029b      	lsls	r3, r3, #10
 8005532:	b29b      	uxth	r3, r3
 8005534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800553c:	b29a      	uxth	r2, r3
 800553e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	e2f1      	b.n	8005b2a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005546:	463b      	mov	r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	78db      	ldrb	r3, [r3, #3]
 800554c:	2b02      	cmp	r3, #2
 800554e:	f040 818f 	bne.w	8005870 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005552:	463b      	mov	r3, r7
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d175      	bne.n	8005648 <USB_EPStartXfer+0x10a4>
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005564:	1d3b      	adds	r3, r7, #4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005574:	4413      	add	r3, r2
 8005576:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	011a      	lsls	r2, r3, #4
 8005582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005586:	4413      	add	r3, r2
 8005588:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800558c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005590:	463b      	mov	r3, r7
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d116      	bne.n	80055c8 <USB_EPStartXfer+0x1024>
 800559a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055be:	b29a      	uxth	r2, r3
 80055c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	e065      	b.n	8005694 <USB_EPStartXfer+0x10f0>
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b3e      	cmp	r3, #62	; 0x3e
 80055d0:	d81a      	bhi.n	8005608 <USB_EPStartXfer+0x1064>
 80055d2:	463b      	mov	r3, r7
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	085b      	lsrs	r3, r3, #1
 80055da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055de:	463b      	mov	r3, r7
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <USB_EPStartXfer+0x1052>
 80055ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f0:	3301      	adds	r3, #1
 80055f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	b29a      	uxth	r2, r3
 8005600:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	e045      	b.n	8005694 <USB_EPStartXfer+0x10f0>
 8005608:	463b      	mov	r3, r7
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005614:	463b      	mov	r3, r7
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	2b00      	cmp	r3, #0
 8005620:	d104      	bne.n	800562c <USB_EPStartXfer+0x1088>
 8005622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005626:	3b01      	subs	r3, #1
 8005628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005630:	b29b      	uxth	r3, r3
 8005632:	029b      	lsls	r3, r3, #10
 8005634:	b29b      	uxth	r3, r3
 8005636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563e:	b29a      	uxth	r2, r3
 8005640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e025      	b.n	8005694 <USB_EPStartXfer+0x10f0>
 8005648:	463b      	mov	r3, r7
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	785b      	ldrb	r3, [r3, #1]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d120      	bne.n	8005694 <USB_EPStartXfer+0x10f0>
 8005652:	1d3b      	adds	r3, r7, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005662:	b29b      	uxth	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800566a:	4413      	add	r3, r2
 800566c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005670:	463b      	mov	r3, r7
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	011a      	lsls	r2, r3, #4
 8005678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800567c:	4413      	add	r3, r2
 800567e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005682:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	b29a      	uxth	r2, r3
 800568e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005692:	801a      	strh	r2, [r3, #0]
 8005694:	1d3b      	adds	r3, r7, #4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800569c:	463b      	mov	r3, r7
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d175      	bne.n	8005792 <USB_EPStartXfer+0x11ee>
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80056ae:	1d3b      	adds	r3, r7, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056be:	4413      	add	r3, r2
 80056c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	011a      	lsls	r2, r3, #4
 80056cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056d0:	4413      	add	r3, r2
 80056d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056da:	463b      	mov	r3, r7
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d116      	bne.n	8005712 <USB_EPStartXfer+0x116e>
 80056e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005708:	b29a      	uxth	r2, r3
 800570a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e061      	b.n	80057d6 <USB_EPStartXfer+0x1232>
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b3e      	cmp	r3, #62	; 0x3e
 800571a:	d81a      	bhi.n	8005752 <USB_EPStartXfer+0x11ae>
 800571c:	463b      	mov	r3, r7
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	085b      	lsrs	r3, r3, #1
 8005724:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005728:	463b      	mov	r3, r7
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d004      	beq.n	8005740 <USB_EPStartXfer+0x119c>
 8005736:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800573a:	3301      	adds	r3, #1
 800573c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005740:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005744:	b29b      	uxth	r3, r3
 8005746:	029b      	lsls	r3, r3, #10
 8005748:	b29a      	uxth	r2, r3
 800574a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e041      	b.n	80057d6 <USB_EPStartXfer+0x1232>
 8005752:	463b      	mov	r3, r7
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <USB_EPStartXfer+0x11d2>
 800576c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005770:	3b01      	subs	r3, #1
 8005772:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005776:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800577a:	b29b      	uxth	r3, r3
 800577c:	029b      	lsls	r3, r3, #10
 800577e:	b29b      	uxth	r3, r3
 8005780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005788:	b29a      	uxth	r2, r3
 800578a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e021      	b.n	80057d6 <USB_EPStartXfer+0x1232>
 8005792:	463b      	mov	r3, r7
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d11c      	bne.n	80057d6 <USB_EPStartXfer+0x1232>
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057ac:	4413      	add	r3, r2
 80057ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057b2:	463b      	mov	r3, r7
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	011a      	lsls	r2, r3, #4
 80057ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057be:	4413      	add	r3, r2
 80057c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057c8:	463b      	mov	r3, r7
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057d4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80057d6:	463b      	mov	r3, r7
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 81a4 	beq.w	8005b2a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80057e2:	1d3b      	adds	r3, r7, #4
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	463b      	mov	r3, r7
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80057f6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80057fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d005      	beq.n	800580e <USB_EPStartXfer+0x126a>
 8005802:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10d      	bne.n	800582a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800580e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005816:	2b00      	cmp	r3, #0
 8005818:	f040 8187 	bne.w	8005b2a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800581c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	f040 8180 	bne.w	8005b2a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800582a:	1d3b      	adds	r3, r7, #4
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005848:	1d3b      	adds	r3, r7, #4
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	463b      	mov	r3, r7
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	441a      	add	r2, r3
 8005856:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800585a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005866:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800586a:	b29b      	uxth	r3, r3
 800586c:	8013      	strh	r3, [r2, #0]
 800586e:	e15c      	b.n	8005b2a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005870:	463b      	mov	r3, r7
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	78db      	ldrb	r3, [r3, #3]
 8005876:	2b01      	cmp	r3, #1
 8005878:	f040 8155 	bne.w	8005b26 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800587c:	463b      	mov	r3, r7
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	463b      	mov	r3, r7
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	429a      	cmp	r2, r3
 800588a:	d90e      	bls.n	80058aa <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800588c:	463b      	mov	r3, r7
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a0:	1ad2      	subs	r2, r2, r3
 80058a2:	463b      	mov	r3, r7
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	619a      	str	r2, [r3, #24]
 80058a8:	e008      	b.n	80058bc <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80058aa:	463b      	mov	r3, r7
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80058b4:	463b      	mov	r3, r7
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2200      	movs	r2, #0
 80058ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80058bc:	463b      	mov	r3, r7
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d16f      	bne.n	80059a6 <USB_EPStartXfer+0x1402>
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058de:	4413      	add	r3, r2
 80058e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058e4:	463b      	mov	r3, r7
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	011a      	lsls	r2, r3, #4
 80058ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058f0:	4413      	add	r3, r2
 80058f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d116      	bne.n	8005930 <USB_EPStartXfer+0x138c>
 8005902:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800590e:	b29a      	uxth	r2, r3
 8005910:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e05f      	b.n	80059f0 <USB_EPStartXfer+0x144c>
 8005930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005934:	2b3e      	cmp	r3, #62	; 0x3e
 8005936:	d818      	bhi.n	800596a <USB_EPStartXfer+0x13c6>
 8005938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <USB_EPStartXfer+0x13b4>
 800594e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005952:	3301      	adds	r3, #1
 8005954:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800595c:	b29b      	uxth	r3, r3
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	b29a      	uxth	r2, r3
 8005962:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005966:	801a      	strh	r2, [r3, #0]
 8005968:	e042      	b.n	80059f0 <USB_EPStartXfer+0x144c>
 800596a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005978:	f003 031f 	and.w	r3, r3, #31
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <USB_EPStartXfer+0x13e6>
 8005980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005984:	3b01      	subs	r3, #1
 8005986:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800598a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598e:	b29b      	uxth	r3, r3
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	b29b      	uxth	r3, r3
 8005994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599c:	b29a      	uxth	r2, r3
 800599e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	e024      	b.n	80059f0 <USB_EPStartXfer+0x144c>
 80059a6:	463b      	mov	r3, r7
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d11f      	bne.n	80059f0 <USB_EPStartXfer+0x144c>
 80059b0:	1d3b      	adds	r3, r7, #4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	4413      	add	r3, r2
 80059ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	011a      	lsls	r2, r3, #4
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059da:	4413      	add	r3, r2
 80059dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80059e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	1d3b      	adds	r3, r7, #4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d16f      	bne.n	8005ae2 <USB_EPStartXfer+0x153e>
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a20:	463b      	mov	r3, r7
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	011a      	lsls	r2, r3, #4
 8005a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d116      	bne.n	8005a6c <USB_EPStartXfer+0x14c8>
 8005a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	e05e      	b.n	8005b2a <USB_EPStartXfer+0x1586>
 8005a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a70:	2b3e      	cmp	r3, #62	; 0x3e
 8005a72:	d818      	bhi.n	8005aa6 <USB_EPStartXfer+0x1502>
 8005a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <USB_EPStartXfer+0x14f0>
 8005a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a8e:	3301      	adds	r3, #1
 8005a90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	029b      	lsls	r3, r3, #10
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e041      	b.n	8005b2a <USB_EPStartXfer+0x1586>
 8005aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <USB_EPStartXfer+0x1522>
 8005abc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	029b      	lsls	r3, r3, #10
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	e023      	b.n	8005b2a <USB_EPStartXfer+0x1586>
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d11e      	bne.n	8005b2a <USB_EPStartXfer+0x1586>
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afc:	4413      	add	r3, r2
 8005afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b02:	463b      	mov	r3, r7
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	011a      	lsls	r2, r3, #4
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	4413      	add	r3, r2
 8005b10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e001      	b.n	8005b2a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e02e      	b.n	8005b88 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b2a:	1d3b      	adds	r3, r7, #4
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	463b      	mov	r3, r7
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b44:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005b48:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b50:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005b54:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b5c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005b60:	1d3b      	adds	r3, r7, #4
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	463b      	mov	r3, r7
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d020      	beq.n	8005be6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bba:	81bb      	strh	r3, [r7, #12]
 8005bbc:	89bb      	ldrh	r3, [r7, #12]
 8005bbe:	f083 0310 	eor.w	r3, r3, #16
 8005bc2:	81bb      	strh	r3, [r7, #12]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	89bb      	ldrh	r3, [r7, #12]
 8005bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	8013      	strh	r3, [r2, #0]
 8005be4:	e01f      	b.n	8005c26 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfc:	81fb      	strh	r3, [r7, #14]
 8005bfe:	89fb      	ldrh	r3, [r7, #14]
 8005c00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c04:	81fb      	strh	r3, [r7, #14]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	441a      	add	r2, r3
 8005c10:	89fb      	ldrh	r3, [r7, #14]
 8005c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr

08005c32 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	7b1b      	ldrb	r3, [r3, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 809d 	bne.w	8005d80 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d04c      	beq.n	8005ce8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	823b      	strh	r3, [r7, #16]
 8005c5c:	8a3b      	ldrh	r3, [r7, #16]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01b      	beq.n	8005c9e <USB_EPClearStall+0x6c>
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7c:	81fb      	strh	r3, [r7, #14]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	78db      	ldrb	r3, [r3, #3]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d06c      	beq.n	8005d80 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbc:	81bb      	strh	r3, [r7, #12]
 8005cbe:	89bb      	ldrh	r3, [r7, #12]
 8005cc0:	f083 0320 	eor.w	r3, r3, #32
 8005cc4:	81bb      	strh	r3, [r7, #12]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	89bb      	ldrh	r3, [r7, #12]
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]
 8005ce6:	e04b      	b.n	8005d80 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	82fb      	strh	r3, [r7, #22]
 8005cf6:	8afb      	ldrh	r3, [r7, #22]
 8005cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01b      	beq.n	8005d38 <USB_EPClearStall+0x106>
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	82bb      	strh	r3, [r7, #20]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	8abb      	ldrh	r3, [r7, #20]
 8005d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4e:	827b      	strh	r3, [r7, #18]
 8005d50:	8a7b      	ldrh	r3, [r7, #18]
 8005d52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d56:	827b      	strh	r3, [r7, #18]
 8005d58:	8a7b      	ldrh	r3, [r7, #18]
 8005d5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d5e:	827b      	strh	r3, [r7, #18]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	8a7b      	ldrh	r3, [r7, #18]
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d103      	bne.n	8005da6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr

08005db2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr

08005dda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005dec:	68fb      	ldr	r3, [r7, #12]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr

08005df8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr

08005e0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b08d      	sub	sp, #52	; 0x34
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	80fb      	strh	r3, [r7, #6]
 8005e20:	4613      	mov	r3, r2
 8005e22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e24:	88bb      	ldrh	r3, [r7, #4]
 8005e26:	3301      	adds	r3, #1
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	005a      	lsls	r2, r3, #1
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e40:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e46:	e01e      	b.n	8005e86 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	3301      	adds	r3, #1
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	3302      	adds	r3, #2
 8005e72:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	3302      	adds	r3, #2
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	3b01      	subs	r3, #1
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1dd      	bne.n	8005e48 <USB_WritePMA+0x3a>
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	3734      	adds	r7, #52	; 0x34
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b08b      	sub	sp, #44	; 0x2c
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	80fb      	strh	r3, [r7, #6]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005eac:	88bb      	ldrh	r3, [r7, #4]
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	005a      	lsls	r2, r3, #1
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ece:	e01b      	b.n	8005f08 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	3302      	adds	r3, #2
 8005edc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	0a1b      	lsrs	r3, r3, #8
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	3302      	adds	r3, #2
 8005f00:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	3b01      	subs	r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e0      	bne.n	8005ed0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005f0e:	88bb      	ldrh	r3, [r7, #4]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	701a      	strb	r2, [r3, #0]
  }
}
 8005f2a:	bf00      	nop
 8005f2c:	372c      	adds	r7, #44	; 0x2c
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	7c1b      	ldrb	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d115      	bne.n	8005f78 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f50:	2202      	movs	r2, #2
 8005f52:	2181      	movs	r1, #129	; 0x81
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 fe54 	bl	8007c02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f64:	2202      	movs	r2, #2
 8005f66:	2101      	movs	r1, #1
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 fe4a 	bl	8007c02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005f76:	e012      	b.n	8005f9e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f78:	2340      	movs	r3, #64	; 0x40
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	2181      	movs	r1, #129	; 0x81
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f001 fe3f 	bl	8007c02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f8a:	2340      	movs	r3, #64	; 0x40
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	2101      	movs	r1, #1
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 fe36 	bl	8007c02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	2182      	movs	r1, #130	; 0x82
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 fe2c 	bl	8007c02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fb4:	f001 ff4c 	bl	8007e50 <USBD_static_malloc>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d102      	bne.n	8005fd0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
 8005fce:	e026      	b.n	800601e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	7c1b      	ldrb	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006004:	2101      	movs	r1, #1
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f001 feec 	bl	8007de4 <USBD_LL_PrepareReceive>
 800600c:	e007      	b.n	800601e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006014:	2340      	movs	r3, #64	; 0x40
 8006016:	2101      	movs	r1, #1
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 fee3 	bl	8007de4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006038:	2181      	movs	r1, #129	; 0x81
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 fe07 	bl	8007c4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006046:	2101      	movs	r1, #1
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 fe00 	bl	8007c4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006056:	2182      	movs	r1, #130	; 0x82
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 fdf8 	bl	8007c4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00e      	beq.n	800608c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607e:	4618      	mov	r0, r3
 8006080:	f001 fef2 	bl	8007e68 <USBD_static_free>
    pdev->pClassData = NULL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d039      	beq.n	8006134 <USBD_CDC_Setup+0x9e>
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d17c      	bne.n	80061be <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	88db      	ldrh	r3, [r3, #6]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d029      	beq.n	8006120 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	b25b      	sxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da11      	bge.n	80060fa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80060e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	88d2      	ldrh	r2, [r2, #6]
 80060e8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060ea:	6939      	ldr	r1, [r7, #16]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	88db      	ldrh	r3, [r3, #6]
 80060f0:	461a      	mov	r2, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 f9ca 	bl	800748c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80060f8:	e068      	b.n	80061cc <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	785a      	ldrb	r2, [r3, #1]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	88db      	ldrh	r3, [r3, #6]
 8006108:	b2da      	uxtb	r2, r3
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006110:	6939      	ldr	r1, [r7, #16]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	88db      	ldrh	r3, [r3, #6]
 8006116:	461a      	mov	r2, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 f9e5 	bl	80074e8 <USBD_CtlPrepareRx>
      break;
 800611e:	e055      	b.n	80061cc <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	7850      	ldrb	r0, [r2, #1]
 800612c:	2200      	movs	r2, #0
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	4798      	blx	r3
      break;
 8006132:	e04b      	b.n	80061cc <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b0a      	cmp	r3, #10
 800613a:	d017      	beq.n	800616c <USBD_CDC_Setup+0xd6>
 800613c:	2b0b      	cmp	r3, #11
 800613e:	d029      	beq.n	8006194 <USBD_CDC_Setup+0xfe>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d133      	bne.n	80061ac <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614a:	2b03      	cmp	r3, #3
 800614c:	d107      	bne.n	800615e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800614e:	f107 030c 	add.w	r3, r7, #12
 8006152:	2202      	movs	r2, #2
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 f998 	bl	800748c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800615c:	e02e      	b.n	80061bc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f001 f929 	bl	80073b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006166:	2302      	movs	r3, #2
 8006168:	75fb      	strb	r3, [r7, #23]
          break;
 800616a:	e027      	b.n	80061bc <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006172:	2b03      	cmp	r3, #3
 8006174:	d107      	bne.n	8006186 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006176:	f107 030f 	add.w	r3, r7, #15
 800617a:	2201      	movs	r2, #1
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 f984 	bl	800748c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006184:	e01a      	b.n	80061bc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 f915 	bl	80073b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800618e:	2302      	movs	r3, #2
 8006190:	75fb      	strb	r3, [r7, #23]
          break;
 8006192:	e013      	b.n	80061bc <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619a:	2b03      	cmp	r3, #3
 800619c:	d00d      	beq.n	80061ba <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 f909 	bl	80073b8 <USBD_CtlError>
            ret = USBD_FAIL;
 80061a6:	2302      	movs	r3, #2
 80061a8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061aa:	e006      	b.n	80061ba <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 f902 	bl	80073b8 <USBD_CtlError>
          ret = USBD_FAIL;
 80061b4:	2302      	movs	r3, #2
 80061b6:	75fb      	strb	r3, [r7, #23]
          break;
 80061b8:	e000      	b.n	80061bc <USBD_CDC_Setup+0x126>
          break;
 80061ba:	bf00      	nop
      }
      break;
 80061bc:	e006      	b.n	80061cc <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 f8f9 	bl	80073b8 <USBD_CtlError>
      ret = USBD_FAIL;
 80061c6:	2302      	movs	r3, #2
 80061c8:	75fb      	strb	r3, [r7, #23]
      break;
 80061ca:	bf00      	nop
  }

  return ret;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061f0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d03a      	beq.n	8006272 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	331c      	adds	r3, #28
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d029      	beq.n	8006266 <USBD_CDC_DataIn+0x90>
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	331c      	adds	r3, #28
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	78f9      	ldrb	r1, [r7, #3]
 8006226:	68b8      	ldr	r0, [r7, #8]
 8006228:	460b      	mov	r3, r1
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4403      	add	r3, r0
 8006232:	3338      	adds	r3, #56	; 0x38
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	fbb2 f1f3 	udiv	r1, r2, r3
 800623a:	fb03 f301 	mul.w	r3, r3, r1
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d110      	bne.n	8006266 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	440b      	add	r3, r1
 8006252:	331c      	adds	r3, #28
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006258:	78f9      	ldrb	r1, [r7, #3]
 800625a:	2300      	movs	r3, #0
 800625c:	2200      	movs	r2, #0
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 fd9d 	bl	8007d9e <USBD_LL_Transmit>
 8006264:	e003      	b.n	800626e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e000      	b.n	8006274 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006272:	2302      	movs	r3, #2
  }
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 fdc8 	bl	8007e2a <USBD_LL_GetRxDataSize>
 800629a:	4602      	mov	r2, r0
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00d      	beq.n	80062c8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80062c0:	4611      	mov	r1, r2
 80062c2:	4798      	blx	r3

    return USBD_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e000      	b.n	80062ca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80062c8:	2302      	movs	r3, #2
  }
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d015      	beq.n	8006318 <USBD_CDC_EP0_RxReady+0x46>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062f2:	2bff      	cmp	r3, #255	; 0xff
 80062f4:	d010      	beq.n	8006318 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006304:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800630c:	b292      	uxth	r2, r2
 800630e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	22ff      	movs	r2, #255	; 0xff
 8006314:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2243      	movs	r2, #67	; 0x43
 8006330:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006332:	4b03      	ldr	r3, [pc, #12]	; (8006340 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	20000094 	.word	0x20000094

08006344 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2243      	movs	r2, #67	; 0x43
 8006350:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006352:	4b03      	ldr	r3, [pc, #12]	; (8006360 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000050 	.word	0x20000050

08006364 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2243      	movs	r2, #67	; 0x43
 8006370:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006372:	4b03      	ldr	r3, [pc, #12]	; (8006380 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	200000d8 	.word	0x200000d8

08006384 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	220a      	movs	r2, #10
 8006390:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006392:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	2000000c 	.word	0x2000000c

080063a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80063ae:	2302      	movs	r3, #2
 80063b0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr

080063d0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80063ee:	88fa      	ldrh	r2, [r7, #6]
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006412:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr

08006428 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006436:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d017      	beq.n	8006472 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	7c1b      	ldrb	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006454:	2101      	movs	r1, #1
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 fcc4 	bl	8007de4 <USBD_LL_PrepareReceive>
 800645c:	e007      	b.n	800646e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	2101      	movs	r1, #1
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fcbb 	bl	8007de4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e000      	b.n	8006474 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006472:	2302      	movs	r3, #2
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006490:	2302      	movs	r3, #2
 8006492:	e01a      	b.n	80064ca <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	79fa      	ldrb	r2, [r7, #7]
 80064c0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f001 fb28 	bl	8007b18 <USBD_LL_Init>

  return USBD_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b085      	sub	sp, #20
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d006      	beq.n	80064f4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
 80064f2:	e001      	b.n	80064f8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064f4:	2302      	movs	r3, #2
 80064f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 fb5d 	bl	8007bcc <USBD_LL_Start>

  return USBD_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800653c:	2302      	movs	r3, #2
 800653e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00c      	beq.n	8006564 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	4611      	mov	r1, r2
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	4798      	blx	r3
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	460b      	mov	r3, r1
 8006578:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	78fa      	ldrb	r2, [r7, #3]
 8006584:	4611      	mov	r1, r2
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3

  return USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 feca 	bl	8007340 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80065ba:	461a      	mov	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065c8:	f003 031f 	and.w	r3, r3, #31
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d00c      	beq.n	80065ea <USBD_LL_SetupStage+0x56>
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d302      	bcc.n	80065da <USBD_LL_SetupStage+0x46>
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d010      	beq.n	80065fa <USBD_LL_SetupStage+0x66>
 80065d8:	e017      	b.n	800660a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f9ca 	bl	800697c <USBD_StdDevReq>
      break;
 80065e8:	e01a      	b.n	8006620 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa2c 	bl	8006a50 <USBD_StdItfReq>
      break;
 80065f8:	e012      	b.n	8006620 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa6a 	bl	8006adc <USBD_StdEPReq>
      break;
 8006608:	e00a      	b.n	8006620 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006610:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006614:	b2db      	uxtb	r3, r3
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fb37 	bl	8007c8c <USBD_LL_StallEP>
      break;
 800661e:	bf00      	nop
  }

  return USBD_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b086      	sub	sp, #24
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	460b      	mov	r3, r1
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006638:	7afb      	ldrb	r3, [r7, #11]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d14b      	bne.n	80066d6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006644:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800664c:	2b03      	cmp	r3, #3
 800664e:	d134      	bne.n	80066ba <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	429a      	cmp	r2, r3
 800665a:	d919      	bls.n	8006690 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	1ad2      	subs	r2, r2, r3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006672:	429a      	cmp	r2, r3
 8006674:	d203      	bcs.n	800667e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800667a:	b29b      	uxth	r3, r3
 800667c:	e002      	b.n	8006684 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006682:	b29b      	uxth	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 ff4b 	bl	8007524 <USBD_CtlContinueRx>
 800668e:	e038      	b.n	8006702 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d105      	bne.n	80066b2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 ff48 	bl	8007548 <USBD_CtlSendStatus>
 80066b8:	e023      	b.n	8006702 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066c0:	2b05      	cmp	r3, #5
 80066c2:	d11e      	bne.n	8006702 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80066cc:	2100      	movs	r1, #0
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f001 fadc 	bl	8007c8c <USBD_LL_StallEP>
 80066d4:	e015      	b.n	8006702 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00d      	beq.n	80066fe <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d108      	bne.n	80066fe <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	7afa      	ldrb	r2, [r7, #11]
 80066f6:	4611      	mov	r1, r2
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	4798      	blx	r3
 80066fc:	e001      	b.n	8006702 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066fe:	2302      	movs	r3, #2
 8006700:	e000      	b.n	8006704 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	460b      	mov	r3, r1
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d17f      	bne.n	8006820 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3314      	adds	r3, #20
 8006724:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800672c:	2b02      	cmp	r3, #2
 800672e:	d15c      	bne.n	80067ea <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	429a      	cmp	r2, r3
 800673a:	d915      	bls.n	8006768 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	1ad2      	subs	r2, r2, r3
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 feb5 	bl	80074c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800675a:	2300      	movs	r3, #0
 800675c:	2200      	movs	r2, #0
 800675e:	2100      	movs	r1, #0
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f001 fb3f 	bl	8007de4 <USBD_LL_PrepareReceive>
 8006766:	e04e      	b.n	8006806 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	6912      	ldr	r2, [r2, #16]
 8006770:	fbb3 f1f2 	udiv	r1, r3, r2
 8006774:	fb02 f201 	mul.w	r2, r2, r1
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d11c      	bne.n	80067b8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006786:	429a      	cmp	r2, r3
 8006788:	d316      	bcc.n	80067b8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006794:	429a      	cmp	r2, r3
 8006796:	d20f      	bcs.n	80067b8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006798:	2200      	movs	r2, #0
 800679a:	2100      	movs	r1, #0
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fe91 	bl	80074c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067aa:	2300      	movs	r3, #0
 80067ac:	2200      	movs	r2, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f001 fb17 	bl	8007de4 <USBD_LL_PrepareReceive>
 80067b6:	e026      	b.n	8006806 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d105      	bne.n	80067da <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80067da:	2180      	movs	r1, #128	; 0x80
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f001 fa55 	bl	8007c8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fec3 	bl	800756e <USBD_CtlReceiveStatus>
 80067e8:	e00d      	b.n	8006806 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d004      	beq.n	80067fe <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d103      	bne.n	8006806 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80067fe:	2180      	movs	r1, #128	; 0x80
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f001 fa43 	bl	8007c8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800680c:	2b01      	cmp	r3, #1
 800680e:	d11d      	bne.n	800684c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff fe83 	bl	800651c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800681e:	e015      	b.n	800684c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00d      	beq.n	8006848 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006832:	2b03      	cmp	r3, #3
 8006834:	d108      	bne.n	8006848 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	7afa      	ldrb	r2, [r7, #11]
 8006840:	4611      	mov	r1, r2
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	4798      	blx	r3
 8006846:	e001      	b.n	800684c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006848:	2302      	movs	r3, #2
 800684a:	e000      	b.n	800684e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800685e:	2340      	movs	r3, #64	; 0x40
 8006860:	2200      	movs	r2, #0
 8006862:	2100      	movs	r1, #0
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 f9cc 	bl	8007c02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2240      	movs	r2, #64	; 0x40
 8006876:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800687a:	2340      	movs	r3, #64	; 0x40
 800687c:	2200      	movs	r2, #0
 800687e:	2180      	movs	r1, #128	; 0x80
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 f9be 	bl	8007c02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2240      	movs	r2, #64	; 0x40
 8006890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d009      	beq.n	80068ce <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6852      	ldr	r2, [r2, #4]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	4611      	mov	r1, r2
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
  }

  return USBD_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	78fa      	ldrb	r2, [r7, #3]
 80068e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2204      	movs	r2, #4
 800690e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr

0800691e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692c:	2b04      	cmp	r3, #4
 800692e:	d105      	bne.n	800693c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	bc80      	pop	{r7}
 8006946:	4770      	bx	lr

08006948 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006956:	2b03      	cmp	r3, #3
 8006958:	d10b      	bne.n	8006972 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006992:	2b20      	cmp	r3, #32
 8006994:	d004      	beq.n	80069a0 <USBD_StdDevReq+0x24>
 8006996:	2b40      	cmp	r3, #64	; 0x40
 8006998:	d002      	beq.n	80069a0 <USBD_StdDevReq+0x24>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <USBD_StdDevReq+0x34>
 800699e:	e04c      	b.n	8006a3a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
      break;
 80069ae:	e049      	b.n	8006a44 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	2b09      	cmp	r3, #9
 80069b6:	d83a      	bhi.n	8006a2e <USBD_StdDevReq+0xb2>
 80069b8:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <USBD_StdDevReq+0x44>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	08006a11 	.word	0x08006a11
 80069c4:	08006a25 	.word	0x08006a25
 80069c8:	08006a2f 	.word	0x08006a2f
 80069cc:	08006a1b 	.word	0x08006a1b
 80069d0:	08006a2f 	.word	0x08006a2f
 80069d4:	080069f3 	.word	0x080069f3
 80069d8:	080069e9 	.word	0x080069e9
 80069dc:	08006a2f 	.word	0x08006a2f
 80069e0:	08006a07 	.word	0x08006a07
 80069e4:	080069fd 	.word	0x080069fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f9d4 	bl	8006d98 <USBD_GetDescriptor>
          break;
 80069f0:	e022      	b.n	8006a38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fb37 	bl	8007068 <USBD_SetAddress>
          break;
 80069fa:	e01d      	b.n	8006a38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fb74 	bl	80070ec <USBD_SetConfig>
          break;
 8006a04:	e018      	b.n	8006a38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fbfd 	bl	8007208 <USBD_GetConfig>
          break;
 8006a0e:	e013      	b.n	8006a38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fc2c 	bl	8007270 <USBD_GetStatus>
          break;
 8006a18:	e00e      	b.n	8006a38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fc5a 	bl	80072d6 <USBD_SetFeature>
          break;
 8006a22:	e009      	b.n	8006a38 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fc69 	bl	80072fe <USBD_ClrFeature>
          break;
 8006a2c:	e004      	b.n	8006a38 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fcc1 	bl	80073b8 <USBD_CtlError>
          break;
 8006a36:	bf00      	nop
      }
      break;
 8006a38:	e004      	b.n	8006a44 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fcbb 	bl	80073b8 <USBD_CtlError>
      break;
 8006a42:	bf00      	nop
  }

  return ret;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop

08006a50 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d003      	beq.n	8006a72 <USBD_StdItfReq+0x22>
 8006a6a:	2b40      	cmp	r3, #64	; 0x40
 8006a6c:	d001      	beq.n	8006a72 <USBD_StdItfReq+0x22>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d12a      	bne.n	8006ac8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d81d      	bhi.n	8006aba <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	889b      	ldrh	r3, [r3, #4]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d813      	bhi.n	8006ab0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	88db      	ldrh	r3, [r3, #6]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d110      	bne.n	8006ac4 <USBD_StdItfReq+0x74>
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10d      	bne.n	8006ac4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fd4d 	bl	8007548 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006aae:	e009      	b.n	8006ac4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fc80 	bl	80073b8 <USBD_CtlError>
          break;
 8006ab8:	e004      	b.n	8006ac4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fc7b 	bl	80073b8 <USBD_CtlError>
          break;
 8006ac2:	e000      	b.n	8006ac6 <USBD_StdItfReq+0x76>
          break;
 8006ac4:	bf00      	nop
      }
      break;
 8006ac6:	e004      	b.n	8006ad2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fc74 	bl	80073b8 <USBD_CtlError>
      break;
 8006ad0:	bf00      	nop
  }

  return USBD_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	889b      	ldrh	r3, [r3, #4]
 8006aee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d004      	beq.n	8006b06 <USBD_StdEPReq+0x2a>
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	d002      	beq.n	8006b06 <USBD_StdEPReq+0x2a>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <USBD_StdEPReq+0x3a>
 8006b04:	e13d      	b.n	8006d82 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
      break;
 8006b14:	e13a      	b.n	8006d8c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d10a      	bne.n	8006b38 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	4798      	blx	r3
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	e12a      	b.n	8006d8e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d03e      	beq.n	8006bbe <USBD_StdEPReq+0xe2>
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d002      	beq.n	8006b4a <USBD_StdEPReq+0x6e>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d070      	beq.n	8006c2a <USBD_StdEPReq+0x14e>
 8006b48:	e115      	b.n	8006d76 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d002      	beq.n	8006b5a <USBD_StdEPReq+0x7e>
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d015      	beq.n	8006b84 <USBD_StdEPReq+0xa8>
 8006b58:	e02b      	b.n	8006bb2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00c      	beq.n	8006b7a <USBD_StdEPReq+0x9e>
 8006b60:	7bbb      	ldrb	r3, [r7, #14]
 8006b62:	2b80      	cmp	r3, #128	; 0x80
 8006b64:	d009      	beq.n	8006b7a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 f88e 	bl	8007c8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b70:	2180      	movs	r1, #128	; 0x80
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 f88a 	bl	8007c8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b78:	e020      	b.n	8006bbc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fc1b 	bl	80073b8 <USBD_CtlError>
              break;
 8006b82:	e01b      	b.n	8006bbc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	885b      	ldrh	r3, [r3, #2]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10e      	bne.n	8006baa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <USBD_StdEPReq+0xce>
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	2b80      	cmp	r3, #128	; 0x80
 8006b96:	d008      	beq.n	8006baa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	88db      	ldrh	r3, [r3, #6]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f871 	bl	8007c8c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fccc 	bl	8007548 <USBD_CtlSendStatus>

              break;
 8006bb0:	e004      	b.n	8006bbc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fbff 	bl	80073b8 <USBD_CtlError>
              break;
 8006bba:	bf00      	nop
          }
          break;
 8006bbc:	e0e0      	b.n	8006d80 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d002      	beq.n	8006bce <USBD_StdEPReq+0xf2>
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d015      	beq.n	8006bf8 <USBD_StdEPReq+0x11c>
 8006bcc:	e026      	b.n	8006c1c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00c      	beq.n	8006bee <USBD_StdEPReq+0x112>
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b80      	cmp	r3, #128	; 0x80
 8006bd8:	d009      	beq.n	8006bee <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 f854 	bl	8007c8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006be4:	2180      	movs	r1, #128	; 0x80
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 f850 	bl	8007c8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bec:	e01c      	b.n	8006c28 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fbe1 	bl	80073b8 <USBD_CtlError>
              break;
 8006bf6:	e017      	b.n	8006c28 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	885b      	ldrh	r3, [r3, #2]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d112      	bne.n	8006c26 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f001 f85b 	bl	8007cca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fc97 	bl	8007548 <USBD_CtlSendStatus>
              }
              break;
 8006c1a:	e004      	b.n	8006c26 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fbca 	bl	80073b8 <USBD_CtlError>
              break;
 8006c24:	e000      	b.n	8006c28 <USBD_StdEPReq+0x14c>
              break;
 8006c26:	bf00      	nop
          }
          break;
 8006c28:	e0aa      	b.n	8006d80 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d002      	beq.n	8006c3a <USBD_StdEPReq+0x15e>
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d032      	beq.n	8006c9e <USBD_StdEPReq+0x1c2>
 8006c38:	e097      	b.n	8006d6a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <USBD_StdEPReq+0x174>
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b80      	cmp	r3, #128	; 0x80
 8006c44:	d004      	beq.n	8006c50 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fbb5 	bl	80073b8 <USBD_CtlError>
                break;
 8006c4e:	e091      	b.n	8006d74 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da0b      	bge.n	8006c70 <USBD_StdEPReq+0x194>
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	3310      	adds	r3, #16
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	e00b      	b.n	8006c88 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	4413      	add	r3, r2
 8006c86:	3304      	adds	r3, #4
 8006c88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2202      	movs	r2, #2
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fbf8 	bl	800748c <USBD_CtlSendData>
              break;
 8006c9c:	e06a      	b.n	8006d74 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	da11      	bge.n	8006cca <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	f003 020f 	and.w	r2, r3, #15
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	3318      	adds	r3, #24
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d117      	bne.n	8006cf0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fb78 	bl	80073b8 <USBD_CtlError>
                  break;
 8006cc8:	e054      	b.n	8006d74 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	f003 020f 	and.w	r2, r3, #15
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fb65 	bl	80073b8 <USBD_CtlError>
                  break;
 8006cee:	e041      	b.n	8006d74 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	da0b      	bge.n	8006d10 <USBD_StdEPReq+0x234>
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	3310      	adds	r3, #16
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	e00b      	b.n	8006d28 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	3304      	adds	r3, #4
 8006d28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <USBD_StdEPReq+0x25a>
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	2b80      	cmp	r3, #128	; 0x80
 8006d34:	d103      	bne.n	8006d3e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	e00e      	b.n	8006d5c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 ffe0 	bl	8007d08 <USBD_LL_IsStallEP>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2201      	movs	r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e002      	b.n	8006d5c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fb92 	bl	800748c <USBD_CtlSendData>
              break;
 8006d68:	e004      	b.n	8006d74 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fb23 	bl	80073b8 <USBD_CtlError>
              break;
 8006d72:	bf00      	nop
          }
          break;
 8006d74:	e004      	b.n	8006d80 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fb1d 	bl	80073b8 <USBD_CtlError>
          break;
 8006d7e:	bf00      	nop
      }
      break;
 8006d80:	e004      	b.n	8006d8c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fb17 	bl	80073b8 <USBD_CtlError>
      break;
 8006d8a:	bf00      	nop
  }

  return ret;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	885b      	ldrh	r3, [r3, #2]
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	2b06      	cmp	r3, #6
 8006dba:	f200 8128 	bhi.w	800700e <USBD_GetDescriptor+0x276>
 8006dbe:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <USBD_GetDescriptor+0x2c>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006de1 	.word	0x08006de1
 8006dc8:	08006df9 	.word	0x08006df9
 8006dcc:	08006e39 	.word	0x08006e39
 8006dd0:	0800700f 	.word	0x0800700f
 8006dd4:	0800700f 	.word	0x0800700f
 8006dd8:	08006faf 	.word	0x08006faf
 8006ddc:	08006fdb 	.word	0x08006fdb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	7c12      	ldrb	r2, [r2, #16]
 8006dec:	f107 0108 	add.w	r1, r7, #8
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	60f8      	str	r0, [r7, #12]
      break;
 8006df6:	e112      	b.n	800701e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7c1b      	ldrb	r3, [r3, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10d      	bne.n	8006e1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	f107 0208 	add.w	r2, r7, #8
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
 8006e10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3301      	adds	r3, #1
 8006e16:	2202      	movs	r2, #2
 8006e18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e1a:	e100      	b.n	800701e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	f107 0208 	add.w	r2, r7, #8
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3301      	adds	r3, #1
 8006e32:	2202      	movs	r2, #2
 8006e34:	701a      	strb	r2, [r3, #0]
      break;
 8006e36:	e0f2      	b.n	800701e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	885b      	ldrh	r3, [r3, #2]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	f200 80ac 	bhi.w	8006f9c <USBD_GetDescriptor+0x204>
 8006e44:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <USBD_GetDescriptor+0xb4>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006e65 	.word	0x08006e65
 8006e50:	08006e99 	.word	0x08006e99
 8006e54:	08006ecd 	.word	0x08006ecd
 8006e58:	08006f01 	.word	0x08006f01
 8006e5c:	08006f35 	.word	0x08006f35
 8006e60:	08006f69 	.word	0x08006f69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00b      	beq.n	8006e88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	7c12      	ldrb	r2, [r2, #16]
 8006e7c:	f107 0108 	add.w	r1, r7, #8
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e86:	e091      	b.n	8006fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fa94 	bl	80073b8 <USBD_CtlError>
            err++;
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	3301      	adds	r3, #1
 8006e94:	72fb      	strb	r3, [r7, #11]
          break;
 8006e96:	e089      	b.n	8006fac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	7c12      	ldrb	r2, [r2, #16]
 8006eb0:	f107 0108 	add.w	r1, r7, #8
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
 8006eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eba:	e077      	b.n	8006fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa7a 	bl	80073b8 <USBD_CtlError>
            err++;
 8006ec4:	7afb      	ldrb	r3, [r7, #11]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eca:	e06f      	b.n	8006fac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	7c12      	ldrb	r2, [r2, #16]
 8006ee4:	f107 0108 	add.w	r1, r7, #8
 8006ee8:	4610      	mov	r0, r2
 8006eea:	4798      	blx	r3
 8006eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eee:	e05d      	b.n	8006fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa60 	bl	80073b8 <USBD_CtlError>
            err++;
 8006ef8:	7afb      	ldrb	r3, [r7, #11]
 8006efa:	3301      	adds	r3, #1
 8006efc:	72fb      	strb	r3, [r7, #11]
          break;
 8006efe:	e055      	b.n	8006fac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00b      	beq.n	8006f24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	7c12      	ldrb	r2, [r2, #16]
 8006f18:	f107 0108 	add.w	r1, r7, #8
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
 8006f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f22:	e043      	b.n	8006fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa46 	bl	80073b8 <USBD_CtlError>
            err++;
 8006f2c:	7afb      	ldrb	r3, [r7, #11]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	72fb      	strb	r3, [r7, #11]
          break;
 8006f32:	e03b      	b.n	8006fac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	7c12      	ldrb	r2, [r2, #16]
 8006f4c:	f107 0108 	add.w	r1, r7, #8
 8006f50:	4610      	mov	r0, r2
 8006f52:	4798      	blx	r3
 8006f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f56:	e029      	b.n	8006fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa2c 	bl	80073b8 <USBD_CtlError>
            err++;
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	3301      	adds	r3, #1
 8006f64:	72fb      	strb	r3, [r7, #11]
          break;
 8006f66:	e021      	b.n	8006fac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	7c12      	ldrb	r2, [r2, #16]
 8006f80:	f107 0108 	add.w	r1, r7, #8
 8006f84:	4610      	mov	r0, r2
 8006f86:	4798      	blx	r3
 8006f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f8a:	e00f      	b.n	8006fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa12 	bl	80073b8 <USBD_CtlError>
            err++;
 8006f94:	7afb      	ldrb	r3, [r7, #11]
 8006f96:	3301      	adds	r3, #1
 8006f98:	72fb      	strb	r3, [r7, #11]
          break;
 8006f9a:	e007      	b.n	8006fac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fa0a 	bl	80073b8 <USBD_CtlError>
          err++;
 8006fa4:	7afb      	ldrb	r3, [r7, #11]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006faa:	e038      	b.n	800701e <USBD_GetDescriptor+0x286>
 8006fac:	e037      	b.n	800701e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	7c1b      	ldrb	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	f107 0208 	add.w	r2, r7, #8
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4798      	blx	r3
 8006fc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fc8:	e029      	b.n	800701e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f9f3 	bl	80073b8 <USBD_CtlError>
        err++;
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	72fb      	strb	r3, [r7, #11]
      break;
 8006fd8:	e021      	b.n	800701e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	7c1b      	ldrb	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10d      	bne.n	8006ffe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	f107 0208 	add.w	r2, r7, #8
 8006fee:	4610      	mov	r0, r2
 8006ff0:	4798      	blx	r3
 8006ff2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	2207      	movs	r2, #7
 8006ffa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ffc:	e00f      	b.n	800701e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f9d9 	bl	80073b8 <USBD_CtlError>
        err++;
 8007006:	7afb      	ldrb	r3, [r7, #11]
 8007008:	3301      	adds	r3, #1
 800700a:	72fb      	strb	r3, [r7, #11]
      break;
 800700c:	e007      	b.n	800701e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f9d1 	bl	80073b8 <USBD_CtlError>
      err++;
 8007016:	7afb      	ldrb	r3, [r7, #11]
 8007018:	3301      	adds	r3, #1
 800701a:	72fb      	strb	r3, [r7, #11]
      break;
 800701c:	bf00      	nop
  }

  if (err != 0U)
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d11c      	bne.n	800705e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007024:	893b      	ldrh	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d011      	beq.n	800704e <USBD_GetDescriptor+0x2b6>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	88db      	ldrh	r3, [r3, #6]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00d      	beq.n	800704e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	88da      	ldrh	r2, [r3, #6]
 8007036:	893b      	ldrh	r3, [r7, #8]
 8007038:	4293      	cmp	r3, r2
 800703a:	bf28      	it	cs
 800703c:	4613      	movcs	r3, r2
 800703e:	b29b      	uxth	r3, r3
 8007040:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007042:	893b      	ldrh	r3, [r7, #8]
 8007044:	461a      	mov	r2, r3
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fa1f 	bl	800748c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	88db      	ldrh	r3, [r3, #6]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa76 	bl	8007548 <USBD_CtlSendStatus>
 800705c:	e000      	b.n	8007060 <USBD_GetDescriptor+0x2c8>
    return;
 800705e:	bf00      	nop
    }
  }
}
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop

08007068 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	889b      	ldrh	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d130      	bne.n	80070dc <USBD_SetAddress+0x74>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	88db      	ldrh	r3, [r3, #6]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d12c      	bne.n	80070dc <USBD_SetAddress+0x74>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	885b      	ldrh	r3, [r3, #2]
 8007086:	2b7f      	cmp	r3, #127	; 0x7f
 8007088:	d828      	bhi.n	80070dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	885b      	ldrh	r3, [r3, #2]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007094:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709c:	2b03      	cmp	r3, #3
 800709e:	d104      	bne.n	80070aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f988 	bl	80073b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a8:	e01c      	b.n	80070e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7bfa      	ldrb	r2, [r7, #15]
 80070ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fe52 	bl	8007d60 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fa43 	bl	8007548 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d0:	e008      	b.n	80070e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070da:	e003      	b.n	80070e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f96a 	bl	80073b8 <USBD_CtlError>
  }
}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	885b      	ldrh	r3, [r3, #2]
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	4b41      	ldr	r3, [pc, #260]	; (8007204 <USBD_SetConfig+0x118>)
 80070fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007100:	4b40      	ldr	r3, [pc, #256]	; (8007204 <USBD_SetConfig+0x118>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d904      	bls.n	8007112 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f954 	bl	80073b8 <USBD_CtlError>
 8007110:	e075      	b.n	80071fe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007118:	2b02      	cmp	r3, #2
 800711a:	d002      	beq.n	8007122 <USBD_SetConfig+0x36>
 800711c:	2b03      	cmp	r3, #3
 800711e:	d023      	beq.n	8007168 <USBD_SetConfig+0x7c>
 8007120:	e062      	b.n	80071e8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007122:	4b38      	ldr	r3, [pc, #224]	; (8007204 <USBD_SetConfig+0x118>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d01a      	beq.n	8007160 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800712a:	4b36      	ldr	r3, [pc, #216]	; (8007204 <USBD_SetConfig+0x118>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2203      	movs	r2, #3
 8007138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800713c:	4b31      	ldr	r3, [pc, #196]	; (8007204 <USBD_SetConfig+0x118>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff f9f4 	bl	8006530 <USBD_SetClassConfig>
 8007148:	4603      	mov	r3, r0
 800714a:	2b02      	cmp	r3, #2
 800714c:	d104      	bne.n	8007158 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f931 	bl	80073b8 <USBD_CtlError>
            return;
 8007156:	e052      	b.n	80071fe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f9f5 	bl	8007548 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800715e:	e04e      	b.n	80071fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f9f1 	bl	8007548 <USBD_CtlSendStatus>
        break;
 8007166:	e04a      	b.n	80071fe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007168:	4b26      	ldr	r3, [pc, #152]	; (8007204 <USBD_SetConfig+0x118>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d112      	bne.n	8007196 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007178:	4b22      	ldr	r3, [pc, #136]	; (8007204 <USBD_SetConfig+0x118>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	461a      	mov	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007182:	4b20      	ldr	r3, [pc, #128]	; (8007204 <USBD_SetConfig+0x118>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff f9f0 	bl	800656e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9da 	bl	8007548 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007194:	e033      	b.n	80071fe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007196:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <USBD_SetConfig+0x118>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d01d      	beq.n	80071e0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff f9de 	bl	800656e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80071b2:	4b14      	ldr	r3, [pc, #80]	; (8007204 <USBD_SetConfig+0x118>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071bc:	4b11      	ldr	r3, [pc, #68]	; (8007204 <USBD_SetConfig+0x118>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff f9b4 	bl	8006530 <USBD_SetClassConfig>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d104      	bne.n	80071d8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f8f1 	bl	80073b8 <USBD_CtlError>
            return;
 80071d6:	e012      	b.n	80071fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f9b5 	bl	8007548 <USBD_CtlSendStatus>
        break;
 80071de:	e00e      	b.n	80071fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9b1 	bl	8007548 <USBD_CtlSendStatus>
        break;
 80071e6:	e00a      	b.n	80071fe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f8e4 	bl	80073b8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80071f0:	4b04      	ldr	r3, [pc, #16]	; (8007204 <USBD_SetConfig+0x118>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff f9b9 	bl	800656e <USBD_ClrClassConfig>
        break;
 80071fc:	bf00      	nop
    }
  }
}
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20000204 	.word	0x20000204

08007208 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	88db      	ldrh	r3, [r3, #6]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d004      	beq.n	8007224 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f8cb 	bl	80073b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007222:	e021      	b.n	8007268 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800722a:	2b01      	cmp	r3, #1
 800722c:	db17      	blt.n	800725e <USBD_GetConfig+0x56>
 800722e:	2b02      	cmp	r3, #2
 8007230:	dd02      	ble.n	8007238 <USBD_GetConfig+0x30>
 8007232:	2b03      	cmp	r3, #3
 8007234:	d00b      	beq.n	800724e <USBD_GetConfig+0x46>
 8007236:	e012      	b.n	800725e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3308      	adds	r3, #8
 8007242:	2201      	movs	r2, #1
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f920 	bl	800748c <USBD_CtlSendData>
        break;
 800724c:	e00c      	b.n	8007268 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3304      	adds	r3, #4
 8007252:	2201      	movs	r2, #1
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f918 	bl	800748c <USBD_CtlSendData>
        break;
 800725c:	e004      	b.n	8007268 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f8a9 	bl	80073b8 <USBD_CtlError>
        break;
 8007266:	bf00      	nop
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	3b01      	subs	r3, #1
 8007282:	2b02      	cmp	r3, #2
 8007284:	d81e      	bhi.n	80072c4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	88db      	ldrh	r3, [r3, #6]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d004      	beq.n	8007298 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f891 	bl	80073b8 <USBD_CtlError>
        break;
 8007296:	e01a      	b.n	80072ce <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f043 0202 	orr.w	r2, r3, #2
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	330c      	adds	r3, #12
 80072b8:	2202      	movs	r2, #2
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f8e5 	bl	800748c <USBD_CtlSendData>
      break;
 80072c2:	e004      	b.n	80072ce <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f876 	bl	80073b8 <USBD_CtlError>
      break;
 80072cc:	bf00      	nop
  }
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	885b      	ldrh	r3, [r3, #2]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d106      	bne.n	80072f6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f929 	bl	8007548 <USBD_CtlSendStatus>
  }
}
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730e:	3b01      	subs	r3, #1
 8007310:	2b02      	cmp	r3, #2
 8007312:	d80b      	bhi.n	800732c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	885b      	ldrh	r3, [r3, #2]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d10c      	bne.n	8007336 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f90f 	bl	8007548 <USBD_CtlSendStatus>
      }
      break;
 800732a:	e004      	b.n	8007336 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f842 	bl	80073b8 <USBD_CtlError>
      break;
 8007334:	e000      	b.n	8007338 <USBD_ClrFeature+0x3a>
      break;
 8007336:	bf00      	nop
  }
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	785a      	ldrb	r2, [r3, #1]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	3302      	adds	r3, #2
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	b29a      	uxth	r2, r3
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	3303      	adds	r3, #3
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	b29b      	uxth	r3, r3
 800736e:	4413      	add	r3, r2
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	3304      	adds	r3, #4
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	b29a      	uxth	r2, r3
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	3305      	adds	r3, #5
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	b29b      	uxth	r3, r3
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	b29b      	uxth	r3, r3
 800738a:	4413      	add	r3, r2
 800738c:	b29a      	uxth	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	3306      	adds	r3, #6
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	b29a      	uxth	r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	3307      	adds	r3, #7
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	80da      	strh	r2, [r3, #6]

}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr

080073b8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80073c2:	2180      	movs	r1, #128	; 0x80
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc61 	bl	8007c8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80073ca:	2100      	movs	r1, #0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fc5d 	bl	8007c8c <USBD_LL_StallEP>
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b086      	sub	sp, #24
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d032      	beq.n	8007456 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f834 	bl	800745e <USBD_GetLen>
 80073f6:	4603      	mov	r3, r0
 80073f8:	3301      	adds	r3, #1
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	75fa      	strb	r2, [r7, #23]
 800740a:	461a      	mov	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4413      	add	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	75fa      	strb	r2, [r7, #23]
 800741c:	461a      	mov	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	4413      	add	r3, r2
 8007422:	2203      	movs	r2, #3
 8007424:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007426:	e012      	b.n	800744e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	60fa      	str	r2, [r7, #12]
 800742e:	7dfa      	ldrb	r2, [r7, #23]
 8007430:	1c51      	adds	r1, r2, #1
 8007432:	75f9      	strb	r1, [r7, #23]
 8007434:	4611      	mov	r1, r2
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	440a      	add	r2, r1
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	75fa      	strb	r2, [r7, #23]
 8007444:	461a      	mov	r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4413      	add	r3, r2
 800744a:	2200      	movs	r2, #0
 800744c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e8      	bne.n	8007428 <USBD_GetString+0x4e>
    }
  }
}
 8007456:	bf00      	nop
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800746a:	e005      	b.n	8007478 <USBD_GetLen+0x1a>
  {
    len++;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	3301      	adds	r3, #1
 8007470:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3301      	adds	r3, #1
 8007476:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f5      	bne.n	800746c <USBD_GetLen+0xe>
  }

  return len;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr

0800748c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	4613      	mov	r3, r2
 8007498:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2202      	movs	r2, #2
 800749e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80074a8:	88fa      	ldrh	r2, [r7, #6]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074ae:	88fb      	ldrh	r3, [r7, #6]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	2100      	movs	r1, #0
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 fc72 	bl	8007d9e <USBD_LL_Transmit>

  return USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	2100      	movs	r1, #0
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fc60 	bl	8007d9e <USBD_LL_Transmit>

  return USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2203      	movs	r2, #3
 80074fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074fe:	88fa      	ldrh	r2, [r7, #6]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	2100      	movs	r1, #0
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 fc65 	bl	8007de4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007532:	88fb      	ldrh	r3, [r7, #6]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	2100      	movs	r1, #0
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 fc53 	bl	8007de4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2204      	movs	r2, #4
 8007554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007558:	2300      	movs	r3, #0
 800755a:	2200      	movs	r2, #0
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fc1d 	bl	8007d9e <USBD_LL_Transmit>

  return USBD_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2205      	movs	r2, #5
 800757a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800757e:	2300      	movs	r3, #0
 8007580:	2200      	movs	r2, #0
 8007582:	2100      	movs	r1, #0
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fc2d 	bl	8007de4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007598:	2200      	movs	r2, #0
 800759a:	4912      	ldr	r1, [pc, #72]	; (80075e4 <MX_USB_DEVICE_Init+0x50>)
 800759c:	4812      	ldr	r0, [pc, #72]	; (80075e8 <MX_USB_DEVICE_Init+0x54>)
 800759e:	f7fe ff6d 	bl	800647c <USBD_Init>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075a8:	f7f8 fef8 	bl	800039c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075ac:	490f      	ldr	r1, [pc, #60]	; (80075ec <MX_USB_DEVICE_Init+0x58>)
 80075ae:	480e      	ldr	r0, [pc, #56]	; (80075e8 <MX_USB_DEVICE_Init+0x54>)
 80075b0:	f7fe ff8f 	bl	80064d2 <USBD_RegisterClass>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075ba:	f7f8 feef 	bl	800039c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075be:	490c      	ldr	r1, [pc, #48]	; (80075f0 <MX_USB_DEVICE_Init+0x5c>)
 80075c0:	4809      	ldr	r0, [pc, #36]	; (80075e8 <MX_USB_DEVICE_Init+0x54>)
 80075c2:	f7fe feef 	bl	80063a4 <USBD_CDC_RegisterInterface>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075cc:	f7f8 fee6 	bl	800039c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075d0:	4805      	ldr	r0, [pc, #20]	; (80075e8 <MX_USB_DEVICE_Init+0x54>)
 80075d2:	f7fe ff97 	bl	8006504 <USBD_Start>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075dc:	f7f8 fede 	bl	800039c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075e0:	bf00      	nop
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	2000012c 	.word	0x2000012c
 80075e8:	20000620 	.word	0x20000620
 80075ec:	20000018 	.word	0x20000018
 80075f0:	2000011c 	.word	0x2000011c

080075f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075f8:	2200      	movs	r2, #0
 80075fa:	4907      	ldr	r1, [pc, #28]	; (8007618 <CDC_Init_FS+0x24>)
 80075fc:	4807      	ldr	r0, [pc, #28]	; (800761c <CDC_Init_FS+0x28>)
 80075fe:	f7fe fee7 	bl	80063d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007602:	4907      	ldr	r1, [pc, #28]	; (8007620 <CDC_Init_FS+0x2c>)
 8007604:	4805      	ldr	r0, [pc, #20]	; (800761c <CDC_Init_FS+0x28>)
 8007606:	f7fe fefc 	bl	8006402 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800760a:	4804      	ldr	r0, [pc, #16]	; (800761c <CDC_Init_FS+0x28>)
 800760c:	f7fe ff0c 	bl	8006428 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007610:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007612:	4618      	mov	r0, r3
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000ccc 	.word	0x20000ccc
 800761c:	20000620 	.word	0x20000620
 8007620:	200008e4 	.word	0x200008e4

08007624 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007628:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800762a:	4618      	mov	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr
	...

08007634 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	6039      	str	r1, [r7, #0]
 800763e:	71fb      	strb	r3, [r7, #7]
 8007640:	4613      	mov	r3, r2
 8007642:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	2b23      	cmp	r3, #35	; 0x23
 8007648:	d84a      	bhi.n	80076e0 <CDC_Control_FS+0xac>
 800764a:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <CDC_Control_FS+0x1c>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	080076e1 	.word	0x080076e1
 8007654:	080076e1 	.word	0x080076e1
 8007658:	080076e1 	.word	0x080076e1
 800765c:	080076e1 	.word	0x080076e1
 8007660:	080076e1 	.word	0x080076e1
 8007664:	080076e1 	.word	0x080076e1
 8007668:	080076e1 	.word	0x080076e1
 800766c:	080076e1 	.word	0x080076e1
 8007670:	080076e1 	.word	0x080076e1
 8007674:	080076e1 	.word	0x080076e1
 8007678:	080076e1 	.word	0x080076e1
 800767c:	080076e1 	.word	0x080076e1
 8007680:	080076e1 	.word	0x080076e1
 8007684:	080076e1 	.word	0x080076e1
 8007688:	080076e1 	.word	0x080076e1
 800768c:	080076e1 	.word	0x080076e1
 8007690:	080076e1 	.word	0x080076e1
 8007694:	080076e1 	.word	0x080076e1
 8007698:	080076e1 	.word	0x080076e1
 800769c:	080076e1 	.word	0x080076e1
 80076a0:	080076e1 	.word	0x080076e1
 80076a4:	080076e1 	.word	0x080076e1
 80076a8:	080076e1 	.word	0x080076e1
 80076ac:	080076e1 	.word	0x080076e1
 80076b0:	080076e1 	.word	0x080076e1
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	080076e1 	.word	0x080076e1
 80076bc:	080076e1 	.word	0x080076e1
 80076c0:	080076e1 	.word	0x080076e1
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	080076e1 	.word	0x080076e1
 80076cc:	080076e1 	.word	0x080076e1
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	080076e1 	.word	0x080076e1
 80076d8:	080076e1 	.word	0x080076e1
 80076dc:	080076e1 	.word	0x080076e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076e0:	bf00      	nop
  }

  return (USBD_OK);
 80076e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop

080076f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	Buf[*Len] = 0;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	4413      	add	r3, r2
 8007702:	2200      	movs	r2, #0
 8007704:	701a      	strb	r2, [r3, #0]
	sprintf((char*)USB_RxData, "$%s#", (char*)Buf);
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	4912      	ldr	r1, [pc, #72]	; (8007754 <CDC_Receive_FS+0x64>)
 800770a:	4813      	ldr	r0, [pc, #76]	; (8007758 <CDC_Receive_FS+0x68>)
 800770c:	f000 fc1e 	bl	8007f4c <siprintf>
	HAL_UART_Transmit_IT(&huart2, USB_RxData, strlen((char*)USB_RxData));
 8007710:	4811      	ldr	r0, [pc, #68]	; (8007758 <CDC_Receive_FS+0x68>)
 8007712:	f7f8 fd1b 	bl	800014c <strlen>
 8007716:	4603      	mov	r3, r0
 8007718:	b29b      	uxth	r3, r3
 800771a:	461a      	mov	r2, r3
 800771c:	490e      	ldr	r1, [pc, #56]	; (8007758 <CDC_Receive_FS+0x68>)
 800771e:	480f      	ldr	r0, [pc, #60]	; (800775c <CDC_Receive_FS+0x6c>)
 8007720:	f7fb fd1f 	bl	8003162 <HAL_UART_Transmit_IT>
	memset(Buf, 0, *Len);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	2100      	movs	r1, #0
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fc05 	bl	8007f3c <memset>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8007732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007736:	480a      	ldr	r0, [pc, #40]	; (8007760 <CDC_Receive_FS+0x70>)
 8007738:	f7f9 fb18 	bl	8000d6c <HAL_GPIO_TogglePin>


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4809      	ldr	r0, [pc, #36]	; (8007764 <CDC_Receive_FS+0x74>)
 8007740:	f7fe fe5f 	bl	8006402 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007744:	4807      	ldr	r0, [pc, #28]	; (8007764 <CDC_Receive_FS+0x74>)
 8007746:	f7fe fe6f 	bl	8006428 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800774a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	0800879c 	.word	0x0800879c
 8007758:	20000544 	.word	0x20000544
 800775c:	20000500 	.word	0x20000500
 8007760:	40011000 	.word	0x40011000
 8007764:	20000620 	.word	0x20000620

08007768 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2212      	movs	r2, #18
 8007778:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800777a:	4b03      	ldr	r3, [pc, #12]	; (8007788 <USBD_FS_DeviceDescriptor+0x20>)
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	20000148 	.word	0x20000148

0800778c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	6039      	str	r1, [r7, #0]
 8007796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2204      	movs	r2, #4
 800779c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800779e:	4b03      	ldr	r3, [pc, #12]	; (80077ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	2000015c 	.word	0x2000015c

080077b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	6039      	str	r1, [r7, #0]
 80077ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d105      	bne.n	80077ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	4907      	ldr	r1, [pc, #28]	; (80077e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80077c6:	4808      	ldr	r0, [pc, #32]	; (80077e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80077c8:	f7ff fe07 	bl	80073da <USBD_GetString>
 80077cc:	e004      	b.n	80077d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	4904      	ldr	r1, [pc, #16]	; (80077e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80077d2:	4805      	ldr	r0, [pc, #20]	; (80077e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80077d4:	f7ff fe01 	bl	80073da <USBD_GetString>
  }
  return USBD_StrDesc;
 80077d8:	4b02      	ldr	r3, [pc, #8]	; (80077e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	200010b4 	.word	0x200010b4
 80077e8:	080087a4 	.word	0x080087a4

080077ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	6039      	str	r1, [r7, #0]
 80077f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	4904      	ldr	r1, [pc, #16]	; (800780c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80077fc:	4804      	ldr	r0, [pc, #16]	; (8007810 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80077fe:	f7ff fdec 	bl	80073da <USBD_GetString>
  return USBD_StrDesc;
 8007802:	4b02      	ldr	r3, [pc, #8]	; (800780c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	200010b4 	.word	0x200010b4
 8007810:	080087bc 	.word	0x080087bc

08007814 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	6039      	str	r1, [r7, #0]
 800781e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	221a      	movs	r2, #26
 8007824:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007826:	f000 f843 	bl	80078b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800782a:	4b02      	ldr	r3, [pc, #8]	; (8007834 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20000160 	.word	0x20000160

08007838 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	6039      	str	r1, [r7, #0]
 8007842:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	4907      	ldr	r1, [pc, #28]	; (800786c <USBD_FS_ConfigStrDescriptor+0x34>)
 800784e:	4808      	ldr	r0, [pc, #32]	; (8007870 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007850:	f7ff fdc3 	bl	80073da <USBD_GetString>
 8007854:	e004      	b.n	8007860 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	4904      	ldr	r1, [pc, #16]	; (800786c <USBD_FS_ConfigStrDescriptor+0x34>)
 800785a:	4805      	ldr	r0, [pc, #20]	; (8007870 <USBD_FS_ConfigStrDescriptor+0x38>)
 800785c:	f7ff fdbd 	bl	80073da <USBD_GetString>
  }
  return USBD_StrDesc;
 8007860:	4b02      	ldr	r3, [pc, #8]	; (800786c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	200010b4 	.word	0x200010b4
 8007870:	080087d0 	.word	0x080087d0

08007874 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d105      	bne.n	8007892 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	4907      	ldr	r1, [pc, #28]	; (80078a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800788a:	4808      	ldr	r0, [pc, #32]	; (80078ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800788c:	f7ff fda5 	bl	80073da <USBD_GetString>
 8007890:	e004      	b.n	800789c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	4904      	ldr	r1, [pc, #16]	; (80078a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007896:	4805      	ldr	r0, [pc, #20]	; (80078ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007898:	f7ff fd9f 	bl	80073da <USBD_GetString>
  }
  return USBD_StrDesc;
 800789c:	4b02      	ldr	r3, [pc, #8]	; (80078a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	200010b4 	.word	0x200010b4
 80078ac:	080087dc 	.word	0x080087dc

080078b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078b6:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <Get_SerialNum+0x44>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078bc:	4b0e      	ldr	r3, [pc, #56]	; (80078f8 <Get_SerialNum+0x48>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078c2:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <Get_SerialNum+0x4c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d009      	beq.n	80078ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078d6:	2208      	movs	r2, #8
 80078d8:	4909      	ldr	r1, [pc, #36]	; (8007900 <Get_SerialNum+0x50>)
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f814 	bl	8007908 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078e0:	2204      	movs	r2, #4
 80078e2:	4908      	ldr	r1, [pc, #32]	; (8007904 <Get_SerialNum+0x54>)
 80078e4:	68b8      	ldr	r0, [r7, #8]
 80078e6:	f000 f80f 	bl	8007908 <IntToUnicode>
  }
}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	1ffff7e8 	.word	0x1ffff7e8
 80078f8:	1ffff7ec 	.word	0x1ffff7ec
 80078fc:	1ffff7f0 	.word	0x1ffff7f0
 8007900:	20000162 	.word	0x20000162
 8007904:	20000172 	.word	0x20000172

08007908 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800791a:	2300      	movs	r3, #0
 800791c:	75fb      	strb	r3, [r7, #23]
 800791e:	e027      	b.n	8007970 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	0f1b      	lsrs	r3, r3, #28
 8007924:	2b09      	cmp	r3, #9
 8007926:	d80b      	bhi.n	8007940 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	0f1b      	lsrs	r3, r3, #28
 800792c:	b2da      	uxtb	r2, r3
 800792e:	7dfb      	ldrb	r3, [r7, #23]
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	4619      	mov	r1, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	440b      	add	r3, r1
 8007938:	3230      	adds	r2, #48	; 0x30
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e00a      	b.n	8007956 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	0f1b      	lsrs	r3, r3, #28
 8007944:	b2da      	uxtb	r2, r3
 8007946:	7dfb      	ldrb	r3, [r7, #23]
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	4619      	mov	r1, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	440b      	add	r3, r1
 8007950:	3237      	adds	r2, #55	; 0x37
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	3301      	adds	r3, #1
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	4413      	add	r3, r2
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	3301      	adds	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
 8007970:	7dfa      	ldrb	r2, [r7, #23]
 8007972:	79fb      	ldrb	r3, [r7, #7]
 8007974:	429a      	cmp	r2, r3
 8007976:	d3d3      	bcc.n	8007920 <IntToUnicode+0x18>
  }
}
 8007978:	bf00      	nop
 800797a:	371c      	adds	r7, #28
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
	...

08007984 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a11      	ldr	r2, [pc, #68]	; (80079d8 <HAL_PCD_MspInit+0x54>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d11b      	bne.n	80079ce <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007996:	4b11      	ldr	r3, [pc, #68]	; (80079dc <HAL_PCD_MspInit+0x58>)
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	4a10      	ldr	r2, [pc, #64]	; (80079dc <HAL_PCD_MspInit+0x58>)
 800799c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079a0:	61d3      	str	r3, [r2, #28]
 80079a2:	4b0e      	ldr	r3, [pc, #56]	; (80079dc <HAL_PCD_MspInit+0x58>)
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80079ae:	2200      	movs	r2, #0
 80079b0:	2100      	movs	r1, #0
 80079b2:	2013      	movs	r0, #19
 80079b4:	f7f8 ff81 	bl	80008ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80079b8:	2013      	movs	r0, #19
 80079ba:	f7f8 ff9a 	bl	80008f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80079be:	2200      	movs	r2, #0
 80079c0:	2100      	movs	r1, #0
 80079c2:	2014      	movs	r0, #20
 80079c4:	f7f8 ff79 	bl	80008ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80079c8:	2014      	movs	r0, #20
 80079ca:	f7f8 ff92 	bl	80008f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80079ce:	bf00      	nop
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	40005c00 	.word	0x40005c00
 80079dc:	40021000 	.word	0x40021000

080079e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f7fe fdcc 	bl	8006594 <USBD_LL_SetupStage>
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007a16:	78fa      	ldrb	r2, [r7, #3]
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	440b      	add	r3, r1
 8007a24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f7fe fdfc 	bl	800662a <USBD_LL_DataOutStage>
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	440b      	add	r3, r1
 8007a5a:	333c      	adds	r3, #60	; 0x3c
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	78fb      	ldrb	r3, [r7, #3]
 8007a60:	4619      	mov	r1, r3
 8007a62:	f7fe fe53 	bl	800670c <USBD_LL_DataInStage>
}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b082      	sub	sp, #8
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe ff63 	bl	8006948 <USBD_LL_SOF>
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a92:	2301      	movs	r3, #1
 8007a94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d001      	beq.n	8007aa2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a9e:	f7f8 fc7d 	bl	800039c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007aa8:	7bfa      	ldrb	r2, [r7, #15]
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fe ff13 	bl	80068d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fe fecc 	bl	8006856 <USBD_LL_Reset>
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe ff0d 	bl	80068f6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ae4:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <HAL_PCD_SuspendCallback+0x30>)
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	4a03      	ldr	r2, [pc, #12]	; (8007af8 <HAL_PCD_SuspendCallback+0x30>)
 8007aea:	f043 0306 	orr.w	r3, r3, #6
 8007aee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	e000ed00 	.word	0xe000ed00

08007afc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe ff07 	bl	800691e <USBD_LL_Resume>
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007b20:	4a28      	ldr	r2, [pc, #160]	; (8007bc4 <USBD_LL_Init+0xac>)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a26      	ldr	r2, [pc, #152]	; (8007bc4 <USBD_LL_Init+0xac>)
 8007b2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007b30:	4b24      	ldr	r3, [pc, #144]	; (8007bc4 <USBD_LL_Init+0xac>)
 8007b32:	4a25      	ldr	r2, [pc, #148]	; (8007bc8 <USBD_LL_Init+0xb0>)
 8007b34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007b36:	4b23      	ldr	r3, [pc, #140]	; (8007bc4 <USBD_LL_Init+0xac>)
 8007b38:	2208      	movs	r2, #8
 8007b3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007b3c:	4b21      	ldr	r3, [pc, #132]	; (8007bc4 <USBD_LL_Init+0xac>)
 8007b3e:	2202      	movs	r2, #2
 8007b40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007b42:	4b20      	ldr	r3, [pc, #128]	; (8007bc4 <USBD_LL_Init+0xac>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007b48:	4b1e      	ldr	r3, [pc, #120]	; (8007bc4 <USBD_LL_Init+0xac>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007b4e:	4b1d      	ldr	r3, [pc, #116]	; (8007bc4 <USBD_LL_Init+0xac>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007b54:	481b      	ldr	r0, [pc, #108]	; (8007bc4 <USBD_LL_Init+0xac>)
 8007b56:	f7f9 f922 	bl	8000d9e <HAL_PCD_Init>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007b60:	f7f8 fc1c 	bl	800039c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b6a:	2318      	movs	r3, #24
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2100      	movs	r1, #0
 8007b70:	f7fa fd95 	bl	800269e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b7a:	2358      	movs	r3, #88	; 0x58
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2180      	movs	r1, #128	; 0x80
 8007b80:	f7fa fd8d 	bl	800269e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b8a:	23c0      	movs	r3, #192	; 0xc0
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2181      	movs	r1, #129	; 0x81
 8007b90:	f7fa fd85 	bl	800269e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b9a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	f7fa fd7c 	bl	800269e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2182      	movs	r1, #130	; 0x82
 8007bb4:	f7fa fd73 	bl	800269e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	200012b4 	.word	0x200012b4
 8007bc8:	40005c00 	.word	0x40005c00

08007bcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7f9 f9e6 	bl	8000fb4 <HAL_PCD_Start>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f94e 	bl	8007e90 <USBD_Get_USB_Status>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	4608      	mov	r0, r1
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	461a      	mov	r2, r3
 8007c10:	4603      	mov	r3, r0
 8007c12:	70fb      	strb	r3, [r7, #3]
 8007c14:	460b      	mov	r3, r1
 8007c16:	70bb      	strb	r3, [r7, #2]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c2a:	78bb      	ldrb	r3, [r7, #2]
 8007c2c:	883a      	ldrh	r2, [r7, #0]
 8007c2e:	78f9      	ldrb	r1, [r7, #3]
 8007c30:	f7f9 fb60 	bl	80012f4 <HAL_PCD_EP_Open>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 f928 	bl	8007e90 <USBD_Get_USB_Status>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c68:	78fa      	ldrb	r2, [r7, #3]
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7f9 fba7 	bl	80013c0 <HAL_PCD_EP_Close>
 8007c72:	4603      	mov	r3, r0
 8007c74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 f909 	bl	8007e90 <USBD_Get_USB_Status>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7f9 fc67 	bl	800157e <HAL_PCD_EP_SetStall>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f8ea 	bl	8007e90 <USBD_Get_USB_Status>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ce4:	78fa      	ldrb	r2, [r7, #3]
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7f9 fca8 	bl	800163e <HAL_PCD_EP_ClrStall>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 f8cb 	bl	8007e90 <USBD_Get_USB_Status>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	da0c      	bge.n	8007d3e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	440b      	add	r3, r1
 8007d38:	3302      	adds	r3, #2
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	e00b      	b.n	8007d56 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d44:	68f9      	ldr	r1, [r7, #12]
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	440b      	add	r3, r1
 8007d50:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007d54:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7f9 fa93 	bl	80012aa <HAL_PCD_SetAddress>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f880 	bl	8007e90 <USBD_Get_USB_Status>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b086      	sub	sp, #24
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	461a      	mov	r2, r3
 8007daa:	460b      	mov	r3, r1
 8007dac:	72fb      	strb	r3, [r7, #11]
 8007dae:	4613      	mov	r3, r2
 8007db0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dc0:	893b      	ldrh	r3, [r7, #8]
 8007dc2:	7af9      	ldrb	r1, [r7, #11]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	f7f9 fb97 	bl	80014f8 <HAL_PCD_EP_Transmit>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 f85d 	bl	8007e90 <USBD_Get_USB_Status>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dda:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	461a      	mov	r2, r3
 8007df0:	460b      	mov	r3, r1
 8007df2:	72fb      	strb	r3, [r7, #11]
 8007df4:	4613      	mov	r3, r2
 8007df6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e06:	893b      	ldrh	r3, [r7, #8]
 8007e08:	7af9      	ldrb	r1, [r7, #11]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	f7f9 fb20 	bl	8001450 <HAL_PCD_EP_Receive>
 8007e10:	4603      	mov	r3, r0
 8007e12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 f83a 	bl	8007e90 <USBD_Get_USB_Status>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e20:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e3c:	78fa      	ldrb	r2, [r7, #3]
 8007e3e:	4611      	mov	r1, r2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7f9 fb42 	bl	80014ca <HAL_PCD_EP_GetRxCount>
 8007e46:	4603      	mov	r3, r0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e58:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <USBD_static_malloc+0x14>)
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr
 8007e64:	20000208 	.word	0x20000208

08007e68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]

}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr

08007e7a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr

08007e90 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d817      	bhi.n	8007ed4 <USBD_Get_USB_Status+0x44>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <USBD_Get_USB_Status+0x1c>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007ebd 	.word	0x08007ebd
 8007eb0:	08007ec3 	.word	0x08007ec3
 8007eb4:	08007ec9 	.word	0x08007ec9
 8007eb8:	08007ecf 	.word	0x08007ecf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec0:	e00b      	b.n	8007eda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec6:	e008      	b.n	8007eda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
    break;
 8007ecc:	e005      	b.n	8007eda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ece:	2302      	movs	r3, #2
 8007ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed2:	e002      	b.n	8007eda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed8:	bf00      	nop
  }
  return usb_status;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop

08007ee8 <__errno>:
 8007ee8:	4b01      	ldr	r3, [pc, #4]	; (8007ef0 <__errno+0x8>)
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	2000017c 	.word	0x2000017c

08007ef4 <__libc_init_array>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	2500      	movs	r5, #0
 8007ef8:	4e0c      	ldr	r6, [pc, #48]	; (8007f2c <__libc_init_array+0x38>)
 8007efa:	4c0d      	ldr	r4, [pc, #52]	; (8007f30 <__libc_init_array+0x3c>)
 8007efc:	1ba4      	subs	r4, r4, r6
 8007efe:	10a4      	asrs	r4, r4, #2
 8007f00:	42a5      	cmp	r5, r4
 8007f02:	d109      	bne.n	8007f18 <__libc_init_array+0x24>
 8007f04:	f000 fc34 	bl	8008770 <_init>
 8007f08:	2500      	movs	r5, #0
 8007f0a:	4e0a      	ldr	r6, [pc, #40]	; (8007f34 <__libc_init_array+0x40>)
 8007f0c:	4c0a      	ldr	r4, [pc, #40]	; (8007f38 <__libc_init_array+0x44>)
 8007f0e:	1ba4      	subs	r4, r4, r6
 8007f10:	10a4      	asrs	r4, r4, #2
 8007f12:	42a5      	cmp	r5, r4
 8007f14:	d105      	bne.n	8007f22 <__libc_init_array+0x2e>
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f1c:	4798      	blx	r3
 8007f1e:	3501      	adds	r5, #1
 8007f20:	e7ee      	b.n	8007f00 <__libc_init_array+0xc>
 8007f22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f26:	4798      	blx	r3
 8007f28:	3501      	adds	r5, #1
 8007f2a:	e7f2      	b.n	8007f12 <__libc_init_array+0x1e>
 8007f2c:	08008838 	.word	0x08008838
 8007f30:	08008838 	.word	0x08008838
 8007f34:	08008838 	.word	0x08008838
 8007f38:	0800883c 	.word	0x0800883c

08007f3c <memset>:
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	4402      	add	r2, r0
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d100      	bne.n	8007f46 <memset+0xa>
 8007f44:	4770      	bx	lr
 8007f46:	f803 1b01 	strb.w	r1, [r3], #1
 8007f4a:	e7f9      	b.n	8007f40 <memset+0x4>

08007f4c <siprintf>:
 8007f4c:	b40e      	push	{r1, r2, r3}
 8007f4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f52:	b500      	push	{lr}
 8007f54:	b09c      	sub	sp, #112	; 0x70
 8007f56:	ab1d      	add	r3, sp, #116	; 0x74
 8007f58:	9002      	str	r0, [sp, #8]
 8007f5a:	9006      	str	r0, [sp, #24]
 8007f5c:	9107      	str	r1, [sp, #28]
 8007f5e:	9104      	str	r1, [sp, #16]
 8007f60:	4808      	ldr	r0, [pc, #32]	; (8007f84 <siprintf+0x38>)
 8007f62:	4909      	ldr	r1, [pc, #36]	; (8007f88 <siprintf+0x3c>)
 8007f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f68:	9105      	str	r1, [sp, #20]
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	a902      	add	r1, sp, #8
 8007f6e:	9301      	str	r3, [sp, #4]
 8007f70:	f000 f866 	bl	8008040 <_svfiprintf_r>
 8007f74:	2200      	movs	r2, #0
 8007f76:	9b02      	ldr	r3, [sp, #8]
 8007f78:	701a      	strb	r2, [r3, #0]
 8007f7a:	b01c      	add	sp, #112	; 0x70
 8007f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f80:	b003      	add	sp, #12
 8007f82:	4770      	bx	lr
 8007f84:	2000017c 	.word	0x2000017c
 8007f88:	ffff0208 	.word	0xffff0208

08007f8c <__ssputs_r>:
 8007f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f90:	688e      	ldr	r6, [r1, #8]
 8007f92:	4682      	mov	sl, r0
 8007f94:	429e      	cmp	r6, r3
 8007f96:	460c      	mov	r4, r1
 8007f98:	4690      	mov	r8, r2
 8007f9a:	4699      	mov	r9, r3
 8007f9c:	d837      	bhi.n	800800e <__ssputs_r+0x82>
 8007f9e:	898a      	ldrh	r2, [r1, #12]
 8007fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fa4:	d031      	beq.n	800800a <__ssputs_r+0x7e>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	6825      	ldr	r5, [r4, #0]
 8007faa:	6909      	ldr	r1, [r1, #16]
 8007fac:	1a6f      	subs	r7, r5, r1
 8007fae:	6965      	ldr	r5, [r4, #20]
 8007fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007fb8:	f109 0301 	add.w	r3, r9, #1
 8007fbc:	443b      	add	r3, r7
 8007fbe:	429d      	cmp	r5, r3
 8007fc0:	bf38      	it	cc
 8007fc2:	461d      	movcc	r5, r3
 8007fc4:	0553      	lsls	r3, r2, #21
 8007fc6:	d530      	bpl.n	800802a <__ssputs_r+0x9e>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	f000 fb37 	bl	800863c <_malloc_r>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	b950      	cbnz	r0, 8007fe8 <__ssputs_r+0x5c>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd8:	f8ca 3000 	str.w	r3, [sl]
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe8:	463a      	mov	r2, r7
 8007fea:	6921      	ldr	r1, [r4, #16]
 8007fec:	f000 fab6 	bl	800855c <memcpy>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffa:	81a3      	strh	r3, [r4, #12]
 8007ffc:	6126      	str	r6, [r4, #16]
 8007ffe:	443e      	add	r6, r7
 8008000:	6026      	str	r6, [r4, #0]
 8008002:	464e      	mov	r6, r9
 8008004:	6165      	str	r5, [r4, #20]
 8008006:	1bed      	subs	r5, r5, r7
 8008008:	60a5      	str	r5, [r4, #8]
 800800a:	454e      	cmp	r6, r9
 800800c:	d900      	bls.n	8008010 <__ssputs_r+0x84>
 800800e:	464e      	mov	r6, r9
 8008010:	4632      	mov	r2, r6
 8008012:	4641      	mov	r1, r8
 8008014:	6820      	ldr	r0, [r4, #0]
 8008016:	f000 faac 	bl	8008572 <memmove>
 800801a:	68a3      	ldr	r3, [r4, #8]
 800801c:	2000      	movs	r0, #0
 800801e:	1b9b      	subs	r3, r3, r6
 8008020:	60a3      	str	r3, [r4, #8]
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	441e      	add	r6, r3
 8008026:	6026      	str	r6, [r4, #0]
 8008028:	e7dc      	b.n	8007fe4 <__ssputs_r+0x58>
 800802a:	462a      	mov	r2, r5
 800802c:	f000 fb60 	bl	80086f0 <_realloc_r>
 8008030:	4606      	mov	r6, r0
 8008032:	2800      	cmp	r0, #0
 8008034:	d1e2      	bne.n	8007ffc <__ssputs_r+0x70>
 8008036:	6921      	ldr	r1, [r4, #16]
 8008038:	4650      	mov	r0, sl
 800803a:	f000 fab3 	bl	80085a4 <_free_r>
 800803e:	e7c8      	b.n	8007fd2 <__ssputs_r+0x46>

08008040 <_svfiprintf_r>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	461d      	mov	r5, r3
 8008046:	898b      	ldrh	r3, [r1, #12]
 8008048:	b09d      	sub	sp, #116	; 0x74
 800804a:	061f      	lsls	r7, r3, #24
 800804c:	4680      	mov	r8, r0
 800804e:	460c      	mov	r4, r1
 8008050:	4616      	mov	r6, r2
 8008052:	d50f      	bpl.n	8008074 <_svfiprintf_r+0x34>
 8008054:	690b      	ldr	r3, [r1, #16]
 8008056:	b96b      	cbnz	r3, 8008074 <_svfiprintf_r+0x34>
 8008058:	2140      	movs	r1, #64	; 0x40
 800805a:	f000 faef 	bl	800863c <_malloc_r>
 800805e:	6020      	str	r0, [r4, #0]
 8008060:	6120      	str	r0, [r4, #16]
 8008062:	b928      	cbnz	r0, 8008070 <_svfiprintf_r+0x30>
 8008064:	230c      	movs	r3, #12
 8008066:	f8c8 3000 	str.w	r3, [r8]
 800806a:	f04f 30ff 	mov.w	r0, #4294967295
 800806e:	e0c8      	b.n	8008202 <_svfiprintf_r+0x1c2>
 8008070:	2340      	movs	r3, #64	; 0x40
 8008072:	6163      	str	r3, [r4, #20]
 8008074:	2300      	movs	r3, #0
 8008076:	9309      	str	r3, [sp, #36]	; 0x24
 8008078:	2320      	movs	r3, #32
 800807a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800807e:	2330      	movs	r3, #48	; 0x30
 8008080:	f04f 0b01 	mov.w	fp, #1
 8008084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008088:	9503      	str	r5, [sp, #12]
 800808a:	4637      	mov	r7, r6
 800808c:	463d      	mov	r5, r7
 800808e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008092:	b10b      	cbz	r3, 8008098 <_svfiprintf_r+0x58>
 8008094:	2b25      	cmp	r3, #37	; 0x25
 8008096:	d13e      	bne.n	8008116 <_svfiprintf_r+0xd6>
 8008098:	ebb7 0a06 	subs.w	sl, r7, r6
 800809c:	d00b      	beq.n	80080b6 <_svfiprintf_r+0x76>
 800809e:	4653      	mov	r3, sl
 80080a0:	4632      	mov	r2, r6
 80080a2:	4621      	mov	r1, r4
 80080a4:	4640      	mov	r0, r8
 80080a6:	f7ff ff71 	bl	8007f8c <__ssputs_r>
 80080aa:	3001      	adds	r0, #1
 80080ac:	f000 80a4 	beq.w	80081f8 <_svfiprintf_r+0x1b8>
 80080b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b2:	4453      	add	r3, sl
 80080b4:	9309      	str	r3, [sp, #36]	; 0x24
 80080b6:	783b      	ldrb	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 809d 	beq.w	80081f8 <_svfiprintf_r+0x1b8>
 80080be:	2300      	movs	r3, #0
 80080c0:	f04f 32ff 	mov.w	r2, #4294967295
 80080c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	9307      	str	r3, [sp, #28]
 80080cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080d0:	931a      	str	r3, [sp, #104]	; 0x68
 80080d2:	462f      	mov	r7, r5
 80080d4:	2205      	movs	r2, #5
 80080d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80080da:	4850      	ldr	r0, [pc, #320]	; (800821c <_svfiprintf_r+0x1dc>)
 80080dc:	f000 fa30 	bl	8008540 <memchr>
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	b9d0      	cbnz	r0, 800811a <_svfiprintf_r+0xda>
 80080e4:	06d9      	lsls	r1, r3, #27
 80080e6:	bf44      	itt	mi
 80080e8:	2220      	movmi	r2, #32
 80080ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080ee:	071a      	lsls	r2, r3, #28
 80080f0:	bf44      	itt	mi
 80080f2:	222b      	movmi	r2, #43	; 0x2b
 80080f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080f8:	782a      	ldrb	r2, [r5, #0]
 80080fa:	2a2a      	cmp	r2, #42	; 0x2a
 80080fc:	d015      	beq.n	800812a <_svfiprintf_r+0xea>
 80080fe:	462f      	mov	r7, r5
 8008100:	2000      	movs	r0, #0
 8008102:	250a      	movs	r5, #10
 8008104:	9a07      	ldr	r2, [sp, #28]
 8008106:	4639      	mov	r1, r7
 8008108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800810c:	3b30      	subs	r3, #48	; 0x30
 800810e:	2b09      	cmp	r3, #9
 8008110:	d94d      	bls.n	80081ae <_svfiprintf_r+0x16e>
 8008112:	b1b8      	cbz	r0, 8008144 <_svfiprintf_r+0x104>
 8008114:	e00f      	b.n	8008136 <_svfiprintf_r+0xf6>
 8008116:	462f      	mov	r7, r5
 8008118:	e7b8      	b.n	800808c <_svfiprintf_r+0x4c>
 800811a:	4a40      	ldr	r2, [pc, #256]	; (800821c <_svfiprintf_r+0x1dc>)
 800811c:	463d      	mov	r5, r7
 800811e:	1a80      	subs	r0, r0, r2
 8008120:	fa0b f000 	lsl.w	r0, fp, r0
 8008124:	4318      	orrs	r0, r3
 8008126:	9004      	str	r0, [sp, #16]
 8008128:	e7d3      	b.n	80080d2 <_svfiprintf_r+0x92>
 800812a:	9a03      	ldr	r2, [sp, #12]
 800812c:	1d11      	adds	r1, r2, #4
 800812e:	6812      	ldr	r2, [r2, #0]
 8008130:	9103      	str	r1, [sp, #12]
 8008132:	2a00      	cmp	r2, #0
 8008134:	db01      	blt.n	800813a <_svfiprintf_r+0xfa>
 8008136:	9207      	str	r2, [sp, #28]
 8008138:	e004      	b.n	8008144 <_svfiprintf_r+0x104>
 800813a:	4252      	negs	r2, r2
 800813c:	f043 0302 	orr.w	r3, r3, #2
 8008140:	9207      	str	r2, [sp, #28]
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	783b      	ldrb	r3, [r7, #0]
 8008146:	2b2e      	cmp	r3, #46	; 0x2e
 8008148:	d10c      	bne.n	8008164 <_svfiprintf_r+0x124>
 800814a:	787b      	ldrb	r3, [r7, #1]
 800814c:	2b2a      	cmp	r3, #42	; 0x2a
 800814e:	d133      	bne.n	80081b8 <_svfiprintf_r+0x178>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	3702      	adds	r7, #2
 8008154:	1d1a      	adds	r2, r3, #4
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	9203      	str	r2, [sp, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	bfb8      	it	lt
 800815e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	4d2e      	ldr	r5, [pc, #184]	; (8008220 <_svfiprintf_r+0x1e0>)
 8008166:	2203      	movs	r2, #3
 8008168:	7839      	ldrb	r1, [r7, #0]
 800816a:	4628      	mov	r0, r5
 800816c:	f000 f9e8 	bl	8008540 <memchr>
 8008170:	b138      	cbz	r0, 8008182 <_svfiprintf_r+0x142>
 8008172:	2340      	movs	r3, #64	; 0x40
 8008174:	1b40      	subs	r0, r0, r5
 8008176:	fa03 f000 	lsl.w	r0, r3, r0
 800817a:	9b04      	ldr	r3, [sp, #16]
 800817c:	3701      	adds	r7, #1
 800817e:	4303      	orrs	r3, r0
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	7839      	ldrb	r1, [r7, #0]
 8008184:	2206      	movs	r2, #6
 8008186:	4827      	ldr	r0, [pc, #156]	; (8008224 <_svfiprintf_r+0x1e4>)
 8008188:	1c7e      	adds	r6, r7, #1
 800818a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800818e:	f000 f9d7 	bl	8008540 <memchr>
 8008192:	2800      	cmp	r0, #0
 8008194:	d038      	beq.n	8008208 <_svfiprintf_r+0x1c8>
 8008196:	4b24      	ldr	r3, [pc, #144]	; (8008228 <_svfiprintf_r+0x1e8>)
 8008198:	bb13      	cbnz	r3, 80081e0 <_svfiprintf_r+0x1a0>
 800819a:	9b03      	ldr	r3, [sp, #12]
 800819c:	3307      	adds	r3, #7
 800819e:	f023 0307 	bic.w	r3, r3, #7
 80081a2:	3308      	adds	r3, #8
 80081a4:	9303      	str	r3, [sp, #12]
 80081a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a8:	444b      	add	r3, r9
 80081aa:	9309      	str	r3, [sp, #36]	; 0x24
 80081ac:	e76d      	b.n	800808a <_svfiprintf_r+0x4a>
 80081ae:	fb05 3202 	mla	r2, r5, r2, r3
 80081b2:	2001      	movs	r0, #1
 80081b4:	460f      	mov	r7, r1
 80081b6:	e7a6      	b.n	8008106 <_svfiprintf_r+0xc6>
 80081b8:	2300      	movs	r3, #0
 80081ba:	250a      	movs	r5, #10
 80081bc:	4619      	mov	r1, r3
 80081be:	3701      	adds	r7, #1
 80081c0:	9305      	str	r3, [sp, #20]
 80081c2:	4638      	mov	r0, r7
 80081c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c8:	3a30      	subs	r2, #48	; 0x30
 80081ca:	2a09      	cmp	r2, #9
 80081cc:	d903      	bls.n	80081d6 <_svfiprintf_r+0x196>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0c8      	beq.n	8008164 <_svfiprintf_r+0x124>
 80081d2:	9105      	str	r1, [sp, #20]
 80081d4:	e7c6      	b.n	8008164 <_svfiprintf_r+0x124>
 80081d6:	fb05 2101 	mla	r1, r5, r1, r2
 80081da:	2301      	movs	r3, #1
 80081dc:	4607      	mov	r7, r0
 80081de:	e7f0      	b.n	80081c2 <_svfiprintf_r+0x182>
 80081e0:	ab03      	add	r3, sp, #12
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	4622      	mov	r2, r4
 80081e6:	4b11      	ldr	r3, [pc, #68]	; (800822c <_svfiprintf_r+0x1ec>)
 80081e8:	a904      	add	r1, sp, #16
 80081ea:	4640      	mov	r0, r8
 80081ec:	f3af 8000 	nop.w
 80081f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081f4:	4681      	mov	r9, r0
 80081f6:	d1d6      	bne.n	80081a6 <_svfiprintf_r+0x166>
 80081f8:	89a3      	ldrh	r3, [r4, #12]
 80081fa:	065b      	lsls	r3, r3, #25
 80081fc:	f53f af35 	bmi.w	800806a <_svfiprintf_r+0x2a>
 8008200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008202:	b01d      	add	sp, #116	; 0x74
 8008204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008208:	ab03      	add	r3, sp, #12
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	4622      	mov	r2, r4
 800820e:	4b07      	ldr	r3, [pc, #28]	; (800822c <_svfiprintf_r+0x1ec>)
 8008210:	a904      	add	r1, sp, #16
 8008212:	4640      	mov	r0, r8
 8008214:	f000 f882 	bl	800831c <_printf_i>
 8008218:	e7ea      	b.n	80081f0 <_svfiprintf_r+0x1b0>
 800821a:	bf00      	nop
 800821c:	08008804 	.word	0x08008804
 8008220:	0800880a 	.word	0x0800880a
 8008224:	0800880e 	.word	0x0800880e
 8008228:	00000000 	.word	0x00000000
 800822c:	08007f8d 	.word	0x08007f8d

08008230 <_printf_common>:
 8008230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008234:	4691      	mov	r9, r2
 8008236:	461f      	mov	r7, r3
 8008238:	688a      	ldr	r2, [r1, #8]
 800823a:	690b      	ldr	r3, [r1, #16]
 800823c:	4606      	mov	r6, r0
 800823e:	4293      	cmp	r3, r2
 8008240:	bfb8      	it	lt
 8008242:	4613      	movlt	r3, r2
 8008244:	f8c9 3000 	str.w	r3, [r9]
 8008248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800824c:	460c      	mov	r4, r1
 800824e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008252:	b112      	cbz	r2, 800825a <_printf_common+0x2a>
 8008254:	3301      	adds	r3, #1
 8008256:	f8c9 3000 	str.w	r3, [r9]
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	0699      	lsls	r1, r3, #26
 800825e:	bf42      	ittt	mi
 8008260:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008264:	3302      	addmi	r3, #2
 8008266:	f8c9 3000 	strmi.w	r3, [r9]
 800826a:	6825      	ldr	r5, [r4, #0]
 800826c:	f015 0506 	ands.w	r5, r5, #6
 8008270:	d107      	bne.n	8008282 <_printf_common+0x52>
 8008272:	f104 0a19 	add.w	sl, r4, #25
 8008276:	68e3      	ldr	r3, [r4, #12]
 8008278:	f8d9 2000 	ldr.w	r2, [r9]
 800827c:	1a9b      	subs	r3, r3, r2
 800827e:	42ab      	cmp	r3, r5
 8008280:	dc29      	bgt.n	80082d6 <_printf_common+0xa6>
 8008282:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008286:	6822      	ldr	r2, [r4, #0]
 8008288:	3300      	adds	r3, #0
 800828a:	bf18      	it	ne
 800828c:	2301      	movne	r3, #1
 800828e:	0692      	lsls	r2, r2, #26
 8008290:	d42e      	bmi.n	80082f0 <_printf_common+0xc0>
 8008292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008296:	4639      	mov	r1, r7
 8008298:	4630      	mov	r0, r6
 800829a:	47c0      	blx	r8
 800829c:	3001      	adds	r0, #1
 800829e:	d021      	beq.n	80082e4 <_printf_common+0xb4>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	68e5      	ldr	r5, [r4, #12]
 80082a4:	f003 0306 	and.w	r3, r3, #6
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	bf18      	it	ne
 80082ac:	2500      	movne	r5, #0
 80082ae:	f8d9 2000 	ldr.w	r2, [r9]
 80082b2:	f04f 0900 	mov.w	r9, #0
 80082b6:	bf08      	it	eq
 80082b8:	1aad      	subeq	r5, r5, r2
 80082ba:	68a3      	ldr	r3, [r4, #8]
 80082bc:	6922      	ldr	r2, [r4, #16]
 80082be:	bf08      	it	eq
 80082c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082c4:	4293      	cmp	r3, r2
 80082c6:	bfc4      	itt	gt
 80082c8:	1a9b      	subgt	r3, r3, r2
 80082ca:	18ed      	addgt	r5, r5, r3
 80082cc:	341a      	adds	r4, #26
 80082ce:	454d      	cmp	r5, r9
 80082d0:	d11a      	bne.n	8008308 <_printf_common+0xd8>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e008      	b.n	80082e8 <_printf_common+0xb8>
 80082d6:	2301      	movs	r3, #1
 80082d8:	4652      	mov	r2, sl
 80082da:	4639      	mov	r1, r7
 80082dc:	4630      	mov	r0, r6
 80082de:	47c0      	blx	r8
 80082e0:	3001      	adds	r0, #1
 80082e2:	d103      	bne.n	80082ec <_printf_common+0xbc>
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ec:	3501      	adds	r5, #1
 80082ee:	e7c2      	b.n	8008276 <_printf_common+0x46>
 80082f0:	2030      	movs	r0, #48	; 0x30
 80082f2:	18e1      	adds	r1, r4, r3
 80082f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082fe:	4422      	add	r2, r4
 8008300:	3302      	adds	r3, #2
 8008302:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008306:	e7c4      	b.n	8008292 <_printf_common+0x62>
 8008308:	2301      	movs	r3, #1
 800830a:	4622      	mov	r2, r4
 800830c:	4639      	mov	r1, r7
 800830e:	4630      	mov	r0, r6
 8008310:	47c0      	blx	r8
 8008312:	3001      	adds	r0, #1
 8008314:	d0e6      	beq.n	80082e4 <_printf_common+0xb4>
 8008316:	f109 0901 	add.w	r9, r9, #1
 800831a:	e7d8      	b.n	80082ce <_printf_common+0x9e>

0800831c <_printf_i>:
 800831c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008320:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008324:	460c      	mov	r4, r1
 8008326:	7e09      	ldrb	r1, [r1, #24]
 8008328:	b085      	sub	sp, #20
 800832a:	296e      	cmp	r1, #110	; 0x6e
 800832c:	4617      	mov	r7, r2
 800832e:	4606      	mov	r6, r0
 8008330:	4698      	mov	r8, r3
 8008332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008334:	f000 80b3 	beq.w	800849e <_printf_i+0x182>
 8008338:	d822      	bhi.n	8008380 <_printf_i+0x64>
 800833a:	2963      	cmp	r1, #99	; 0x63
 800833c:	d036      	beq.n	80083ac <_printf_i+0x90>
 800833e:	d80a      	bhi.n	8008356 <_printf_i+0x3a>
 8008340:	2900      	cmp	r1, #0
 8008342:	f000 80b9 	beq.w	80084b8 <_printf_i+0x19c>
 8008346:	2958      	cmp	r1, #88	; 0x58
 8008348:	f000 8083 	beq.w	8008452 <_printf_i+0x136>
 800834c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008350:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008354:	e032      	b.n	80083bc <_printf_i+0xa0>
 8008356:	2964      	cmp	r1, #100	; 0x64
 8008358:	d001      	beq.n	800835e <_printf_i+0x42>
 800835a:	2969      	cmp	r1, #105	; 0x69
 800835c:	d1f6      	bne.n	800834c <_printf_i+0x30>
 800835e:	6820      	ldr	r0, [r4, #0]
 8008360:	6813      	ldr	r3, [r2, #0]
 8008362:	0605      	lsls	r5, r0, #24
 8008364:	f103 0104 	add.w	r1, r3, #4
 8008368:	d52a      	bpl.n	80083c0 <_printf_i+0xa4>
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6011      	str	r1, [r2, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	da03      	bge.n	800837a <_printf_i+0x5e>
 8008372:	222d      	movs	r2, #45	; 0x2d
 8008374:	425b      	negs	r3, r3
 8008376:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800837a:	486f      	ldr	r0, [pc, #444]	; (8008538 <_printf_i+0x21c>)
 800837c:	220a      	movs	r2, #10
 800837e:	e039      	b.n	80083f4 <_printf_i+0xd8>
 8008380:	2973      	cmp	r1, #115	; 0x73
 8008382:	f000 809d 	beq.w	80084c0 <_printf_i+0x1a4>
 8008386:	d808      	bhi.n	800839a <_printf_i+0x7e>
 8008388:	296f      	cmp	r1, #111	; 0x6f
 800838a:	d020      	beq.n	80083ce <_printf_i+0xb2>
 800838c:	2970      	cmp	r1, #112	; 0x70
 800838e:	d1dd      	bne.n	800834c <_printf_i+0x30>
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	f043 0320 	orr.w	r3, r3, #32
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	e003      	b.n	80083a2 <_printf_i+0x86>
 800839a:	2975      	cmp	r1, #117	; 0x75
 800839c:	d017      	beq.n	80083ce <_printf_i+0xb2>
 800839e:	2978      	cmp	r1, #120	; 0x78
 80083a0:	d1d4      	bne.n	800834c <_printf_i+0x30>
 80083a2:	2378      	movs	r3, #120	; 0x78
 80083a4:	4865      	ldr	r0, [pc, #404]	; (800853c <_printf_i+0x220>)
 80083a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083aa:	e055      	b.n	8008458 <_printf_i+0x13c>
 80083ac:	6813      	ldr	r3, [r2, #0]
 80083ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b2:	1d19      	adds	r1, r3, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6011      	str	r1, [r2, #0]
 80083b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083bc:	2301      	movs	r3, #1
 80083be:	e08c      	b.n	80084da <_printf_i+0x1be>
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083c6:	6011      	str	r1, [r2, #0]
 80083c8:	bf18      	it	ne
 80083ca:	b21b      	sxthne	r3, r3
 80083cc:	e7cf      	b.n	800836e <_printf_i+0x52>
 80083ce:	6813      	ldr	r3, [r2, #0]
 80083d0:	6825      	ldr	r5, [r4, #0]
 80083d2:	1d18      	adds	r0, r3, #4
 80083d4:	6010      	str	r0, [r2, #0]
 80083d6:	0628      	lsls	r0, r5, #24
 80083d8:	d501      	bpl.n	80083de <_printf_i+0xc2>
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	e002      	b.n	80083e4 <_printf_i+0xc8>
 80083de:	0668      	lsls	r0, r5, #25
 80083e0:	d5fb      	bpl.n	80083da <_printf_i+0xbe>
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	296f      	cmp	r1, #111	; 0x6f
 80083e6:	bf14      	ite	ne
 80083e8:	220a      	movne	r2, #10
 80083ea:	2208      	moveq	r2, #8
 80083ec:	4852      	ldr	r0, [pc, #328]	; (8008538 <_printf_i+0x21c>)
 80083ee:	2100      	movs	r1, #0
 80083f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083f4:	6865      	ldr	r5, [r4, #4]
 80083f6:	2d00      	cmp	r5, #0
 80083f8:	60a5      	str	r5, [r4, #8]
 80083fa:	f2c0 8095 	blt.w	8008528 <_printf_i+0x20c>
 80083fe:	6821      	ldr	r1, [r4, #0]
 8008400:	f021 0104 	bic.w	r1, r1, #4
 8008404:	6021      	str	r1, [r4, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d13d      	bne.n	8008486 <_printf_i+0x16a>
 800840a:	2d00      	cmp	r5, #0
 800840c:	f040 808e 	bne.w	800852c <_printf_i+0x210>
 8008410:	4665      	mov	r5, ip
 8008412:	2a08      	cmp	r2, #8
 8008414:	d10b      	bne.n	800842e <_printf_i+0x112>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	07db      	lsls	r3, r3, #31
 800841a:	d508      	bpl.n	800842e <_printf_i+0x112>
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	6862      	ldr	r2, [r4, #4]
 8008420:	429a      	cmp	r2, r3
 8008422:	bfde      	ittt	le
 8008424:	2330      	movle	r3, #48	; 0x30
 8008426:	f805 3c01 	strble.w	r3, [r5, #-1]
 800842a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800842e:	ebac 0305 	sub.w	r3, ip, r5
 8008432:	6123      	str	r3, [r4, #16]
 8008434:	f8cd 8000 	str.w	r8, [sp]
 8008438:	463b      	mov	r3, r7
 800843a:	aa03      	add	r2, sp, #12
 800843c:	4621      	mov	r1, r4
 800843e:	4630      	mov	r0, r6
 8008440:	f7ff fef6 	bl	8008230 <_printf_common>
 8008444:	3001      	adds	r0, #1
 8008446:	d14d      	bne.n	80084e4 <_printf_i+0x1c8>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	b005      	add	sp, #20
 800844e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008452:	4839      	ldr	r0, [pc, #228]	; (8008538 <_printf_i+0x21c>)
 8008454:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008458:	6813      	ldr	r3, [r2, #0]
 800845a:	6821      	ldr	r1, [r4, #0]
 800845c:	1d1d      	adds	r5, r3, #4
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6015      	str	r5, [r2, #0]
 8008462:	060a      	lsls	r2, r1, #24
 8008464:	d50b      	bpl.n	800847e <_printf_i+0x162>
 8008466:	07ca      	lsls	r2, r1, #31
 8008468:	bf44      	itt	mi
 800846a:	f041 0120 	orrmi.w	r1, r1, #32
 800846e:	6021      	strmi	r1, [r4, #0]
 8008470:	b91b      	cbnz	r3, 800847a <_printf_i+0x15e>
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	f022 0220 	bic.w	r2, r2, #32
 8008478:	6022      	str	r2, [r4, #0]
 800847a:	2210      	movs	r2, #16
 800847c:	e7b7      	b.n	80083ee <_printf_i+0xd2>
 800847e:	064d      	lsls	r5, r1, #25
 8008480:	bf48      	it	mi
 8008482:	b29b      	uxthmi	r3, r3
 8008484:	e7ef      	b.n	8008466 <_printf_i+0x14a>
 8008486:	4665      	mov	r5, ip
 8008488:	fbb3 f1f2 	udiv	r1, r3, r2
 800848c:	fb02 3311 	mls	r3, r2, r1, r3
 8008490:	5cc3      	ldrb	r3, [r0, r3]
 8008492:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008496:	460b      	mov	r3, r1
 8008498:	2900      	cmp	r1, #0
 800849a:	d1f5      	bne.n	8008488 <_printf_i+0x16c>
 800849c:	e7b9      	b.n	8008412 <_printf_i+0xf6>
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	6825      	ldr	r5, [r4, #0]
 80084a2:	1d18      	adds	r0, r3, #4
 80084a4:	6961      	ldr	r1, [r4, #20]
 80084a6:	6010      	str	r0, [r2, #0]
 80084a8:	0628      	lsls	r0, r5, #24
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	d501      	bpl.n	80084b2 <_printf_i+0x196>
 80084ae:	6019      	str	r1, [r3, #0]
 80084b0:	e002      	b.n	80084b8 <_printf_i+0x19c>
 80084b2:	066a      	lsls	r2, r5, #25
 80084b4:	d5fb      	bpl.n	80084ae <_printf_i+0x192>
 80084b6:	8019      	strh	r1, [r3, #0]
 80084b8:	2300      	movs	r3, #0
 80084ba:	4665      	mov	r5, ip
 80084bc:	6123      	str	r3, [r4, #16]
 80084be:	e7b9      	b.n	8008434 <_printf_i+0x118>
 80084c0:	6813      	ldr	r3, [r2, #0]
 80084c2:	1d19      	adds	r1, r3, #4
 80084c4:	6011      	str	r1, [r2, #0]
 80084c6:	681d      	ldr	r5, [r3, #0]
 80084c8:	6862      	ldr	r2, [r4, #4]
 80084ca:	2100      	movs	r1, #0
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 f837 	bl	8008540 <memchr>
 80084d2:	b108      	cbz	r0, 80084d8 <_printf_i+0x1bc>
 80084d4:	1b40      	subs	r0, r0, r5
 80084d6:	6060      	str	r0, [r4, #4]
 80084d8:	6863      	ldr	r3, [r4, #4]
 80084da:	6123      	str	r3, [r4, #16]
 80084dc:	2300      	movs	r3, #0
 80084de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084e2:	e7a7      	b.n	8008434 <_printf_i+0x118>
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	462a      	mov	r2, r5
 80084e8:	4639      	mov	r1, r7
 80084ea:	4630      	mov	r0, r6
 80084ec:	47c0      	blx	r8
 80084ee:	3001      	adds	r0, #1
 80084f0:	d0aa      	beq.n	8008448 <_printf_i+0x12c>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	079b      	lsls	r3, r3, #30
 80084f6:	d413      	bmi.n	8008520 <_printf_i+0x204>
 80084f8:	68e0      	ldr	r0, [r4, #12]
 80084fa:	9b03      	ldr	r3, [sp, #12]
 80084fc:	4298      	cmp	r0, r3
 80084fe:	bfb8      	it	lt
 8008500:	4618      	movlt	r0, r3
 8008502:	e7a3      	b.n	800844c <_printf_i+0x130>
 8008504:	2301      	movs	r3, #1
 8008506:	464a      	mov	r2, r9
 8008508:	4639      	mov	r1, r7
 800850a:	4630      	mov	r0, r6
 800850c:	47c0      	blx	r8
 800850e:	3001      	adds	r0, #1
 8008510:	d09a      	beq.n	8008448 <_printf_i+0x12c>
 8008512:	3501      	adds	r5, #1
 8008514:	68e3      	ldr	r3, [r4, #12]
 8008516:	9a03      	ldr	r2, [sp, #12]
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	42ab      	cmp	r3, r5
 800851c:	dcf2      	bgt.n	8008504 <_printf_i+0x1e8>
 800851e:	e7eb      	b.n	80084f8 <_printf_i+0x1dc>
 8008520:	2500      	movs	r5, #0
 8008522:	f104 0919 	add.w	r9, r4, #25
 8008526:	e7f5      	b.n	8008514 <_printf_i+0x1f8>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1ac      	bne.n	8008486 <_printf_i+0x16a>
 800852c:	7803      	ldrb	r3, [r0, #0]
 800852e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008532:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008536:	e76c      	b.n	8008412 <_printf_i+0xf6>
 8008538:	08008815 	.word	0x08008815
 800853c:	08008826 	.word	0x08008826

08008540 <memchr>:
 8008540:	b510      	push	{r4, lr}
 8008542:	b2c9      	uxtb	r1, r1
 8008544:	4402      	add	r2, r0
 8008546:	4290      	cmp	r0, r2
 8008548:	4603      	mov	r3, r0
 800854a:	d101      	bne.n	8008550 <memchr+0x10>
 800854c:	2300      	movs	r3, #0
 800854e:	e003      	b.n	8008558 <memchr+0x18>
 8008550:	781c      	ldrb	r4, [r3, #0]
 8008552:	3001      	adds	r0, #1
 8008554:	428c      	cmp	r4, r1
 8008556:	d1f6      	bne.n	8008546 <memchr+0x6>
 8008558:	4618      	mov	r0, r3
 800855a:	bd10      	pop	{r4, pc}

0800855c <memcpy>:
 800855c:	b510      	push	{r4, lr}
 800855e:	1e43      	subs	r3, r0, #1
 8008560:	440a      	add	r2, r1
 8008562:	4291      	cmp	r1, r2
 8008564:	d100      	bne.n	8008568 <memcpy+0xc>
 8008566:	bd10      	pop	{r4, pc}
 8008568:	f811 4b01 	ldrb.w	r4, [r1], #1
 800856c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008570:	e7f7      	b.n	8008562 <memcpy+0x6>

08008572 <memmove>:
 8008572:	4288      	cmp	r0, r1
 8008574:	b510      	push	{r4, lr}
 8008576:	eb01 0302 	add.w	r3, r1, r2
 800857a:	d807      	bhi.n	800858c <memmove+0x1a>
 800857c:	1e42      	subs	r2, r0, #1
 800857e:	4299      	cmp	r1, r3
 8008580:	d00a      	beq.n	8008598 <memmove+0x26>
 8008582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008586:	f802 4f01 	strb.w	r4, [r2, #1]!
 800858a:	e7f8      	b.n	800857e <memmove+0xc>
 800858c:	4283      	cmp	r3, r0
 800858e:	d9f5      	bls.n	800857c <memmove+0xa>
 8008590:	1881      	adds	r1, r0, r2
 8008592:	1ad2      	subs	r2, r2, r3
 8008594:	42d3      	cmn	r3, r2
 8008596:	d100      	bne.n	800859a <memmove+0x28>
 8008598:	bd10      	pop	{r4, pc}
 800859a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800859e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80085a2:	e7f7      	b.n	8008594 <memmove+0x22>

080085a4 <_free_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	4605      	mov	r5, r0
 80085a8:	2900      	cmp	r1, #0
 80085aa:	d043      	beq.n	8008634 <_free_r+0x90>
 80085ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085b0:	1f0c      	subs	r4, r1, #4
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bfb8      	it	lt
 80085b6:	18e4      	addlt	r4, r4, r3
 80085b8:	f000 f8d0 	bl	800875c <__malloc_lock>
 80085bc:	4a1e      	ldr	r2, [pc, #120]	; (8008638 <_free_r+0x94>)
 80085be:	6813      	ldr	r3, [r2, #0]
 80085c0:	4610      	mov	r0, r2
 80085c2:	b933      	cbnz	r3, 80085d2 <_free_r+0x2e>
 80085c4:	6063      	str	r3, [r4, #4]
 80085c6:	6014      	str	r4, [r2, #0]
 80085c8:	4628      	mov	r0, r5
 80085ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ce:	f000 b8c6 	b.w	800875e <__malloc_unlock>
 80085d2:	42a3      	cmp	r3, r4
 80085d4:	d90b      	bls.n	80085ee <_free_r+0x4a>
 80085d6:	6821      	ldr	r1, [r4, #0]
 80085d8:	1862      	adds	r2, r4, r1
 80085da:	4293      	cmp	r3, r2
 80085dc:	bf01      	itttt	eq
 80085de:	681a      	ldreq	r2, [r3, #0]
 80085e0:	685b      	ldreq	r3, [r3, #4]
 80085e2:	1852      	addeq	r2, r2, r1
 80085e4:	6022      	streq	r2, [r4, #0]
 80085e6:	6063      	str	r3, [r4, #4]
 80085e8:	6004      	str	r4, [r0, #0]
 80085ea:	e7ed      	b.n	80085c8 <_free_r+0x24>
 80085ec:	4613      	mov	r3, r2
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	b10a      	cbz	r2, 80085f6 <_free_r+0x52>
 80085f2:	42a2      	cmp	r2, r4
 80085f4:	d9fa      	bls.n	80085ec <_free_r+0x48>
 80085f6:	6819      	ldr	r1, [r3, #0]
 80085f8:	1858      	adds	r0, r3, r1
 80085fa:	42a0      	cmp	r0, r4
 80085fc:	d10b      	bne.n	8008616 <_free_r+0x72>
 80085fe:	6820      	ldr	r0, [r4, #0]
 8008600:	4401      	add	r1, r0
 8008602:	1858      	adds	r0, r3, r1
 8008604:	4282      	cmp	r2, r0
 8008606:	6019      	str	r1, [r3, #0]
 8008608:	d1de      	bne.n	80085c8 <_free_r+0x24>
 800860a:	6810      	ldr	r0, [r2, #0]
 800860c:	6852      	ldr	r2, [r2, #4]
 800860e:	4401      	add	r1, r0
 8008610:	6019      	str	r1, [r3, #0]
 8008612:	605a      	str	r2, [r3, #4]
 8008614:	e7d8      	b.n	80085c8 <_free_r+0x24>
 8008616:	d902      	bls.n	800861e <_free_r+0x7a>
 8008618:	230c      	movs	r3, #12
 800861a:	602b      	str	r3, [r5, #0]
 800861c:	e7d4      	b.n	80085c8 <_free_r+0x24>
 800861e:	6820      	ldr	r0, [r4, #0]
 8008620:	1821      	adds	r1, r4, r0
 8008622:	428a      	cmp	r2, r1
 8008624:	bf01      	itttt	eq
 8008626:	6811      	ldreq	r1, [r2, #0]
 8008628:	6852      	ldreq	r2, [r2, #4]
 800862a:	1809      	addeq	r1, r1, r0
 800862c:	6021      	streq	r1, [r4, #0]
 800862e:	6062      	str	r2, [r4, #4]
 8008630:	605c      	str	r4, [r3, #4]
 8008632:	e7c9      	b.n	80085c8 <_free_r+0x24>
 8008634:	bd38      	pop	{r3, r4, r5, pc}
 8008636:	bf00      	nop
 8008638:	20000428 	.word	0x20000428

0800863c <_malloc_r>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	1ccd      	adds	r5, r1, #3
 8008640:	f025 0503 	bic.w	r5, r5, #3
 8008644:	3508      	adds	r5, #8
 8008646:	2d0c      	cmp	r5, #12
 8008648:	bf38      	it	cc
 800864a:	250c      	movcc	r5, #12
 800864c:	2d00      	cmp	r5, #0
 800864e:	4606      	mov	r6, r0
 8008650:	db01      	blt.n	8008656 <_malloc_r+0x1a>
 8008652:	42a9      	cmp	r1, r5
 8008654:	d903      	bls.n	800865e <_malloc_r+0x22>
 8008656:	230c      	movs	r3, #12
 8008658:	6033      	str	r3, [r6, #0]
 800865a:	2000      	movs	r0, #0
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	f000 f87d 	bl	800875c <__malloc_lock>
 8008662:	4a21      	ldr	r2, [pc, #132]	; (80086e8 <_malloc_r+0xac>)
 8008664:	6814      	ldr	r4, [r2, #0]
 8008666:	4621      	mov	r1, r4
 8008668:	b991      	cbnz	r1, 8008690 <_malloc_r+0x54>
 800866a:	4c20      	ldr	r4, [pc, #128]	; (80086ec <_malloc_r+0xb0>)
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	b91b      	cbnz	r3, 8008678 <_malloc_r+0x3c>
 8008670:	4630      	mov	r0, r6
 8008672:	f000 f863 	bl	800873c <_sbrk_r>
 8008676:	6020      	str	r0, [r4, #0]
 8008678:	4629      	mov	r1, r5
 800867a:	4630      	mov	r0, r6
 800867c:	f000 f85e 	bl	800873c <_sbrk_r>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d124      	bne.n	80086ce <_malloc_r+0x92>
 8008684:	230c      	movs	r3, #12
 8008686:	4630      	mov	r0, r6
 8008688:	6033      	str	r3, [r6, #0]
 800868a:	f000 f868 	bl	800875e <__malloc_unlock>
 800868e:	e7e4      	b.n	800865a <_malloc_r+0x1e>
 8008690:	680b      	ldr	r3, [r1, #0]
 8008692:	1b5b      	subs	r3, r3, r5
 8008694:	d418      	bmi.n	80086c8 <_malloc_r+0x8c>
 8008696:	2b0b      	cmp	r3, #11
 8008698:	d90f      	bls.n	80086ba <_malloc_r+0x7e>
 800869a:	600b      	str	r3, [r1, #0]
 800869c:	18cc      	adds	r4, r1, r3
 800869e:	50cd      	str	r5, [r1, r3]
 80086a0:	4630      	mov	r0, r6
 80086a2:	f000 f85c 	bl	800875e <__malloc_unlock>
 80086a6:	f104 000b 	add.w	r0, r4, #11
 80086aa:	1d23      	adds	r3, r4, #4
 80086ac:	f020 0007 	bic.w	r0, r0, #7
 80086b0:	1ac3      	subs	r3, r0, r3
 80086b2:	d0d3      	beq.n	800865c <_malloc_r+0x20>
 80086b4:	425a      	negs	r2, r3
 80086b6:	50e2      	str	r2, [r4, r3]
 80086b8:	e7d0      	b.n	800865c <_malloc_r+0x20>
 80086ba:	684b      	ldr	r3, [r1, #4]
 80086bc:	428c      	cmp	r4, r1
 80086be:	bf16      	itet	ne
 80086c0:	6063      	strne	r3, [r4, #4]
 80086c2:	6013      	streq	r3, [r2, #0]
 80086c4:	460c      	movne	r4, r1
 80086c6:	e7eb      	b.n	80086a0 <_malloc_r+0x64>
 80086c8:	460c      	mov	r4, r1
 80086ca:	6849      	ldr	r1, [r1, #4]
 80086cc:	e7cc      	b.n	8008668 <_malloc_r+0x2c>
 80086ce:	1cc4      	adds	r4, r0, #3
 80086d0:	f024 0403 	bic.w	r4, r4, #3
 80086d4:	42a0      	cmp	r0, r4
 80086d6:	d005      	beq.n	80086e4 <_malloc_r+0xa8>
 80086d8:	1a21      	subs	r1, r4, r0
 80086da:	4630      	mov	r0, r6
 80086dc:	f000 f82e 	bl	800873c <_sbrk_r>
 80086e0:	3001      	adds	r0, #1
 80086e2:	d0cf      	beq.n	8008684 <_malloc_r+0x48>
 80086e4:	6025      	str	r5, [r4, #0]
 80086e6:	e7db      	b.n	80086a0 <_malloc_r+0x64>
 80086e8:	20000428 	.word	0x20000428
 80086ec:	2000042c 	.word	0x2000042c

080086f0 <_realloc_r>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	4607      	mov	r7, r0
 80086f4:	4614      	mov	r4, r2
 80086f6:	460e      	mov	r6, r1
 80086f8:	b921      	cbnz	r1, 8008704 <_realloc_r+0x14>
 80086fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086fe:	4611      	mov	r1, r2
 8008700:	f7ff bf9c 	b.w	800863c <_malloc_r>
 8008704:	b922      	cbnz	r2, 8008710 <_realloc_r+0x20>
 8008706:	f7ff ff4d 	bl	80085a4 <_free_r>
 800870a:	4625      	mov	r5, r4
 800870c:	4628      	mov	r0, r5
 800870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008710:	f000 f826 	bl	8008760 <_malloc_usable_size_r>
 8008714:	42a0      	cmp	r0, r4
 8008716:	d20f      	bcs.n	8008738 <_realloc_r+0x48>
 8008718:	4621      	mov	r1, r4
 800871a:	4638      	mov	r0, r7
 800871c:	f7ff ff8e 	bl	800863c <_malloc_r>
 8008720:	4605      	mov	r5, r0
 8008722:	2800      	cmp	r0, #0
 8008724:	d0f2      	beq.n	800870c <_realloc_r+0x1c>
 8008726:	4631      	mov	r1, r6
 8008728:	4622      	mov	r2, r4
 800872a:	f7ff ff17 	bl	800855c <memcpy>
 800872e:	4631      	mov	r1, r6
 8008730:	4638      	mov	r0, r7
 8008732:	f7ff ff37 	bl	80085a4 <_free_r>
 8008736:	e7e9      	b.n	800870c <_realloc_r+0x1c>
 8008738:	4635      	mov	r5, r6
 800873a:	e7e7      	b.n	800870c <_realloc_r+0x1c>

0800873c <_sbrk_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	2300      	movs	r3, #0
 8008740:	4c05      	ldr	r4, [pc, #20]	; (8008758 <_sbrk_r+0x1c>)
 8008742:	4605      	mov	r5, r0
 8008744:	4608      	mov	r0, r1
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	f7f7 fefa 	bl	8000540 <_sbrk>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_sbrk_r+0x1a>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	b103      	cbz	r3, 8008756 <_sbrk_r+0x1a>
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	200015a0 	.word	0x200015a0

0800875c <__malloc_lock>:
 800875c:	4770      	bx	lr

0800875e <__malloc_unlock>:
 800875e:	4770      	bx	lr

08008760 <_malloc_usable_size_r>:
 8008760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008764:	1f18      	subs	r0, r3, #4
 8008766:	2b00      	cmp	r3, #0
 8008768:	bfbc      	itt	lt
 800876a:	580b      	ldrlt	r3, [r1, r0]
 800876c:	18c0      	addlt	r0, r0, r3
 800876e:	4770      	bx	lr

08008770 <_init>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	bf00      	nop
 8008774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008776:	bc08      	pop	{r3}
 8008778:	469e      	mov	lr, r3
 800877a:	4770      	bx	lr

0800877c <_fini>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	bf00      	nop
 8008780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008782:	bc08      	pop	{r3}
 8008784:	469e      	mov	lr, r3
 8008786:	4770      	bx	lr
