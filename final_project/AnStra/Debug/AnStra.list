
AnStra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800b7c0  0800b7c0  0001b7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdc0  0800bdc0  00020374  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdc0  0800bdc0  00020374  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdc0  0800bdc0  00020374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdc0  0800bdc0  0001bdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdc4  0800bdc4  0001bdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  0800bdc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001820  20000378  0800c13c  00020378  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001b98  0800c13c  00021b98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY
 12 .debug_info   000239c1  00000000  00000000  0002039d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e59  00000000  00000000  00043d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ff13  00000000  00000000  00048bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000011e0  00000000  00000000  00058ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d70  00000000  00000000  00059cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001c2b1  00000000  00000000  0005ba20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001580e  00000000  00000000  00077cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00092f13  00000000  00000000  0008d4df  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001203f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047d0  00000000  00000000  00120470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000378 	.word	0x20000378
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b7a8 	.word	0x0800b7a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000037c 	.word	0x2000037c
 800014c:	0800b7a8 	.word	0x0800b7a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <height_angle>:
double direction;

int R = 6371;

// od 0 do 90 stopni, 0 oznacza pion
void height_angle( int angle ){
 8001064:	b508      	push	{r3, lr}
	ha = angle;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <height_angle+0x20>)
 8001068:	6018      	str	r0, [r3, #0]
	float tmp = 893.0/90.0;
	TIM3->CCR3 = 1607 + tmp*angle;
 800106a:	f7ff fe37 	bl	8000cdc <__aeabi_i2f>
 800106e:	4906      	ldr	r1, [pc, #24]	; (8001088 <height_angle+0x24>)
 8001070:	f7ff fe88 	bl	8000d84 <__aeabi_fmul>
 8001074:	4905      	ldr	r1, [pc, #20]	; (800108c <height_angle+0x28>)
 8001076:	f7ff fd7d 	bl	8000b74 <__addsf3>
 800107a:	f7ff ffd3 	bl	8001024 <__aeabi_f2uiz>
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <height_angle+0x2c>)
 8001080:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8001082:	bd08      	pop	{r3, pc}
 8001084:	200005d0 	.word	0x200005d0
 8001088:	411ec16c 	.word	0x411ec16c
 800108c:	44c8e000 	.word	0x44c8e000
 8001090:	40000400 	.word	0x40000400

08001094 <direction_angle>:

// od -135 do 135
void direction_angle( int angle ){
 8001094:	b508      	push	{r3, lr}
	da = angle;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <direction_angle+0x20>)
 8001098:	6018      	str	r0, [r3, #0]
	float tmp = 1000.0/135.0;
	TIM3->CCR4 = 1500 + tmp*angle;
 800109a:	f7ff fe1f 	bl	8000cdc <__aeabi_i2f>
 800109e:	4906      	ldr	r1, [pc, #24]	; (80010b8 <direction_angle+0x24>)
 80010a0:	f7ff fe70 	bl	8000d84 <__aeabi_fmul>
 80010a4:	4905      	ldr	r1, [pc, #20]	; (80010bc <direction_angle+0x28>)
 80010a6:	f7ff fd65 	bl	8000b74 <__addsf3>
 80010aa:	f7ff ffbb 	bl	8001024 <__aeabi_f2uiz>
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <direction_angle+0x2c>)
 80010b0:	6418      	str	r0, [r3, #64]	; 0x40
}
 80010b2:	bd08      	pop	{r3, pc}
 80010b4:	200005f0 	.word	0x200005f0
 80010b8:	40ed097b 	.word	0x40ed097b
 80010bc:	44bb8000 	.word	0x44bb8000
 80010c0:	40000400 	.word	0x40000400

080010c4 <display_angle>:

void display_angle(){
 80010c4:	b510      	push	{r4, lr}
	lcd_clear();
 80010c6:	f000 fa91 	bl	80015ec <lcd_clear>
	sprintf(text, "Wysokosc: %03d",ha);
 80010ca:	4c0c      	ldr	r4, [pc, #48]	; (80010fc <display_angle+0x38>)
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <display_angle+0x3c>)
 80010ce:	490d      	ldr	r1, [pc, #52]	; (8001104 <display_angle+0x40>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4620      	mov	r0, r4
 80010d4:	f005 fe6a 	bl	8006dac <siprintf>
	lcd_send_string(text);
 80010d8:	4620      	mov	r0, r4
 80010da:	f000 fb01 	bl	80016e0 <lcd_send_string>

	lcd_line(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f000 fa88 	bl	80015f4 <lcd_line>
	sprintf(text, "Kierunek: %03d",da);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <display_angle+0x44>)
 80010e6:	4620      	mov	r0, r4
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <display_angle+0x48>)
 80010ec:	f005 fe5e 	bl	8006dac <siprintf>
	lcd_send_string(text);
 80010f0:	4620      	mov	r0, r4
}
 80010f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_send_string(text);
 80010f6:	f000 baf3 	b.w	80016e0 <lcd_send_string>
 80010fa:	bf00      	nop
 80010fc:	20000638 	.word	0x20000638
 8001100:	200005d0 	.word	0x200005d0
 8001104:	0800b7d0 	.word	0x0800b7d0
 8001108:	200005f0 	.word	0x200005f0
 800110c:	0800b7df 	.word	0x0800b7df

08001110 <set_ANSTRA_pos>:

void set_ANSTRA_pos(){
 8001110:	b508      	push	{r3, lr}
	pos_stat = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <set_ANSTRA_pos+0x30>)
	status = 0;
	lcd_display(0b111);
 8001116:	2007      	movs	r0, #7
	pos_stat = 0;
 8001118:	7013      	strb	r3, [r2, #0]
	status = 0;
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <set_ANSTRA_pos+0x34>)
 800111c:	7013      	strb	r3, [r2, #0]
	lcd_display(0b111);
 800111e:	f000 fa7d 	bl	800161c <lcd_display>

	lcd_clear();
 8001122:	f000 fa63 	bl	80015ec <lcd_clear>
	sprintf(text, "Pozycja ANSTRY:" );
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <set_ANSTRA_pos+0x38>)
 8001128:	4908      	ldr	r1, [pc, #32]	; (800114c <set_ANSTRA_pos+0x3c>)
 800112a:	4618      	mov	r0, r3
 800112c:	f005 fe5e 	bl	8006dec <strcpy>
	lcd_send_string(text);
 8001130:	f000 fad6 	bl	80016e0 <lcd_send_string>

	lcd_line(1);
}
 8001134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_line(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f000 ba5b 	b.w	80015f4 <lcd_line>
 800113e:	bf00      	nop
 8001140:	20000394 	.word	0x20000394
 8001144:	20000395 	.word	0x20000395
 8001148:	20000638 	.word	0x20000638
 800114c:	0800b7f9 	.word	0x0800b7f9

08001150 <set_ANSTRA_angle>:

void set_ANSTRA_angle(){
	status = 2;
 8001150:	2202      	movs	r2, #2
void set_ANSTRA_angle(){
 8001152:	b508      	push	{r3, lr}
	status = 2;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <set_ANSTRA_angle+0x30>)
	lcd_display(0b111);
 8001156:	2007      	movs	r0, #7
	status = 2;
 8001158:	701a      	strb	r2, [r3, #0]
	lcd_display(0b111);
 800115a:	f000 fa5f 	bl	800161c <lcd_display>
	pos_stat = 0;
 800115e:	2200      	movs	r2, #0
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <set_ANSTRA_angle+0x34>)
 8001162:	701a      	strb	r2, [r3, #0]

	lcd_clear();
 8001164:	f000 fa42 	bl	80015ec <lcd_clear>
	sprintf(text, "Ustaw kat:" );
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <set_ANSTRA_angle+0x38>)
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <set_ANSTRA_angle+0x3c>)
 800116c:	4618      	mov	r0, r3
 800116e:	f005 fe3d 	bl	8006dec <strcpy>
	lcd_send_string(text);
 8001172:	f000 fab5 	bl	80016e0 <lcd_send_string>

	lcd_line(1);
}
 8001176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_line(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 ba3a 	b.w	80015f4 <lcd_line>
 8001180:	20000395 	.word	0x20000395
 8001184:	20000394 	.word	0x20000394
 8001188:	20000638 	.word	0x20000638
 800118c:	0800b7ee 	.word	0x0800b7ee

08001190 <set_ANSTRA_target>:

void set_ANSTRA_target(){
	pos_stat = 0;
 8001190:	2200      	movs	r2, #0
void set_ANSTRA_target(){
 8001192:	b508      	push	{r3, lr}
	pos_stat = 0;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <set_ANSTRA_target+0x30>)
	status = 3;
	lcd_display(0b111);
 8001196:	2007      	movs	r0, #7
	pos_stat = 0;
 8001198:	701a      	strb	r2, [r3, #0]
	status = 3;
 800119a:	2203      	movs	r2, #3
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <set_ANSTRA_target+0x34>)
 800119e:	701a      	strb	r2, [r3, #0]
	lcd_display(0b111);
 80011a0:	f000 fa3c 	bl	800161c <lcd_display>

	lcd_clear();
 80011a4:	f000 fa22 	bl	80015ec <lcd_clear>
	sprintf(text, "Ustaw cel:" );
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <set_ANSTRA_target+0x38>)
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <set_ANSTRA_target+0x3c>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f005 fe1d 	bl	8006dec <strcpy>
	lcd_send_string(text);
 80011b2:	f000 fa95 	bl	80016e0 <lcd_send_string>

	lcd_line(1);
}
 80011b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_line(1);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 ba1a 	b.w	80015f4 <lcd_line>
 80011c0:	20000394 	.word	0x20000394
 80011c4:	20000395 	.word	0x20000395
 80011c8:	20000638 	.word	0x20000638
 80011cc:	0800b809 	.word	0x0800b809

080011d0 <get_ANSTRA_pos>:

void get_ANSTRA_pos( double ret ){
 80011d0:	b510      	push	{r4, lr}
	if( pos_stat == 0 )
 80011d2:	4c14      	ldr	r4, [pc, #80]	; (8001224 <get_ANSTRA_pos+0x54>)
 80011d4:	7823      	ldrb	r3, [r4, #0]
 80011d6:	b9eb      	cbnz	r3, 8001214 <get_ANSTRA_pos+0x44>
		latitude = ret;
 80011d8:	4a13      	ldr	r2, [pc, #76]	; (8001228 <get_ANSTRA_pos+0x58>)

	if( pos_stat == 1 )
		longitude = ret;

	if( pos_stat == 2 )
		direction = ret;
 80011da:	e9c2 0100 	strd	r0, r1, [r2]

	pos_stat++;
 80011de:	3301      	adds	r3, #1
 80011e0:	b2db      	uxtb	r3, r3
	if( pos_stat == 3 ){
 80011e2:	2b03      	cmp	r3, #3
	pos_stat++;
 80011e4:	7023      	strb	r3, [r4, #0]
	if( pos_stat == 3 ){
 80011e6:	d10f      	bne.n	8001208 <get_ANSTRA_pos+0x38>
		status = 1;
 80011e8:	2201      	movs	r2, #1
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <get_ANSTRA_pos+0x5c>)
		lcd_display(0b100);
 80011ec:	2004      	movs	r0, #4
		status = 1;
 80011ee:	701a      	strb	r2, [r3, #0]
		lcd_display(0b100);
 80011f0:	f000 fa14 	bl	800161c <lcd_display>
		height_angle(ha);
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <get_ANSTRA_pos+0x60>)
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f7ff ff34 	bl	8001064 <height_angle>
		direction_angle(da);
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <get_ANSTRA_pos+0x64>)
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f7ff ff48 	bl	8001094 <direction_angle>
		display_angle();
 8001204:	f7ff ff5e 	bl	80010c4 <display_angle>
	}

	lcd_line(pos_stat+1);
 8001208:	7820      	ldrb	r0, [r4, #0]
}
 800120a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_line(pos_stat+1);
 800120e:	3001      	adds	r0, #1
 8001210:	f000 b9f0 	b.w	80015f4 <lcd_line>
	if( pos_stat == 1 )
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <get_ANSTRA_pos+0x4c>
		longitude = ret;
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <get_ANSTRA_pos+0x68>)
 800121a:	e7de      	b.n	80011da <get_ANSTRA_pos+0xa>
	if( pos_stat == 2 )
 800121c:	2b02      	cmp	r3, #2
 800121e:	d1de      	bne.n	80011de <get_ANSTRA_pos+0xe>
		direction = ret;
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <get_ANSTRA_pos+0x6c>)
 8001222:	e7da      	b.n	80011da <get_ANSTRA_pos+0xa>
 8001224:	20000394 	.word	0x20000394
 8001228:	20000600 	.word	0x20000600
 800122c:	20000395 	.word	0x20000395
 8001230:	200005d0 	.word	0x200005d0
 8001234:	200005f0 	.word	0x200005f0
 8001238:	200005f8 	.word	0x200005f8
 800123c:	200005e8 	.word	0x200005e8

08001240 <get_ANSTRA_angle>:

void get_ANSTRA_angle( double ret ){
 8001240:	b538      	push	{r3, r4, r5, lr}
	if( pos_stat == 0 )
 8001242:	4d14      	ldr	r5, [pc, #80]	; (8001294 <get_ANSTRA_angle+0x54>)
 8001244:	782c      	ldrb	r4, [r5, #0]
 8001246:	b9f4      	cbnz	r4, 8001286 <get_ANSTRA_angle+0x46>
	  da = ret;
 8001248:	f7ff fbf6 	bl	8000a38 <__aeabi_d2iz>
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <get_ANSTRA_angle+0x58>)

	if( pos_stat == 1 )
	  ha = ret;
 800124e:	6018      	str	r0, [r3, #0]

	pos_stat++;
 8001250:	3401      	adds	r4, #1
 8001252:	b2e4      	uxtb	r4, r4
	if( pos_stat == 2 ){
 8001254:	2c02      	cmp	r4, #2
	pos_stat++;
 8001256:	702c      	strb	r4, [r5, #0]
	if( pos_stat == 2 ){
 8001258:	d10f      	bne.n	800127a <get_ANSTRA_angle+0x3a>
	  height_angle(ha);
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <get_ANSTRA_angle+0x5c>)
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	f7ff ff01 	bl	8001064 <height_angle>
	  direction_angle(da);
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <get_ANSTRA_angle+0x58>)
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	f7ff ff15 	bl	8001094 <direction_angle>
	  display_angle();
 800126a:	f7ff ff2b 	bl	80010c4 <display_angle>
	  status = 1;
 800126e:	2201      	movs	r2, #1
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <get_ANSTRA_angle+0x60>)
	  lcd_display(0b100);
 8001272:	2004      	movs	r0, #4
	  status = 1;
 8001274:	701a      	strb	r2, [r3, #0]
	  lcd_display(0b100);
 8001276:	f000 f9d1 	bl	800161c <lcd_display>
	}

	lcd_line( pos_stat+1 );
 800127a:	7828      	ldrb	r0, [r5, #0]
}
 800127c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_line( pos_stat+1 );
 8001280:	3001      	adds	r0, #1
 8001282:	f000 b9b7 	b.w	80015f4 <lcd_line>
	if( pos_stat == 1 )
 8001286:	2c01      	cmp	r4, #1
 8001288:	d1e2      	bne.n	8001250 <get_ANSTRA_angle+0x10>
	  ha = ret;
 800128a:	f7ff fbd5 	bl	8000a38 <__aeabi_d2iz>
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <get_ANSTRA_angle+0x5c>)
 8001290:	e7dd      	b.n	800124e <get_ANSTRA_angle+0xe>
 8001292:	bf00      	nop
 8001294:	20000394 	.word	0x20000394
 8001298:	200005f0 	.word	0x200005f0
 800129c:	200005d0 	.word	0x200005d0
 80012a0:	20000395 	.word	0x20000395
 80012a4:	00000000 	.word	0x00000000

080012a8 <target_to_angle>:
	}

	lcd_line( pos_stat+1 );
}

void target_to_angle(){
 80012a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double alf = (target_longitude - longitude)/180.0*M_PI;
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <target_to_angle+0x1b0>)
 80012ae:	496b      	ldr	r1, [pc, #428]	; (800145c <target_to_angle+0x1b4>)
void target_to_angle(){
 80012b0:	b085      	sub	sp, #20
	double alf = (target_longitude - longitude)/180.0*M_PI;
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ba:	f7fe ff55 	bl	8000168 <__aeabi_dsub>
 80012be:	2200      	movs	r2, #0
 80012c0:	4b67      	ldr	r3, [pc, #412]	; (8001460 <target_to_angle+0x1b8>)
 80012c2:	f7ff fa33 	bl	800072c <__aeabi_ddiv>
 80012c6:	a362      	add	r3, pc, #392	; (adr r3, 8001450 <target_to_angle+0x1a8>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff f904 	bl	80004d8 <__aeabi_dmul>
	double bet = (target_latitude - latitude)/180.0*M_PI;
 80012d0:	4b64      	ldr	r3, [pc, #400]	; (8001464 <target_to_angle+0x1bc>)
	double alf = (target_longitude - longitude)/180.0*M_PI;
 80012d2:	460d      	mov	r5, r1
	double bet = (target_latitude - latitude)/180.0*M_PI;
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	4963      	ldr	r1, [pc, #396]	; (8001468 <target_to_angle+0x1c0>)
	double alf = (target_longitude - longitude)/180.0*M_PI;
 80012da:	4604      	mov	r4, r0
	double bet = (target_latitude - latitude)/180.0*M_PI;
 80012dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012e0:	f7fe ff42 	bl	8000168 <__aeabi_dsub>
 80012e4:	2200      	movs	r2, #0
 80012e6:	4b5e      	ldr	r3, [pc, #376]	; (8001460 <target_to_angle+0x1b8>)
 80012e8:	f7ff fa20 	bl	800072c <__aeabi_ddiv>
 80012ec:	a358      	add	r3, pc, #352	; (adr r3, 8001450 <target_to_angle+0x1a8>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff f8f1 	bl	80004d8 <__aeabi_dmul>
 80012f6:	4682      	mov	sl, r0
 80012f8:	468b      	mov	fp, r1
//
	double satX = cos(alf)*cos(bet)*(target_height+R)-R;
 80012fa:	4620      	mov	r0, r4
 80012fc:	4629      	mov	r1, r5
 80012fe:	f008 fe89 	bl	800a014 <cos>
 8001302:	4680      	mov	r8, r0
 8001304:	4689      	mov	r9, r1
 8001306:	4650      	mov	r0, sl
 8001308:	4659      	mov	r1, fp
 800130a:	f008 fe83 	bl	800a014 <cos>
 800130e:	4b57      	ldr	r3, [pc, #348]	; (800146c <target_to_angle+0x1c4>)
 8001310:	e9cd 0100 	strd	r0, r1, [sp]
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f7ff f875 	bl	8000404 <__aeabi_i2d>
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <target_to_angle+0x1c8>)
 800131c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7fe ff22 	bl	800016c <__adddf3>
 8001328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800132c:	4606      	mov	r6, r0
 800132e:	460f      	mov	r7, r1
 8001330:	4640      	mov	r0, r8
 8001332:	4649      	mov	r1, r9
 8001334:	f7ff f8d0 	bl	80004d8 <__aeabi_dmul>
 8001338:	4632      	mov	r2, r6
 800133a:	463b      	mov	r3, r7
 800133c:	f7ff f8cc 	bl	80004d8 <__aeabi_dmul>
 8001340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001344:	f7fe ff10 	bl	8000168 <__aeabi_dsub>
 8001348:	4680      	mov	r8, r0
 800134a:	4689      	mov	r9, r1
	double satY = sin(alf)*cos(bet)*(target_height+R);
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f008 fe9a 	bl	800a088 <sin>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800135c:	f7ff f8bc 	bl	80004d8 <__aeabi_dmul>
 8001360:	4632      	mov	r2, r6
 8001362:	463b      	mov	r3, r7
 8001364:	f7ff f8b8 	bl	80004d8 <__aeabi_dmul>
 8001368:	4604      	mov	r4, r0
 800136a:	460d      	mov	r5, r1
	double satZ = sin(bet)*(target_height+R);
 800136c:	4650      	mov	r0, sl
 800136e:	4659      	mov	r1, fp
 8001370:	f008 fe8a 	bl	800a088 <sin>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4630      	mov	r0, r6
 800137a:	4639      	mov	r1, r7
 800137c:	f7ff f8ac 	bl	80004d8 <__aeabi_dmul>
//
	ha = acos( satX/( sqrt( satX*satX+satY*satY+satZ*satZ ) ) )/M_PI*180.0;
 8001380:	4642      	mov	r2, r8
	double satZ = sin(bet)*(target_height+R);
 8001382:	4606      	mov	r6, r0
 8001384:	460f      	mov	r7, r1
	ha = acos( satX/( sqrt( satX*satX+satY*satY+satZ*satZ ) ) )/M_PI*180.0;
 8001386:	464b      	mov	r3, r9
 8001388:	4640      	mov	r0, r8
 800138a:	4649      	mov	r1, r9
 800138c:	f7ff f8a4 	bl	80004d8 <__aeabi_dmul>
 8001390:	4622      	mov	r2, r4
 8001392:	4682      	mov	sl, r0
 8001394:	468b      	mov	fp, r1
 8001396:	462b      	mov	r3, r5
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7ff f89c 	bl	80004d8 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4650      	mov	r0, sl
 80013a6:	4659      	mov	r1, fp
 80013a8:	f7fe fee0 	bl	800016c <__adddf3>
 80013ac:	4632      	mov	r2, r6
 80013ae:	4682      	mov	sl, r0
 80013b0:	468b      	mov	fp, r1
 80013b2:	463b      	mov	r3, r7
 80013b4:	4630      	mov	r0, r6
 80013b6:	4639      	mov	r1, r7
 80013b8:	f7ff f88e 	bl	80004d8 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4650      	mov	r0, sl
 80013c2:	4659      	mov	r1, fp
 80013c4:	f7fe fed2 	bl	800016c <__adddf3>
 80013c8:	f008 feec 	bl	800a1a4 <sqrt>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4640      	mov	r0, r8
 80013d2:	4649      	mov	r1, r9
 80013d4:	f7ff f9aa 	bl	800072c <__aeabi_ddiv>
 80013d8:	f008 fe90 	bl	800a0fc <acos>
 80013dc:	a31c      	add	r3, pc, #112	; (adr r3, 8001450 <target_to_angle+0x1a8>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff f9a3 	bl	800072c <__aeabi_ddiv>
 80013e6:	2200      	movs	r2, #0
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <target_to_angle+0x1b8>)
 80013ea:	f7ff f875 	bl	80004d8 <__aeabi_dmul>
 80013ee:	f7ff fb23 	bl	8000a38 <__aeabi_d2iz>
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <target_to_angle+0x1cc>)
	da = atan(satZ/satY)/M_PI*180.0 - direction;
 80013f4:	4622      	mov	r2, r4
	ha = acos( satX/( sqrt( satX*satX+satY*satY+satZ*satZ ) ) )/M_PI*180.0;
 80013f6:	6018      	str	r0, [r3, #0]
	da = atan(satZ/satY)/M_PI*180.0 - direction;
 80013f8:	4639      	mov	r1, r7
 80013fa:	462b      	mov	r3, r5
 80013fc:	4630      	mov	r0, r6
 80013fe:	f7ff f995 	bl	800072c <__aeabi_ddiv>
 8001402:	f008 fc7d 	bl	8009d00 <atan>
 8001406:	a312      	add	r3, pc, #72	; (adr r3, 8001450 <target_to_angle+0x1a8>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f98e 	bl	800072c <__aeabi_ddiv>
 8001410:	2200      	movs	r2, #0
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <target_to_angle+0x1b8>)
 8001414:	f7ff f860 	bl	80004d8 <__aeabi_dmul>
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <target_to_angle+0x1d0>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7fe fea3 	bl	8000168 <__aeabi_dsub>
 8001422:	f7ff fb09 	bl	8000a38 <__aeabi_d2iz>
	if( satY < 0 ){
 8001426:	2300      	movs	r3, #0
	da = atan(satZ/satY)/M_PI*180.0 - direction;
 8001428:	4606      	mov	r6, r0
	if( satY < 0 ){
 800142a:	2200      	movs	r2, #0
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7ff fac4 	bl	80009bc <__aeabi_dcmplt>
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <target_to_angle+0x1d4>)
 8001436:	b918      	cbnz	r0, 8001440 <target_to_angle+0x198>
		if( da > 0 )
			da -= 180;
		else
			da += 180;
 8001438:	601e      	str	r6, [r3, #0]
	}
}
 800143a:	b005      	add	sp, #20
 800143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if( da > 0 )
 8001440:	2e00      	cmp	r6, #0
			da -= 180;
 8001442:	bfcc      	ite	gt
 8001444:	3eb4      	subgt	r6, #180	; 0xb4
			da += 180;
 8001446:	36b4      	addle	r6, #180	; 0xb4
 8001448:	e7f6      	b.n	8001438 <target_to_angle+0x190>
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	54442d18 	.word	0x54442d18
 8001454:	400921fb 	.word	0x400921fb
 8001458:	200005f8 	.word	0x200005f8
 800145c:	200005e0 	.word	0x200005e0
 8001460:	40668000 	.word	0x40668000
 8001464:	20000600 	.word	0x20000600
 8001468:	200005d8 	.word	0x200005d8
 800146c:	20000000 	.word	0x20000000
 8001470:	20000608 	.word	0x20000608
 8001474:	200005d0 	.word	0x200005d0
 8001478:	200005e8 	.word	0x200005e8
 800147c:	200005f0 	.word	0x200005f0

08001480 <get_ANSTRA_target>:
void get_ANSTRA_target( double ret ){
 8001480:	b510      	push	{r4, lr}
	if( pos_stat == 0 )
 8001482:	4c15      	ldr	r4, [pc, #84]	; (80014d8 <get_ANSTRA_target+0x58>)
 8001484:	7823      	ldrb	r3, [r4, #0]
 8001486:	b9fb      	cbnz	r3, 80014c8 <get_ANSTRA_target+0x48>
	  target_latitude = ret;
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <get_ANSTRA_target+0x5c>)
	  target_height= ret;
 800148a:	e9c2 0100 	strd	r0, r1, [r2]
	pos_stat++;
 800148e:	3301      	adds	r3, #1
 8001490:	b2db      	uxtb	r3, r3
	if( pos_stat == 3 ){
 8001492:	2b03      	cmp	r3, #3
	pos_stat++;
 8001494:	7023      	strb	r3, [r4, #0]
	if( pos_stat == 3 ){
 8001496:	d111      	bne.n	80014bc <get_ANSTRA_target+0x3c>
	  target_to_angle();
 8001498:	f7ff ff06 	bl	80012a8 <target_to_angle>
	  height_angle(ha);
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <get_ANSTRA_target+0x60>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	f7ff fde0 	bl	8001064 <height_angle>
	  direction_angle(da);
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <get_ANSTRA_target+0x64>)
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	f7ff fdf4 	bl	8001094 <direction_angle>
	  display_angle();
 80014ac:	f7ff fe0a 	bl	80010c4 <display_angle>
	  status = 1;
 80014b0:	2201      	movs	r2, #1
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <get_ANSTRA_target+0x68>)
	  lcd_display(0b100);
 80014b4:	2004      	movs	r0, #4
	  status = 1;
 80014b6:	701a      	strb	r2, [r3, #0]
	  lcd_display(0b100);
 80014b8:	f000 f8b0 	bl	800161c <lcd_display>
	lcd_line( pos_stat+1 );
 80014bc:	7820      	ldrb	r0, [r4, #0]
}
 80014be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_line( pos_stat+1 );
 80014c2:	3001      	adds	r0, #1
 80014c4:	f000 b896 	b.w	80015f4 <lcd_line>
	if( pos_stat == 1 )
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <get_ANSTRA_target+0x50>
	  target_longitude = ret;
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <get_ANSTRA_target+0x6c>)
 80014ce:	e7dc      	b.n	800148a <get_ANSTRA_target+0xa>
	if( pos_stat == 2 )
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d1dc      	bne.n	800148e <get_ANSTRA_target+0xe>
	  target_height= ret;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <get_ANSTRA_target+0x70>)
 80014d6:	e7d8      	b.n	800148a <get_ANSTRA_target+0xa>
 80014d8:	20000394 	.word	0x20000394
 80014dc:	200005d8 	.word	0x200005d8
 80014e0:	200005d0 	.word	0x200005d0
 80014e4:	200005f0 	.word	0x200005f0
 80014e8:	20000395 	.word	0x20000395
 80014ec:	200005e0 	.word	0x200005e0
 80014f0:	20000608 	.word	0x20000608

080014f4 <init_keyboard>:
// klawiatura
int K[8];
GPIO_TypeDef* KI;
GPIO_TypeDef* KO;

void init_keyboard(void){
 80014f4:	b510      	push	{r4, lr}
	K[0] = K1_Pin;
	K[1] = K2_Pin;
 80014f6:	2210      	movs	r2, #16
 80014f8:	2120      	movs	r1, #32
	K[2] = K3_Pin;
	K[3] = K4_Pin;
 80014fa:	2040      	movs	r0, #64	; 0x40
 80014fc:	2480      	movs	r4, #128	; 0x80
	K[0] = K1_Pin;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <init_keyboard+0x2c>)
	K[1] = K2_Pin;
 8001500:	e9c3 2100 	strd	r2, r1, [r3]
	K[4] = K5_Pin;
	K[5] = K6_Pin;
	K[6] = K7_Pin;
	K[7] = K8_Pin;
 8001504:	e9c3 1206 	strd	r1, r2, [r3, #24]
	K[3] = K4_Pin;
 8001508:	e9c3 0402 	strd	r0, r4, [r3, #8]

	KI = K1_GPIO_Port;
 800150c:	4a05      	ldr	r2, [pc, #20]	; (8001524 <init_keyboard+0x30>)
	K[5] = K6_Pin;
 800150e:	e9c3 4004 	strd	r4, r0, [r3, #16]
	KI = K1_GPIO_Port;
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <init_keyboard+0x34>)
 8001514:	601a      	str	r2, [r3, #0]
	KO = K5_GPIO_Port;
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <init_keyboard+0x38>)
 8001518:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800151c:	601a      	str	r2, [r3, #0]
}
 800151e:	bd10      	pop	{r4, pc}
 8001520:	20000610 	.word	0x20000610
 8001524:	40010800 	.word	0x40010800
 8001528:	20000634 	.word	0x20000634
 800152c:	20000630 	.word	0x20000630

08001530 <keyboard>:

// Odczytaj numer przycisku klikniętego na klawiaturze (odczytany tylko o najniższym numerze)
// Numerowanie od lewego górnego rogu, od 0
int keyboard(void){
 8001530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(int i=4; i<8; i++){
		HAL_GPIO_TogglePin(KO, K[i]);
 8001534:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8001598 <keyboard+0x68>
	for(int i=4; i<8; i++){
 8001538:	2404      	movs	r4, #4
 800153a:	4647      	mov	r7, r8
		HAL_GPIO_TogglePin(KO, K[i]);
 800153c:	4e15      	ldr	r6, [pc, #84]	; (8001594 <keyboard+0x64>)
 800153e:	f838 1024 	ldrh.w	r1, [r8, r4, lsl #2]
 8001542:	6830      	ldr	r0, [r6, #0]
 8001544:	f000 fe9b 	bl	800227e <HAL_GPIO_TogglePin>
		for(int j=0; j<4; j++)
 8001548:	2500      	movs	r5, #0
			if( HAL_GPIO_ReadPin(KI, K[j]) ){
 800154a:	f8df b050 	ldr.w	fp, [pc, #80]	; 800159c <keyboard+0x6c>
 800154e:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8001552:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
 8001556:	f8db 0000 	ldr.w	r0, [fp]
 800155a:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800155e:	f000 fe83 	bl	8002268 <HAL_GPIO_ReadPin>
 8001562:	b140      	cbz	r0, 8001576 <keyboard+0x46>
				HAL_GPIO_TogglePin(KO, K[i]);
 8001564:	6830      	ldr	r0, [r6, #0]
 8001566:	f837 1024 	ldrh.w	r1, [r7, r4, lsl #2]
 800156a:	f000 fe88 	bl	800227e <HAL_GPIO_TogglePin>
				return (i-4)+j*4;
 800156e:	1f20      	subs	r0, r4, #4
 8001570:	4450      	add	r0, sl
			}
		HAL_GPIO_TogglePin(KO, K[i]);
	}
	return -1;
}
 8001572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(int j=0; j<4; j++)
 8001576:	3501      	adds	r5, #1
 8001578:	2d04      	cmp	r5, #4
 800157a:	d1ea      	bne.n	8001552 <keyboard+0x22>
		HAL_GPIO_TogglePin(KO, K[i]);
 800157c:	f837 1009 	ldrh.w	r1, [r7, r9]
 8001580:	6830      	ldr	r0, [r6, #0]
	for(int i=4; i<8; i++){
 8001582:	3401      	adds	r4, #1
		HAL_GPIO_TogglePin(KO, K[i]);
 8001584:	f000 fe7b 	bl	800227e <HAL_GPIO_TogglePin>
	for(int i=4; i<8; i++){
 8001588:	2c08      	cmp	r4, #8
 800158a:	d1d8      	bne.n	800153e <keyboard+0xe>
	return -1;
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	e7ef      	b.n	8001572 <keyboard+0x42>
 8001592:	bf00      	nop
 8001594:	20000630 	.word	0x20000630
 8001598:	20000610 	.word	0x20000610
 800159c:	20000634 	.word	0x20000634

080015a0 <lcd_send_cmd>:
char text[21];

extern I2C_HandleTypeDef hi2c1;

// lcd library
int lcd_send_cmd (char cmd){
 80015a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80015a2:	4604      	mov	r4, r0
	HAL_Delay(1);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f000 fc99 	bl	8001edc <HAL_Delay>
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80015aa:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 80015ae:	0124      	lsls	r4, r4, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0 1100
 80015b0:	f043 020c 	orr.w	r2, r3, #12
	data_l = ((cmd<<4)&0xf0);
 80015b4:	b2e4      	uxtb	r4, r4
	data_t[1] = data_u|0x08;  //en=0, rs=0 1000
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80015be:	f044 030c 	orr.w	r3, r4, #12
 80015c2:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x08;  //en=0, rs=0
	return HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 80015c6:	2364      	movs	r3, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0 1100
 80015c8:	f88d 200c 	strb.w	r2, [sp, #12]
	return HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 80015cc:	9300      	str	r3, [sp, #0]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80015ce:	f044 0408 	orr.w	r4, r4, #8
	return HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 80015d2:	2304      	movs	r3, #4
 80015d4:	aa03      	add	r2, sp, #12
 80015d6:	217e      	movs	r1, #126	; 0x7e
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <lcd_send_cmd+0x48>)
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80015da:	f88d 400f 	strb.w	r4, [sp, #15]
	return HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 80015de:	f000 ffd3 	bl	8002588 <HAL_I2C_Master_Transmit>
}
 80015e2:	b004      	add	sp, #16
 80015e4:	bd10      	pop	{r4, pc}
 80015e6:	bf00      	nop
 80015e8:	20000694 	.word	0x20000694

080015ec <lcd_clear>:
int lcd_checkCon(void){
	return HAL_I2C_IsDeviceReady(&hi2c1, SLAVE_ADDRESS_LCD, 1 , 10);
}

void lcd_clear(){
	lcd_send_cmd(0x01);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff bfd7 	b.w	80015a0 <lcd_send_cmd>
	...

080015f4 <lcd_line>:
}

void lcd_line(int n){
	n %= 4;
 80015f4:	4243      	negs	r3, r0
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	f000 0003 	and.w	r0, r0, #3
 80015fe:	bf58      	it	pl
 8001600:	4258      	negpl	r0, r3
 8001602:	3801      	subs	r0, #1
 8001604:	2802      	cmp	r0, #2
	int addr;
	switch(n){
 8001606:	bf8e      	itee	hi
 8001608:	2000      	movhi	r0, #0
 800160a:	4b03      	ldrls	r3, [pc, #12]	; (8001618 <lcd_line+0x24>)
 800160c:	5618      	ldrsbls	r0, [r3, r0]
		  break;
		case 3: addr = 0x54;
			break;
		default:addr = 0x00;
	}
	lcd_send_cmd(0x80+addr);
 800160e:	3880      	subs	r0, #128	; 0x80
 8001610:	b2c0      	uxtb	r0, r0
 8001612:	f7ff bfc5 	b.w	80015a0 <lcd_send_cmd>
 8001616:	bf00      	nop
 8001618:	0800b814 	.word	0x0800b814

0800161c <lcd_display>:
// 3bit: D,C,B
//D - display on/off
//C - cursor on/off
//B - cursor blink on/off
void lcd_display( int set ){
	lcd_send_cmd(0x08+set);
 800161c:	3008      	adds	r0, #8
 800161e:	b2c0      	uxtb	r0, r0
 8001620:	f7ff bfbe 	b.w	80015a0 <lcd_send_cmd>

08001624 <lcd_send_data>:
}

int  lcd_send_data (char data)
{
 8001624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001626:	4604      	mov	r4, r0
	HAL_Delay(1);
 8001628:	2001      	movs	r0, #1
 800162a:	f000 fc57 	bl	8001edc <HAL_Delay>
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800162e:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8001632:	0124      	lsls	r4, r4, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001634:	f043 020d 	orr.w	r2, r3, #13
	data_l = ((data<<4)&0xf0);
 8001638:	b2e4      	uxtb	r4, r4
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800163a:	f043 0309 	orr.w	r3, r3, #9
 800163e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001642:	f044 030d 	orr.w	r3, r4, #13
 8001646:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=1
	return HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 800164a:	2364      	movs	r3, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800164c:	f88d 200c 	strb.w	r2, [sp, #12]
	return HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 8001650:	9300      	str	r3, [sp, #0]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001652:	f044 0409 	orr.w	r4, r4, #9
	return HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 8001656:	2304      	movs	r3, #4
 8001658:	aa03      	add	r2, sp, #12
 800165a:	217e      	movs	r1, #126	; 0x7e
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <lcd_send_data+0x48>)
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800165e:	f88d 400f 	strb.w	r4, [sp, #15]
	return HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 8001662:	f000 ff91 	bl	8002588 <HAL_I2C_Master_Transmit>
}
 8001666:	b004      	add	sp, #16
 8001668:	bd10      	pop	{r4, pc}
 800166a:	bf00      	nop
 800166c:	20000694 	.word	0x20000694

08001670 <lcd_init>:

void lcd_init (void)
{
 8001670:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001678:	4815      	ldr	r0, [pc, #84]	; (80016d0 <lcd_init+0x60>)
 800167a:	f000 fdfb 	bl	8002274 <HAL_GPIO_WritePin>
//		}
//	}
//	blink();
//	return;

	if( HAL_I2C_IsDeviceReady(&hi2c1, SLAVE_ADDRESS_LCD, 1, 100 ) ){
 800167e:	2364      	movs	r3, #100	; 0x64
 8001680:	2201      	movs	r2, #1
 8001682:	217e      	movs	r1, #126	; 0x7e
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <lcd_init+0x64>)
 8001686:	f001 f853 	bl	8002730 <HAL_I2C_IsDeviceReady>
 800168a:	b138      	cbz	r0, 800169c <lcd_init+0x2c>
		HAL_GPIO_TogglePin(Test_LED_GPIO_Port, Test_LED_Pin);
 800168c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001690:	480f      	ldr	r0, [pc, #60]	; (80016d0 <lcd_init+0x60>)
			while( tmp-- > 0 ) blink();
			HAL_GPIO_TogglePin(Test_LED_GPIO_Port, Test_LED_Pin);
			return;
		}
	}
}
 8001692:	b002      	add	sp, #8
 8001694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_TogglePin(Test_LED_GPIO_Port, Test_LED_Pin);
 8001698:	f000 bdf1 	b.w	800227e <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 800169c:	20c8      	movs	r0, #200	; 0xc8
 800169e:	f000 fc1d 	bl	8001edc <HAL_Delay>
	uint8_t commands[] = {0x30,0x20,0x28,0x08,0x01,0x06,0x0F		,0x00};
 80016a2:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <lcd_init+0x68>)
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <lcd_init+0x6c>)
 80016a6:	f10d 34ff 	add.w	r4, sp, #4294967295
 80016aa:	e9cd 2300 	strd	r2, r3, [sp]
	while( commands[i] > 0 ){
 80016ae:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80016b2:	b908      	cbnz	r0, 80016b8 <lcd_init+0x48>
}
 80016b4:	b002      	add	sp, #8
 80016b6:	bd10      	pop	{r4, pc}
		if ( (tmp = lcd_send_cmd (commands[i++])) )
 80016b8:	f7ff ff72 	bl	80015a0 <lcd_send_cmd>
 80016bc:	2800      	cmp	r0, #0
 80016be:	d0f6      	beq.n	80016ae <lcd_init+0x3e>
 80016c0:	4604      	mov	r4, r0
			while( tmp-- > 0 ) blink();
 80016c2:	2c00      	cmp	r4, #0
 80016c4:	dde2      	ble.n	800168c <lcd_init+0x1c>
 80016c6:	f000 fb21 	bl	8001d0c <blink>
 80016ca:	3c01      	subs	r4, #1
 80016cc:	e7f9      	b.n	80016c2 <lcd_init+0x52>
 80016ce:	bf00      	nop
 80016d0:	40011000 	.word	0x40011000
 80016d4:	20000694 	.word	0x20000694
 80016d8:	08282030 	.word	0x08282030
 80016dc:	000f0601 	.word	0x000f0601

080016e0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80016e0:	b510      	push	{r4, lr}
 80016e2:	1e44      	subs	r4, r0, #1
	while (*str) lcd_send_data (*str++);
 80016e4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80016e8:	b900      	cbnz	r0, 80016ec <lcd_send_string+0xc>
}
 80016ea:	bd10      	pop	{r4, pc}
	while (*str) lcd_send_data (*str++);
 80016ec:	f7ff ff9a 	bl	8001624 <lcd_send_data>
 80016f0:	e7f8      	b.n	80016e4 <lcd_send_string+0x4>
	...

080016f4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016f4:	b538      	push	{r3, r4, r5, lr}
 80016f6:	4604      	mov	r4, r0
	blink();
 80016f8:	f000 fb08 	bl	8001d0c <blink>
	if(huart->Instance==USART3){
 80016fc:	6822      	ldr	r2, [r4, #0]
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_UART_RxCpltCallback+0x64>)
 8001700:	429a      	cmp	r2, r3
 8001702:	d127      	bne.n	8001754 <HAL_UART_RxCpltCallback+0x60>

		if((RxData[RxDataIndex] == (int)'#') && (RxData[0] == (int)'$')){
 8001704:	4c15      	ldr	r4, [pc, #84]	; (800175c <HAL_UART_RxCpltCallback+0x68>)
 8001706:	4d16      	ldr	r5, [pc, #88]	; (8001760 <HAL_UART_RxCpltCallback+0x6c>)
 8001708:	7823      	ldrb	r3, [r4, #0]
 800170a:	5cea      	ldrb	r2, [r5, r3]
 800170c:	2a23      	cmp	r2, #35	; 0x23
 800170e:	d11e      	bne.n	800174e <HAL_UART_RxCpltCallback+0x5a>
 8001710:	782a      	ldrb	r2, [r5, #0]
 8001712:	2a24      	cmp	r2, #36	; 0x24
 8001714:	d11b      	bne.n	800174e <HAL_UART_RxCpltCallback+0x5a>
			RxData[RxDataIndex] = 0;
 8001716:	2200      	movs	r2, #0
			RxDataIndex=0;
			sprintf((char*)USB_TxData, "odebrano: %s\r\n", (char*)(RxData+1));
 8001718:	4912      	ldr	r1, [pc, #72]	; (8001764 <HAL_UART_RxCpltCallback+0x70>)
			RxData[RxDataIndex] = 0;
 800171a:	54ea      	strb	r2, [r5, r3]
			RxDataIndex=0;
 800171c:	7022      	strb	r2, [r4, #0]
			sprintf((char*)USB_TxData, "odebrano: %s\r\n", (char*)(RxData+1));
 800171e:	4812      	ldr	r0, [pc, #72]	; (8001768 <HAL_UART_RxCpltCallback+0x74>)
 8001720:	1c6a      	adds	r2, r5, #1
 8001722:	f005 fb43 	bl	8006dac <siprintf>
			CDC_Transmit_FS(USB_TxData, strlen((char*)USB_TxData));
 8001726:	4810      	ldr	r0, [pc, #64]	; (8001768 <HAL_UART_RxCpltCallback+0x74>)
 8001728:	f7fe fd12 	bl	8000150 <strlen>
 800172c:	b281      	uxth	r1, r0
 800172e:	480e      	ldr	r0, [pc, #56]	; (8001768 <HAL_UART_RxCpltCallback+0x74>)
 8001730:	f004 fa64 	bl	8005bfc <CDC_Transmit_FS>
		}
		else{
			RxDataIndex++;
		}
		if(RxDataIndex>=100){RxDataIndex=0;}
 8001734:	7823      	ldrb	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart3, &RxData[RxDataIndex], 1);
 8001736:	2201      	movs	r2, #1
		if(RxDataIndex>=100){RxDataIndex=0;}
 8001738:	2b63      	cmp	r3, #99	; 0x63
 800173a:	bf84      	itt	hi
 800173c:	2300      	movhi	r3, #0
 800173e:	7023      	strbhi	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart3, &RxData[RxDataIndex], 1);
 8001740:	7821      	ldrb	r1, [r4, #0]
 8001742:	480a      	ldr	r0, [pc, #40]	; (800176c <HAL_UART_RxCpltCallback+0x78>)
 8001744:	4429      	add	r1, r5
	}
}
 8001746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(&huart3, &RxData[RxDataIndex], 1);
 800174a:	f002 bed0 	b.w	80044ee <HAL_UART_Receive_IT>
			RxDataIndex++;
 800174e:	3301      	adds	r3, #1
 8001750:	7023      	strb	r3, [r4, #0]
 8001752:	e7ef      	b.n	8001734 <HAL_UART_RxCpltCallback+0x40>
}
 8001754:	bd38      	pop	{r3, r4, r5, pc}
 8001756:	bf00      	nop
 8001758:	40004800 	.word	0x40004800
 800175c:	20000396 	.word	0x20000396
 8001760:	20000730 	.word	0x20000730
 8001764:	0800b817 	.word	0x0800b817
 8001768:	20000795 	.word	0x20000795
 800176c:	20000650 	.word	0x20000650

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001772:	2414      	movs	r4, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001774:	2510      	movs	r5, #16
{
 8001776:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001778:	4622      	mov	r2, r4
 800177a:	2100      	movs	r1, #0
 800177c:	a80c      	add	r0, sp, #48	; 0x30
 800177e:	f004 fcd9 	bl	8006134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001782:	4622      	mov	r2, r4
 8001784:	eb0d 0004 	add.w	r0, sp, r4
 8001788:	2100      	movs	r1, #0
 800178a:	f004 fcd3 	bl	8006134 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800178e:	462a      	mov	r2, r5
 8001790:	2100      	movs	r1, #0
 8001792:	a801      	add	r0, sp, #4
 8001794:	f004 fcce 	bl	8006134 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001798:	2401      	movs	r4, #1
 800179a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179e:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a0:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a4:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80017a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80017ae:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b2:	f001 fee1 	bl	8003578 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017bc:	e9cd 3605 	strd	r3, r6, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c0:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017c2:	4621      	mov	r1, r4
 80017c4:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c6:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ca:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017cc:	f002 f8ac 	bl	8003928 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80017d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017d6:	9501      	str	r5, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80017d8:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017da:	f002 f961 	bl	8003aa0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80017de:	b014      	add	sp, #80	; 0x50
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080017e4 <main>:
{
 80017e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017e8:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 80017ea:	f000 fb53 	bl	8001e94 <HAL_Init>
  SystemClock_Config();
 80017ee:	f7ff ffbf 	bl	8001770 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	2210      	movs	r2, #16
 80017f4:	2100      	movs	r1, #0
 80017f6:	a80b      	add	r0, sp, #44	; 0x2c
 80017f8:	f004 fc9c 	bl	8006134 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fc:	4ba5      	ldr	r3, [pc, #660]	; (8001a94 <main+0x2b0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, GPIO_PIN_RESET);
 80017fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, GPIO_PIN_RESET);
 8001804:	48a4      	ldr	r0, [pc, #656]	; (8001a98 <main+0x2b4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	f042 0210 	orr.w	r2, r2, #16
 800180a:	619a      	str	r2, [r3, #24]
 800180c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : Test_LED_Pin RF_RESET_Pin */
  GPIO_InitStruct.Pin = Test_LED_Pin|RF_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001810:	f002 0210 	and.w	r2, r2, #16
 8001814:	9201      	str	r2, [sp, #4]
 8001816:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001818:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181c:	f042 0220 	orr.w	r2, r2, #32
 8001820:	619a      	str	r2, [r3, #24]
 8001822:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	f002 0220 	and.w	r2, r2, #32
 800182a:	9202      	str	r2, [sp, #8]
 800182c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : RF_STATUS_Pin */
  GPIO_InitStruct.Pin = RF_STATUS_Pin;
 8001830:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	f042 0204 	orr.w	r2, r2, #4
 8001838:	619a      	str	r2, [r3, #24]
 800183a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : K1_Pin K2_Pin K3_Pin K4_Pin */
  GPIO_InitStruct.Pin = K1_Pin|K2_Pin|K3_Pin|K4_Pin;
 800183c:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	f002 0204 	and.w	r2, r2, #4
 8001844:	9203      	str	r2, [sp, #12]
 8001846:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001848:	699a      	ldr	r2, [r3, #24]
  int tmp = -1;
 800184a:	f04f 39ff 	mov.w	r9, #4294967295
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	f042 0208 	orr.w	r2, r2, #8
 8001852:	619a      	str	r2, [r3, #24]
 8001854:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	9304      	str	r3, [sp, #16]
 800185e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, GPIO_PIN_RESET);
 8001860:	f000 fd08 	bl	8002274 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_RESET_GPIO_Port, RF_RESET_Pin, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186a:	488b      	ldr	r0, [pc, #556]	; (8001a98 <main+0x2b4>)
 800186c:	f000 fd02 	bl	8002274 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_CONFIG_GPIO_Port, RF_CONFIG_Pin, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	488a      	ldr	r0, [pc, #552]	; (8001a9c <main+0x2b8>)
 8001874:	4611      	mov	r1, r2
 8001876:	f000 fcfd 	bl	8002274 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SLEEP_GPIO_Port, RF_SLEEP_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2102      	movs	r1, #2
 800187e:	4887      	ldr	r0, [pc, #540]	; (8001a9c <main+0x2b8>)
 8001880:	f000 fcf8 	bl	8002274 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, K8_Pin|K7_Pin|K6_Pin|K5_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	21f0      	movs	r1, #240	; 0xf0
 8001888:	4885      	ldr	r0, [pc, #532]	; (8001aa0 <main+0x2bc>)
 800188a:	f000 fcf3 	bl	8002274 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	a90b      	add	r1, sp, #44	; 0x2c
 8001894:	4880      	ldr	r0, [pc, #512]	; (8001a98 <main+0x2b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	f000 fc03 	bl	80020a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(RF_STATUS_GPIO_Port, &GPIO_InitStruct);
 80018a2:	a90b      	add	r1, sp, #44	; 0x2c
 80018a4:	487c      	ldr	r0, [pc, #496]	; (8001a98 <main+0x2b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RF_STATUS_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f000 fbfc 	bl	80020a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RF_CONFIG_Pin|RF_SLEEP_Pin;
 80018b0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	a90b      	add	r1, sp, #44	; 0x2c
 80018b4:	4879      	ldr	r0, [pc, #484]	; (8001a9c <main+0x2b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f000 fbf3 	bl	80020a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	a90b      	add	r1, sp, #44	; 0x2c
 80018c4:	4875      	ldr	r0, [pc, #468]	; (8001a9c <main+0x2b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	e9cd 840b 	strd	r8, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ca:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f000 fbec 	bl	80020a8 <HAL_GPIO_Init>
  /*Configure GPIO pins : K8_Pin K7_Pin K6_Pin K5_Pin */
  GPIO_InitStruct.Pin = K8_Pin|K7_Pin|K6_Pin|K5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	a90b      	add	r1, sp, #44	; 0x2c
 80018d2:	4873      	ldr	r0, [pc, #460]	; (8001aa0 <main+0x2bc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	e9cd 860b 	strd	r8, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f000 fbe4 	bl	80020a8 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 80018e0:	f004 f94a 	bl	8005b78 <MX_USB_DEVICE_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e4:	2210      	movs	r2, #16
 80018e6:	4621      	mov	r1, r4
 80018e8:	a807      	add	r0, sp, #28
 80018ea:	f004 fc23 	bl	8006134 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	4621      	mov	r1, r4
 80018f0:	221c      	movs	r2, #28
 80018f2:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f8:	f004 fc1c 	bl	8006134 <memset>
  htim3.Init.Prescaler = 48-1;
 80018fc:	232f      	movs	r3, #47	; 0x2f
  htim3.Instance = TIM3;
 80018fe:	4d69      	ldr	r5, [pc, #420]	; (8001aa4 <main+0x2c0>)
  htim3.Init.Prescaler = 48-1;
 8001900:	4a69      	ldr	r2, [pc, #420]	; (8001aa8 <main+0x2c4>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001902:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 48-1;
 8001904:	e9c5 2300 	strd	r2, r3, [r5]
  htim3.Init.Period = 20000-1;
 8001908:	f644 631f 	movw	r3, #19999	; 0x4e1f
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190e:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001914:	f002 f9ea 	bl	8003cec <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800191c:	a907      	add	r1, sp, #28
 800191e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001922:	f002 face 	bl	8003ec2 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001926:	4628      	mov	r0, r5
 8001928:	f002 fa0c 	bl	8003d44 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800192c:	a905      	add	r1, sp, #20
 800192e:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001934:	f002 fbb8 	bl	80040a8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001938:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800193a:	2208      	movs	r2, #8
 800193c:	a90b      	add	r1, sp, #44	; 0x2c
 800193e:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 8001940:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001944:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001946:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001948:	f002 fa54 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800194c:	220c      	movs	r2, #12
 800194e:	a90b      	add	r1, sp, #44	; 0x2c
 8001950:	4628      	mov	r0, r5
 8001952:	f002 fa4f 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001956:	4628      	mov	r0, r5
 8001958:	f000 f936 	bl	8001bc8 <HAL_TIM_MspPostInit>
  hi2c1.Instance = I2C1;
 800195c:	4853      	ldr	r0, [pc, #332]	; (8001aac <main+0x2c8>)
  hi2c1.Init.ClockSpeed = 100000;
 800195e:	4954      	ldr	r1, [pc, #336]	; (8001ab0 <main+0x2cc>)
 8001960:	4b54      	ldr	r3, [pc, #336]	; (8001ab4 <main+0x2d0>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001962:	e9c0 7404 	strd	r7, r4, [r0, #16]
  hi2c1.Init.ClockSpeed = 100000;
 8001966:	e9c0 1300 	strd	r1, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
 800196a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800196e:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001972:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001974:	f000 fd5c 	bl	8002430 <HAL_I2C_Init>
  huart3.Init.BaudRate = 9600;
 8001978:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart3.Instance = USART3;
 800197c:	4d4e      	ldr	r5, [pc, #312]	; (8001ab8 <main+0x2d4>)
  huart3.Init.BaudRate = 9600;
 800197e:	484f      	ldr	r0, [pc, #316]	; (8001abc <main+0x2d8>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001980:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.BaudRate = 9600;
 8001984:	e9c5 0300 	strd	r0, r3, [r5]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001988:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800198a:	4628      	mov	r0, r5
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198c:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001990:	612c      	str	r4, [r5, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001992:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001994:	f002 fc0a 	bl	80041ac <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart3, &RxData[RxDataIndex], 1);
 8001998:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <main+0x2dc>)
 800199a:	494a      	ldr	r1, [pc, #296]	; (8001ac4 <main+0x2e0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4632      	mov	r2, r6
 80019a0:	4419      	add	r1, r3
 80019a2:	4628      	mov	r0, r5
 80019a4:	f002 fda3 	bl	80044ee <HAL_UART_Receive_IT>
  init_keyboard();
 80019a8:	f7ff fda4 	bl	80014f4 <init_keyboard>
  init_PWM();
 80019ac:	f000 f9c4 	bl	8001d38 <init_PWM>
  lcd_init();
 80019b0:	f7ff fe5e 	bl	8001670 <lcd_init>
  HAL_Delay(100);
 80019b4:	2064      	movs	r0, #100	; 0x64
 80019b6:	f000 fa91 	bl	8001edc <HAL_Delay>
  ha = 90; da = 0;
 80019ba:	235a      	movs	r3, #90	; 0x5a
 80019bc:	4e42      	ldr	r6, [pc, #264]	; (8001ac8 <main+0x2e4>)
 80019be:	4f43      	ldr	r7, [pc, #268]	; (8001acc <main+0x2e8>)
	  if( change ){
 80019c0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8001adc <main+0x2f8>
  ha = 90; da = 0;
 80019c4:	6033      	str	r3, [r6, #0]
 80019c6:	603c      	str	r4, [r7, #0]
 80019c8:	46c2      	mov	sl, r8
  set_ANSTRA_pos();
 80019ca:	f7ff fba1 	bl	8001110 <set_ANSTRA_pos>
		  if( status == 1 )
 80019ce:	4d40      	ldr	r5, [pc, #256]	; (8001ad0 <main+0x2ec>)
	  if( change ){
 80019d0:	f898 3000 	ldrb.w	r3, [r8]
 80019d4:	b16b      	cbz	r3, 80019f2 <main+0x20e>
		  height_angle(ha);
 80019d6:	6830      	ldr	r0, [r6, #0]
 80019d8:	f7ff fb44 	bl	8001064 <height_angle>
		  direction_angle(da);
 80019dc:	6838      	ldr	r0, [r7, #0]
 80019de:	f7ff fb59 	bl	8001094 <direction_angle>
		  if( status == 1 )
 80019e2:	782b      	ldrb	r3, [r5, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <main+0x208>
			  display_angle();
 80019e8:	f7ff fb6c 	bl	80010c4 <display_angle>
		  change = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f88a 3000 	strb.w	r3, [sl]
	  if( change_t ){
 80019f2:	4c38      	ldr	r4, [pc, #224]	; (8001ad4 <main+0x2f0>)
 80019f4:	7823      	ldrb	r3, [r4, #0]
 80019f6:	b173      	cbz	r3, 8001a16 <main+0x232>
		  	  target_to_angle();
 80019f8:	f7ff fc56 	bl	80012a8 <target_to_angle>
	  		  height_angle(ha);
 80019fc:	6830      	ldr	r0, [r6, #0]
 80019fe:	f7ff fb31 	bl	8001064 <height_angle>
	  		  direction_angle(da);
 8001a02:	6838      	ldr	r0, [r7, #0]
 8001a04:	f7ff fb46 	bl	8001094 <direction_angle>
	  		  if( status == 1 )
 8001a08:	782b      	ldrb	r3, [r5, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <main+0x22e>
	  			  display_angle();
 8001a0e:	f7ff fb59 	bl	80010c4 <display_angle>
	  		  change_t = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	7023      	strb	r3, [r4, #0]
	  k = keyboard();
 8001a16:	f7ff fd8b 	bl	8001530 <keyboard>
	  if( k >= 0 && tmp == -1 ){
 8001a1a:	1e04      	subs	r4, r0, #0
 8001a1c:	db14      	blt.n	8001a48 <main+0x264>
 8001a1e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001a22:	d111      	bne.n	8001a48 <main+0x264>
		  blink();
 8001a24:	f000 f972 	bl	8001d0c <blink>
		  if(k == 11){CDC_Transmit_FS((uint8_t*)test, strlen(test));}
 8001a28:	2c0b      	cmp	r4, #11
 8001a2a:	d112      	bne.n	8001a52 <main+0x26e>
 8001a2c:	482a      	ldr	r0, [pc, #168]	; (8001ad8 <main+0x2f4>)
 8001a2e:	f7fe fb8f 	bl	8000150 <strlen>
 8001a32:	b281      	uxth	r1, r0
 8001a34:	4828      	ldr	r0, [pc, #160]	; (8001ad8 <main+0x2f4>)
 8001a36:	f004 f8e1 	bl	8005bfc <CDC_Transmit_FS>
		  if( status == 1 ){
 8001a3a:	782b      	ldrb	r3, [r5, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d124      	bne.n	8001a8a <main+0x2a6>
			  if( k == 3 ){
 8001a40:	2c03      	cmp	r4, #3
 8001a42:	d11d      	bne.n	8001a80 <main+0x29c>
				  set_ANSTRA_angle();
 8001a44:	f7ff fb84 	bl	8001150 <set_ANSTRA_angle>
	  HAL_Delay(100);
 8001a48:	2064      	movs	r0, #100	; 0x64
 8001a4a:	f000 fa47 	bl	8001edc <HAL_Delay>
	  k = keyboard();
 8001a4e:	46a1      	mov	r9, r4
	  if( change ){
 8001a50:	e7be      	b.n	80019d0 <main+0x1ec>
		  if( k == 15 ){
 8001a52:	2c0f      	cmp	r4, #15
 8001a54:	d1f1      	bne.n	8001a3a <main+0x256>
			  if( status == 0 )
 8001a56:	782b      	ldrb	r3, [r5, #0]
 8001a58:	b91b      	cbnz	r3, 8001a62 <main+0x27e>
				  get_ANSTRA_pos( get_input() );
 8001a5a:	f000 f9b5 	bl	8001dc8 <get_input>
 8001a5e:	f7ff fbb7 	bl	80011d0 <get_ANSTRA_pos>
			  if( status == 2 )
 8001a62:	782b      	ldrb	r3, [r5, #0]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d103      	bne.n	8001a70 <main+0x28c>
				  get_ANSTRA_angle( get_input() );
 8001a68:	f000 f9ae 	bl	8001dc8 <get_input>
 8001a6c:	f7ff fbe8 	bl	8001240 <get_ANSTRA_angle>
			  if( status == 3 )
 8001a70:	782b      	ldrb	r3, [r5, #0]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d1e1      	bne.n	8001a3a <main+0x256>
				  get_ANSTRA_target( get_input() );
 8001a76:	f000 f9a7 	bl	8001dc8 <get_input>
 8001a7a:	f7ff fd01 	bl	8001480 <get_ANSTRA_target>
 8001a7e:	e7dc      	b.n	8001a3a <main+0x256>
			  if( k == 7 ){
 8001a80:	2c07      	cmp	r4, #7
 8001a82:	d1e1      	bne.n	8001a48 <main+0x264>
				  set_ANSTRA_target();
 8001a84:	f7ff fb84 	bl	8001190 <set_ANSTRA_target>
 8001a88:	e7de      	b.n	8001a48 <main+0x264>
			  save_input(k);
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f000 f96c 	bl	8001d68 <save_input>
 8001a90:	e7da      	b.n	8001a48 <main+0x264>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40010800 	.word	0x40010800
 8001aa0:	40010c00 	.word	0x40010c00
 8001aa4:	200006e8 	.word	0x200006e8
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	20000694 	.word	0x20000694
 8001ab0:	40005400 	.word	0x40005400
 8001ab4:	000186a0 	.word	0x000186a0
 8001ab8:	20000650 	.word	0x20000650
 8001abc:	40004800 	.word	0x40004800
 8001ac0:	20000396 	.word	0x20000396
 8001ac4:	20000730 	.word	0x20000730
 8001ac8:	200005d0 	.word	0x200005d0
 8001acc:	200005f0 	.word	0x200005f0
 8001ad0:	20000395 	.word	0x20000395
 8001ad4:	20000398 	.word	0x20000398
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	20000397 	.word	0x20000397

08001ae0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_MspInit+0x3c>)
{
 8001ae6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae8:	699a      	ldr	r2, [r3, #24]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	619a      	str	r2, [r3, #24]
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	f002 0201 	and.w	r2, r2, #1
 8001af6:	9200      	str	r2, [sp, #0]
 8001af8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	69da      	ldr	r2, [r3, #28]
 8001afc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b00:	61da      	str	r2, [r3, #28]
 8001b02:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b0e:	6853      	ldr	r3, [r2, #4]
 8001b10:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1a:	b002      	add	sp, #8
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000

08001b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b28:	b510      	push	{r4, lr}
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	2210      	movs	r2, #16
 8001b30:	2100      	movs	r1, #0
 8001b32:	a802      	add	r0, sp, #8
 8001b34:	f004 fafe 	bl	8006134 <memset>
  if(hi2c->Instance==I2C1)
 8001b38:	6822      	ldr	r2, [r4, #0]
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_I2C_MspInit+0x68>)
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d124      	bne.n	8001b8a <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	4c14      	ldr	r4, [pc, #80]	; (8001b94 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b42:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	61a3      	str	r3, [r4, #24]
 8001b50:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	4811      	ldr	r0, [pc, #68]	; (8001b98 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5c:	2312      	movs	r3, #18
 8001b5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f000 fa9f 	bl	80020a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_I2C_MspInit+0x74>)
 8001b6c:	6853      	ldr	r3, [r2, #4]
 8001b6e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b78:	69e3      	ldr	r3, [r4, #28]
 8001b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b7e:	61e3      	str	r3, [r4, #28]
 8001b80:	69e3      	ldr	r3, [r4, #28]
 8001b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b8a:	b006      	add	sp, #24
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	bf00      	nop
 8001b90:	40005400 	.word	0x40005400
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001ba0:	6802      	ldr	r2, [r0, #0]
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_TIM_Base_MspInit+0x24>)
{
 8001ba4:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001baa:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001bae:	69da      	ldr	r2, [r3, #28]
 8001bb0:	f042 0202 	orr.w	r2, r2, #2
 8001bb4:	61da      	str	r2, [r3, #28]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bc0:	b002      	add	sp, #8
 8001bc2:	4770      	bx	lr
 8001bc4:	40000400 	.word	0x40000400

08001bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc8:	b510      	push	{r4, lr}
 8001bca:	4604      	mov	r4, r0
 8001bcc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	2210      	movs	r2, #16
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	a802      	add	r0, sp, #8
 8001bd4:	f004 faae 	bl	8006134 <memset>
  if(htim->Instance==TIM3)
 8001bd8:	6822      	ldr	r2, [r4, #0]
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_TIM_MspPostInit+0x44>)
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d113      	bne.n	8001c08 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001be4:	699a      	ldr	r2, [r3, #24]
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	f042 0208 	orr.w	r2, r2, #8
 8001bec:	619a      	str	r2, [r3, #24]
 8001bee:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f000 fa50 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c08:	b006      	add	sp, #24
 8001c0a:	bd10      	pop	{r4, pc}
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40010c00 	.word	0x40010c00

08001c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c14:	b510      	push	{r4, lr}
 8001c16:	4604      	mov	r4, r0
 8001c18:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	a802      	add	r0, sp, #8
 8001c20:	f004 fa88 	bl	8006134 <memset>
  if(huart->Instance==USART3)
 8001c24:	6822      	ldr	r2, [r4, #0]
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_UART_MspInit+0x80>)
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d130      	bne.n	8001c8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c2c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001c30:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c34:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c38:	61da      	str	r2, [r3, #28]
 8001c3a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	4816      	ldr	r0, [pc, #88]	; (8001c98 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c3e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001c42:	9200      	str	r2, [sp, #0]
 8001c44:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c48:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	f042 0208 	orr.w	r2, r2, #8
 8001c4e:	619a      	str	r2, [r3, #24]
 8001c50:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	f000 fa1e 	bl	80020a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	a902      	add	r1, sp, #8
 8001c72:	4809      	ldr	r0, [pc, #36]	; (8001c98 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	f000 fa15 	bl	80020a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c7e:	2027      	movs	r0, #39	; 0x27
 8001c80:	4622      	mov	r2, r4
 8001c82:	4621      	mov	r1, r4
 8001c84:	f000 f94e 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c88:	2027      	movs	r0, #39	; 0x27
 8001c8a:	f000 f97f 	bl	8001f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c8e:	b006      	add	sp, #24
 8001c90:	bd10      	pop	{r4, pc}
 8001c92:	bf00      	nop
 8001c94:	40004800 	.word	0x40004800
 8001c98:	40010c00 	.word	0x40010c00

08001c9c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c9c:	4770      	bx	lr

08001c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9e:	e7fe      	b.n	8001c9e <HardFault_Handler>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	e7fe      	b.n	8001ca0 <MemManage_Handler>

08001ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	e7fe      	b.n	8001ca4 <UsageFault_Handler>

08001ca6 <SVC_Handler>:
 8001ca6:	4770      	bx	lr

08001ca8 <DebugMon_Handler>:
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:
 8001caa:	4770      	bx	lr

08001cac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cac:	f000 b904 	b.w	8001eb8 <HAL_IncTick>

08001cb0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cb0:	4801      	ldr	r0, [pc, #4]	; (8001cb8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001cb2:	f000 be93 	b.w	80029dc <HAL_PCD_IRQHandler>
 8001cb6:	bf00      	nop
 8001cb8:	200018a8 	.word	0x200018a8

08001cbc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cbc:	4801      	ldr	r0, [pc, #4]	; (8001cc4 <USART3_IRQHandler+0x8>)
 8001cbe:	f002 baff 	b.w	80042c0 <HAL_UART_IRQHandler>
 8001cc2:	bf00      	nop
 8001cc4:	20000650 	.word	0x20000650

08001cc8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <_sbrk+0x30>)
{
 8001cca:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001ccc:	6819      	ldr	r1, [r3, #0]
{
 8001cce:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001cd0:	b909      	cbnz	r1, 8001cd6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001cd2:	490a      	ldr	r1, [pc, #40]	; (8001cfc <_sbrk+0x34>)
 8001cd4:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	4909      	ldr	r1, [pc, #36]	; (8001d00 <_sbrk+0x38>)
 8001cda:	4c0a      	ldr	r4, [pc, #40]	; (8001d04 <_sbrk+0x3c>)
 8001cdc:	4402      	add	r2, r0
 8001cde:	1b09      	subs	r1, r1, r4
 8001ce0:	428a      	cmp	r2, r1
 8001ce2:	d906      	bls.n	8001cf2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001ce4:	f004 f9fc 	bl	80060e0 <__errno>
 8001ce8:	230c      	movs	r3, #12
 8001cea:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001cf0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001cf2:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001cf4:	e7fc      	b.n	8001cf0 <_sbrk+0x28>
 8001cf6:	bf00      	nop
 8001cf8:	2000039c 	.word	0x2000039c
 8001cfc:	20001b98 	.word	0x20001b98
 8001d00:	20005000 	.word	0x20005000
 8001d04:	00000400 	.word	0x00000400

08001d08 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	4770      	bx	lr
	...

08001d0c <blink>:
char* ptr = input;

// USB
uint8_t TxData[1000];

void blink(void){
 8001d0c:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(Test_LED_GPIO_Port, Test_LED_Pin);
 8001d0e:	4c09      	ldr	r4, [pc, #36]	; (8001d34 <blink+0x28>)
 8001d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d14:	4620      	mov	r0, r4
 8001d16:	f000 fab2 	bl	800227e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001d1a:	2064      	movs	r0, #100	; 0x64
 8001d1c:	f000 f8de 	bl	8001edc <HAL_Delay>
	HAL_GPIO_TogglePin(Test_LED_GPIO_Port, Test_LED_Pin);
 8001d20:	4620      	mov	r0, r4
 8001d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d26:	f000 faaa 	bl	800227e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
}
 8001d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(100);
 8001d2e:	2064      	movs	r0, #100	; 0x64
 8001d30:	f000 b8d4 	b.w	8001edc <HAL_Delay>
 8001d34:	40011000 	.word	0x40011000

08001d38 <init_PWM>:

// Serwa
void init_PWM(void){
 8001d38:	b538      	push	{r3, r4, r5, lr}
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	TIM3->CCR3 = 1500;
 8001d3a:	f240 54dc 	movw	r4, #1500	; 0x5dc
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001d3e:	4d07      	ldr	r5, [pc, #28]	; (8001d5c <init_PWM+0x24>)
 8001d40:	2108      	movs	r1, #8
 8001d42:	4628      	mov	r0, r5
 8001d44:	f002 f9ae 	bl	80040a4 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = 1500;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <init_PWM+0x28>)

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001d4a:	210c      	movs	r1, #12
	TIM3->CCR3 = 1500;
 8001d4c:	63dc      	str	r4, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f002 f9a8 	bl	80040a4 <HAL_TIM_PWM_Start>
	TIM4->CCR4 = 1500;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <init_PWM+0x2c>)
 8001d56:	641c      	str	r4, [r3, #64]	; 0x40
}
 8001d58:	bd38      	pop	{r3, r4, r5, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200006e8 	.word	0x200006e8
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40000800 	.word	0x40000800

08001d68 <save_input>:

void save_input( int k ){
 8001d68:	b510      	push	{r4, lr}
	char c;
	switch(k){
 8001d6a:	280e      	cmp	r0, #14
 8001d6c:	d812      	bhi.n	8001d94 <save_input+0x2c>
 8001d6e:	e8df f000 	tbb	[pc, r0]
 8001d72:	2022      	.short	0x2022
 8001d74:	1a1c111e 	.word	0x1a1c111e
 8001d78:	14161118 	.word	0x14161118
 8001d7c:	08261112 	.word	0x08261112
 8001d80:	24          	.byte	0x24
 8001d81:	00          	.byte	0x00
			break;
		case 10:
			c = '9';
			break;
		case 13:
			c = '0';
 8001d82:	2430      	movs	r4, #48	; 0x30
			c = 0;
	}

	if( c > 0 ){

		lcd_send_data(c);
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff fc4d 	bl	8001624 <lcd_send_data>
		*(ptr++) = c;
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <save_input+0x5c>)
 8001d8c:	6813      	ldr	r3, [r2, #0]
 8001d8e:	1c59      	adds	r1, r3, #1
 8001d90:	6011      	str	r1, [r2, #0]
 8001d92:	701c      	strb	r4, [r3, #0]
	}
}
 8001d94:	bd10      	pop	{r4, pc}
			c = '9';
 8001d96:	2439      	movs	r4, #57	; 0x39
 8001d98:	e7f4      	b.n	8001d84 <save_input+0x1c>
			c = '8';
 8001d9a:	2438      	movs	r4, #56	; 0x38
 8001d9c:	e7f2      	b.n	8001d84 <save_input+0x1c>
			c = '7';
 8001d9e:	2437      	movs	r4, #55	; 0x37
 8001da0:	e7f0      	b.n	8001d84 <save_input+0x1c>
			c = '6';
 8001da2:	2436      	movs	r4, #54	; 0x36
 8001da4:	e7ee      	b.n	8001d84 <save_input+0x1c>
			c = '5';
 8001da6:	2435      	movs	r4, #53	; 0x35
 8001da8:	e7ec      	b.n	8001d84 <save_input+0x1c>
			c = '4';
 8001daa:	2434      	movs	r4, #52	; 0x34
 8001dac:	e7ea      	b.n	8001d84 <save_input+0x1c>
			c = '3';
 8001dae:	2433      	movs	r4, #51	; 0x33
 8001db0:	e7e8      	b.n	8001d84 <save_input+0x1c>
			c = '2';
 8001db2:	2432      	movs	r4, #50	; 0x32
 8001db4:	e7e6      	b.n	8001d84 <save_input+0x1c>
			c = '1';
 8001db6:	2431      	movs	r4, #49	; 0x31
 8001db8:	e7e4      	b.n	8001d84 <save_input+0x1c>
			c = '.';
 8001dba:	242e      	movs	r4, #46	; 0x2e
 8001dbc:	e7e2      	b.n	8001d84 <save_input+0x1c>
			c = '-';
 8001dbe:	242d      	movs	r4, #45	; 0x2d
 8001dc0:	e7e0      	b.n	8001d84 <save_input+0x1c>
 8001dc2:	bf00      	nop
 8001dc4:	20000024 	.word	0x20000024

08001dc8 <get_input>:

double get_input(){
	char* tmp;
	*ptr = '\0';
 8001dc8:	2200      	movs	r2, #0
double get_input(){
 8001dca:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	*ptr = '\0';
 8001dcc:	4c0a      	ldr	r4, [pc, #40]	; (8001df8 <get_input+0x30>)
	double ret = strtod(input,&tmp);
 8001dce:	a901      	add	r1, sp, #4
	*ptr = '\0';
 8001dd0:	6823      	ldr	r3, [r4, #0]
	double ret = strtod(input,&tmp);
 8001dd2:	480a      	ldr	r0, [pc, #40]	; (8001dfc <get_input+0x34>)
	*ptr = '\0';
 8001dd4:	701a      	strb	r2, [r3, #0]
	double ret = strtod(input,&tmp);
 8001dd6:	f005 fe5f 	bl	8007a98 <strtod>
	if( ptr != tmp ){
 8001dda:	6822      	ldr	r2, [r4, #0]
 8001ddc:	9b01      	ldr	r3, [sp, #4]
	double ret = strtod(input,&tmp);
 8001dde:	4606      	mov	r6, r0
	if( ptr != tmp ){
 8001de0:	429a      	cmp	r2, r3
	double ret = strtod(input,&tmp);
 8001de2:	460f      	mov	r7, r1
	if( ptr != tmp ){
 8001de4:	d001      	beq.n	8001dea <get_input+0x22>
		blink();
 8001de6:	f7ff ff91 	bl	8001d0c <blink>
	}

	ptr = input;
	return ret;
}
 8001dea:	4630      	mov	r0, r6
 8001dec:	4639      	mov	r1, r7
	ptr = input;
 8001dee:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <get_input+0x34>)
 8001df0:	6023      	str	r3, [r4, #0]
}
 8001df2:	b002      	add	sp, #8
 8001df4:	bdd0      	pop	{r4, r6, r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000024 	.word	0x20000024
 8001dfc:	20000804 	.word	0x20000804

08001e00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	; (8001e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	; (8001e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e26:	f7ff ff6f 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f004 f95f 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e2e:	f7ff fcd9 	bl	80017e4 <main>
  bx lr
 8001e32:	4770      	bx	lr
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	20000374 	.word	0x20000374
  ldr r2, =_sidata
 8001e3c:	0800bdc8 	.word	0x0800bdc8
  ldr r2, =_sbss
 8001e40:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8001e44:	20001b98 	.word	0x20001b98

08001e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC1_2_IRQHandler>
	...

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_InitTick+0x3c>)
{
 8001e50:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e52:	7818      	ldrb	r0, [r3, #0]
 8001e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e58:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_InitTick+0x40>)
 8001e5e:	6810      	ldr	r0, [r2, #0]
 8001e60:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e64:	f000 f8a0 	bl	8001fa8 <HAL_SYSTICK_Config>
 8001e68:	4604      	mov	r4, r0
 8001e6a:	b958      	cbnz	r0, 8001e84 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6c:	2d0f      	cmp	r5, #15
 8001e6e:	d809      	bhi.n	8001e84 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	4602      	mov	r2, r0
 8001e72:	4629      	mov	r1, r5
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f854 	bl	8001f24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <HAL_InitTick+0x44>)
 8001e80:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001e84:	2001      	movs	r0, #1
 8001e86:	e7fc      	b.n	8001e82 <HAL_InitTick+0x36>
 8001e88:	20000028 	.word	0x20000028
 8001e8c:	20000020 	.word	0x20000020
 8001e90:	2000002c 	.word	0x2000002c

08001e94 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_Init+0x20>)
{
 8001e96:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e98:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea2:	f000 f82d 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff ffd0 	bl	8001e4c <HAL_InitTick>
  HAL_MspInit();
 8001eac:	f7ff fe1a 	bl	8001ae4 <HAL_MspInit>
}
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	bd08      	pop	{r3, pc}
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001eb8:	4a03      	ldr	r2, [pc, #12]	; (8001ec8 <HAL_IncTick+0x10>)
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_IncTick+0x14>)
 8001ebc:	6811      	ldr	r1, [r2, #0]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	440b      	add	r3, r1
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000c04 	.word	0x20000c04
 8001ecc:	20000028 	.word	0x20000028

08001ed0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ed0:	4b01      	ldr	r3, [pc, #4]	; (8001ed8 <HAL_GetTick+0x8>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000c04 	.word	0x20000c04

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b538      	push	{r3, r4, r5, lr}
 8001ede:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ee0:	f7ff fff6 	bl	8001ed0 <HAL_GetTick>
 8001ee4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee8:	bf1e      	ittt	ne
 8001eea:	4b04      	ldrne	r3, [pc, #16]	; (8001efc <HAL_Delay+0x20>)
 8001eec:	781b      	ldrbne	r3, [r3, #0]
 8001eee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef0:	f7ff ffee 	bl	8001ed0 <HAL_GetTick>
 8001ef4:	1b40      	subs	r0, r0, r5
 8001ef6:	42a0      	cmp	r0, r4
 8001ef8:	d3fa      	bcc.n	8001ef0 <HAL_Delay+0x14>
  {
  }
}
 8001efa:	bd38      	pop	{r3, r4, r5, pc}
 8001efc:	20000028 	.word	0x20000028

08001f00 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f02:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f06:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f0e:	041b      	lsls	r3, r3, #16
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001f1a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001f1c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f26:	b570      	push	{r4, r5, r6, lr}
 8001f28:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f32:	f1c4 0507 	rsb	r5, r4, #7
 8001f36:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f38:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	bf28      	it	cs
 8001f3e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f40:	2b06      	cmp	r3, #6
 8001f42:	bf98      	it	ls
 8001f44:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f46:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	bf88      	it	hi
 8001f4c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4e:	ea21 0303 	bic.w	r3, r1, r3
 8001f52:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	fa06 f404 	lsl.w	r4, r6, r4
 8001f58:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5e:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	bfa8      	it	ge
 8001f64:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001f68:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	bfb8      	it	lt
 8001f6e:	4a06      	ldrlt	r2, [pc, #24]	; (8001f88 <HAL_NVIC_SetPriority+0x64>)
 8001f70:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	bfab      	itete	ge
 8001f74:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
 8001f84:	e000ed00 	.word	0xe000ed00
 8001f88:	e000ed14 	.word	0xe000ed14

08001f8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	db08      	blt.n	8001fa2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f90:	2301      	movs	r3, #1
 8001f92:	0942      	lsrs	r2, r0, #5
 8001f94:	f000 001f 	and.w	r0, r0, #31
 8001f98:	fa03 f000 	lsl.w	r0, r3, r0
 8001f9c:	4b01      	ldr	r3, [pc, #4]	; (8001fa4 <HAL_NVIC_EnableIRQ+0x18>)
 8001f9e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa8:	3801      	subs	r0, #1
 8001faa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001fae:	d20a      	bcs.n	8001fc6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d006      	beq.n	8001fea <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fea:	6803      	ldr	r3, [r0, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fec:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	f022 020e 	bic.w	r2, r2, #14
 8001ff4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ffe:	2201      	movs	r2, #1
 8002000:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002008:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800200a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 800200e:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8002012:	4618      	mov	r0, r3
}
 8002014:	4770      	bx	lr
	...

08002018 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002018:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 800201c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800201e:	2b02      	cmp	r3, #2
 8002020:	d003      	beq.n	800202a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002022:	2304      	movs	r3, #4
 8002024:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002026:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002028:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800202a:	6803      	ldr	r3, [r0, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	f022 020e 	bic.w	r2, r2, #14
 8002032:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800203c:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <HAL_DMA_Abort_IT+0x88>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <HAL_DMA_Abort_IT+0x6a>
 8002042:	3214      	adds	r2, #20
 8002044:	4293      	cmp	r3, r2
 8002046:	d01e      	beq.n	8002086 <HAL_DMA_Abort_IT+0x6e>
 8002048:	3214      	adds	r2, #20
 800204a:	4293      	cmp	r3, r2
 800204c:	d01d      	beq.n	800208a <HAL_DMA_Abort_IT+0x72>
 800204e:	3214      	adds	r2, #20
 8002050:	4293      	cmp	r3, r2
 8002052:	d01d      	beq.n	8002090 <HAL_DMA_Abort_IT+0x78>
 8002054:	3214      	adds	r2, #20
 8002056:	4293      	cmp	r3, r2
 8002058:	d01d      	beq.n	8002096 <HAL_DMA_Abort_IT+0x7e>
 800205a:	3214      	adds	r2, #20
 800205c:	4293      	cmp	r3, r2
 800205e:	bf0c      	ite	eq
 8002060:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002064:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800206a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800206c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800206e:	2301      	movs	r3, #1
 8002070:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002074:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002076:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800207a:	b17b      	cbz	r3, 800209c <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 800207c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800207e:	4620      	mov	r0, r4
 8002080:	e7d2      	b.n	8002028 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002082:	2301      	movs	r3, #1
 8002084:	e7f0      	b.n	8002068 <HAL_DMA_Abort_IT+0x50>
 8002086:	2310      	movs	r3, #16
 8002088:	e7ee      	b.n	8002068 <HAL_DMA_Abort_IT+0x50>
 800208a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800208e:	e7eb      	b.n	8002068 <HAL_DMA_Abort_IT+0x50>
 8002090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002094:	e7e8      	b.n	8002068 <HAL_DMA_Abort_IT+0x50>
 8002096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800209a:	e7e5      	b.n	8002068 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	4618      	mov	r0, r3
 800209e:	e7c3      	b.n	8002028 <HAL_DMA_Abort_IT+0x10>
 80020a0:	40020008 	.word	0x40020008
 80020a4:	40020000 	.word	0x40020000

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020ac:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80020ae:	4626      	mov	r6, r4
 80020b0:	4b65      	ldr	r3, [pc, #404]	; (8002248 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020b2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8002258 <HAL_GPIO_Init+0x1b0>
 80020b6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800225c <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	680a      	ldr	r2, [r1, #0]
 80020bc:	fa32 f506 	lsrs.w	r5, r2, r6
 80020c0:	d102      	bne.n	80020c8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80020c2:	b003      	add	sp, #12
 80020c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80020c8:	f04f 0801 	mov.w	r8, #1
 80020cc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80020d4:	4590      	cmp	r8, r2
 80020d6:	d17e      	bne.n	80021d6 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80020d8:	684d      	ldr	r5, [r1, #4]
 80020da:	2d12      	cmp	r5, #18
 80020dc:	f000 80a9 	beq.w	8002232 <HAL_GPIO_Init+0x18a>
 80020e0:	f200 8082 	bhi.w	80021e8 <HAL_GPIO_Init+0x140>
 80020e4:	2d02      	cmp	r5, #2
 80020e6:	f000 80a1 	beq.w	800222c <HAL_GPIO_Init+0x184>
 80020ea:	d876      	bhi.n	80021da <HAL_GPIO_Init+0x132>
 80020ec:	2d00      	cmp	r5, #0
 80020ee:	f000 8088 	beq.w	8002202 <HAL_GPIO_Init+0x15a>
 80020f2:	2d01      	cmp	r5, #1
 80020f4:	f000 8098 	beq.w	8002228 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020f8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020fc:	2aff      	cmp	r2, #255	; 0xff
 80020fe:	bf93      	iteet	ls
 8002100:	4682      	movls	sl, r0
 8002102:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8002106:	3d08      	subhi	r5, #8
 8002108:	f8d0 b000 	ldrls.w	fp, [r0]
 800210c:	bf92      	itee	ls
 800210e:	00b5      	lslls	r5, r6, #2
 8002110:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002114:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002116:	fa09 f805 	lsl.w	r8, r9, r5
 800211a:	ea2b 0808 	bic.w	r8, fp, r8
 800211e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002122:	bf88      	it	hi
 8002124:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002128:	ea48 0505 	orr.w	r5, r8, r5
 800212c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002130:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002134:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002138:	d04d      	beq.n	80021d6 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800213a:	4f44      	ldr	r7, [pc, #272]	; (800224c <HAL_GPIO_Init+0x1a4>)
 800213c:	f026 0803 	bic.w	r8, r6, #3
 8002140:	69bd      	ldr	r5, [r7, #24]
 8002142:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002146:	f045 0501 	orr.w	r5, r5, #1
 800214a:	61bd      	str	r5, [r7, #24]
 800214c:	69bd      	ldr	r5, [r7, #24]
 800214e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002152:	f005 0501 	and.w	r5, r5, #1
 8002156:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002158:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800215c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800215e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002162:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002166:	fa09 f90b 	lsl.w	r9, r9, fp
 800216a:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800216e:	4d38      	ldr	r5, [pc, #224]	; (8002250 <HAL_GPIO_Init+0x1a8>)
 8002170:	42a8      	cmp	r0, r5
 8002172:	d063      	beq.n	800223c <HAL_GPIO_Init+0x194>
 8002174:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002178:	42a8      	cmp	r0, r5
 800217a:	d061      	beq.n	8002240 <HAL_GPIO_Init+0x198>
 800217c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002180:	42a8      	cmp	r0, r5
 8002182:	d05f      	beq.n	8002244 <HAL_GPIO_Init+0x19c>
 8002184:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002188:	42a8      	cmp	r0, r5
 800218a:	bf0c      	ite	eq
 800218c:	2503      	moveq	r5, #3
 800218e:	2504      	movne	r5, #4
 8002190:	fa05 f50b 	lsl.w	r5, r5, fp
 8002194:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002198:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800219c:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800219e:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80021a2:	bf14      	ite	ne
 80021a4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021a6:	4395      	biceq	r5, r2
 80021a8:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80021aa:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ac:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80021b0:	bf14      	ite	ne
 80021b2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021b4:	4395      	biceq	r5, r2
 80021b6:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b8:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ba:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80021be:	bf14      	ite	ne
 80021c0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021c2:	4395      	biceq	r5, r2
 80021c4:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80021c6:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c8:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80021cc:	bf14      	ite	ne
 80021ce:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021d0:	ea25 0202 	biceq.w	r2, r5, r2
 80021d4:	60da      	str	r2, [r3, #12]
	position++;
 80021d6:	3601      	adds	r6, #1
 80021d8:	e76f      	b.n	80020ba <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80021da:	2d03      	cmp	r5, #3
 80021dc:	d022      	beq.n	8002224 <HAL_GPIO_Init+0x17c>
 80021de:	2d11      	cmp	r5, #17
 80021e0:	d18a      	bne.n	80020f8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021e2:	68cc      	ldr	r4, [r1, #12]
 80021e4:	3404      	adds	r4, #4
          break;
 80021e6:	e787      	b.n	80020f8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80021e8:	4f1a      	ldr	r7, [pc, #104]	; (8002254 <HAL_GPIO_Init+0x1ac>)
 80021ea:	42bd      	cmp	r5, r7
 80021ec:	d009      	beq.n	8002202 <HAL_GPIO_Init+0x15a>
 80021ee:	d812      	bhi.n	8002216 <HAL_GPIO_Init+0x16e>
 80021f0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8002260 <HAL_GPIO_Init+0x1b8>
 80021f4:	454d      	cmp	r5, r9
 80021f6:	d004      	beq.n	8002202 <HAL_GPIO_Init+0x15a>
 80021f8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80021fc:	454d      	cmp	r5, r9
 80021fe:	f47f af7b 	bne.w	80020f8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002202:	688c      	ldr	r4, [r1, #8]
 8002204:	b1c4      	cbz	r4, 8002238 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002206:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002208:	bf0c      	ite	eq
 800220a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800220e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002212:	2408      	movs	r4, #8
 8002214:	e770      	b.n	80020f8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002216:	4565      	cmp	r5, ip
 8002218:	d0f3      	beq.n	8002202 <HAL_GPIO_Init+0x15a>
 800221a:	4575      	cmp	r5, lr
 800221c:	d0f1      	beq.n	8002202 <HAL_GPIO_Init+0x15a>
 800221e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002264 <HAL_GPIO_Init+0x1bc>
 8002222:	e7eb      	b.n	80021fc <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002224:	2400      	movs	r4, #0
 8002226:	e767      	b.n	80020f8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002228:	68cc      	ldr	r4, [r1, #12]
          break;
 800222a:	e765      	b.n	80020f8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800222c:	68cc      	ldr	r4, [r1, #12]
 800222e:	3408      	adds	r4, #8
          break;
 8002230:	e762      	b.n	80020f8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002232:	68cc      	ldr	r4, [r1, #12]
 8002234:	340c      	adds	r4, #12
          break;
 8002236:	e75f      	b.n	80020f8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002238:	2404      	movs	r4, #4
 800223a:	e75d      	b.n	80020f8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800223c:	2500      	movs	r5, #0
 800223e:	e7a7      	b.n	8002190 <HAL_GPIO_Init+0xe8>
 8002240:	2501      	movs	r5, #1
 8002242:	e7a5      	b.n	8002190 <HAL_GPIO_Init+0xe8>
 8002244:	2502      	movs	r5, #2
 8002246:	e7a3      	b.n	8002190 <HAL_GPIO_Init+0xe8>
 8002248:	40010400 	.word	0x40010400
 800224c:	40021000 	.word	0x40021000
 8002250:	40010800 	.word	0x40010800
 8002254:	10210000 	.word	0x10210000
 8002258:	10310000 	.word	0x10310000
 800225c:	10320000 	.word	0x10320000
 8002260:	10110000 	.word	0x10110000
 8002264:	10220000 	.word	0x10220000

08002268 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002268:	6883      	ldr	r3, [r0, #8]
 800226a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800226c:	bf14      	ite	ne
 800226e:	2001      	movne	r0, #1
 8002270:	2000      	moveq	r0, #0
 8002272:	4770      	bx	lr

08002274 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002274:	b10a      	cbz	r2, 800227a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002276:	6101      	str	r1, [r0, #16]
  }
}
 8002278:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800227a:	0409      	lsls	r1, r1, #16
 800227c:	e7fb      	b.n	8002276 <HAL_GPIO_WritePin+0x2>

0800227e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800227e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002280:	ea01 0203 	and.w	r2, r1, r3
 8002284:	ea21 0103 	bic.w	r1, r1, r3
 8002288:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800228c:	6101      	str	r1, [r0, #16]
}
 800228e:	4770      	bx	lr

08002290 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002290:	6801      	ldr	r1, [r0, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	694b      	ldr	r3, [r1, #20]
 8002296:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800229a:	d010      	beq.n	80022be <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80022a0:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80022a2:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80022a4:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022aa:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022ae:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80022ba:	2001      	movs	r0, #1
 80022bc:	4770      	bx	lr
  }
  return HAL_OK;
 80022be:	4618      	mov	r0, r3
}
 80022c0:	4770      	bx	lr

080022c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80022c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022c6:	4604      	mov	r4, r0
 80022c8:	4616      	mov	r6, r2
 80022ca:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022cc:	b28f      	uxth	r7, r1
 80022ce:	6825      	ldr	r5, [r4, #0]
 80022d0:	6968      	ldr	r0, [r5, #20]
 80022d2:	ea37 0000 	bics.w	r0, r7, r0
 80022d6:	d017      	beq.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022d8:	696b      	ldr	r3, [r5, #20]
 80022da:	055a      	lsls	r2, r3, #21
 80022dc:	d516      	bpl.n	800230c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022de:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80022e0:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80022ec:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80022fc:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8002300:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002302:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002304:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800230c:	1c73      	adds	r3, r6, #1
 800230e:	d0df      	beq.n	80022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002310:	f7ff fdde 	bl	8001ed0 <HAL_GetTick>
 8002314:	eba0 0008 	sub.w	r0, r0, r8
 8002318:	42b0      	cmp	r0, r6
 800231a:	d801      	bhi.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 800231c:	2e00      	cmp	r6, #0
 800231e:	d1d6      	bne.n	80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002320:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002322:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002324:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002326:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800232e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002330:	f042 0220 	orr.w	r2, r2, #32
 8002334:	e7e4      	b.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08002336 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002336:	b570      	push	{r4, r5, r6, lr}
 8002338:	4604      	mov	r4, r0
 800233a:	460d      	mov	r5, r1
 800233c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	075b      	lsls	r3, r3, #29
 8002344:	d501      	bpl.n	800234a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002346:	2000      	movs	r0, #0
}
 8002348:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff ffa0 	bl	8002290 <I2C_IsAcknowledgeFailed>
 8002350:	b9a8      	cbnz	r0, 800237e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002352:	1c6a      	adds	r2, r5, #1
 8002354:	d0f3      	beq.n	800233e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002356:	f7ff fdbb 	bl	8001ed0 <HAL_GetTick>
 800235a:	1b80      	subs	r0, r0, r6
 800235c:	42a8      	cmp	r0, r5
 800235e:	d801      	bhi.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002360:	2d00      	cmp	r5, #0
 8002362:	d1ec      	bne.n	800233e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002364:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002366:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002368:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800236a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800236e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002372:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002374:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002378:	f042 0220 	orr.w	r2, r2, #32
 800237c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800237e:	2001      	movs	r0, #1
 8002380:	e7e2      	b.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002382 <I2C_WaitOnFlagUntilTimeout>:
{
 8002382:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002386:	4604      	mov	r4, r0
 8002388:	4690      	mov	r8, r2
 800238a:	461f      	mov	r7, r3
 800238c:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800238e:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8002392:	b28d      	uxth	r5, r1
 8002394:	6821      	ldr	r1, [r4, #0]
 8002396:	f1b9 0f01 	cmp.w	r9, #1
 800239a:	bf0c      	ite	eq
 800239c:	694b      	ldreq	r3, [r1, #20]
 800239e:	698b      	ldrne	r3, [r1, #24]
 80023a0:	ea35 0303 	bics.w	r3, r5, r3
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	4598      	cmp	r8, r3
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80023ae:	2000      	movs	r0, #0
 80023b0:	e016      	b.n	80023e0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80023b2:	1c7b      	adds	r3, r7, #1
 80023b4:	d0ef      	beq.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b6:	f7ff fd8b 	bl	8001ed0 <HAL_GetTick>
 80023ba:	1b80      	subs	r0, r0, r6
 80023bc:	42b8      	cmp	r0, r7
 80023be:	d801      	bhi.n	80023c4 <I2C_WaitOnFlagUntilTimeout+0x42>
 80023c0:	2f00      	cmp	r7, #0
 80023c2:	d1e7      	bne.n	8002394 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023c4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80023c6:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 80023c8:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023ca:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80023d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	6422      	str	r2, [r4, #64]	; 0x40
}
 80023e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080023e4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80023e4:	b570      	push	{r4, r5, r6, lr}
 80023e6:	4604      	mov	r4, r0
 80023e8:	460d      	mov	r5, r1
 80023ea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	d501      	bpl.n	80023f8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80023f4:	2000      	movs	r0, #0
}
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff ff49 	bl	8002290 <I2C_IsAcknowledgeFailed>
 80023fe:	b9a8      	cbnz	r0, 800242c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002400:	1c6a      	adds	r2, r5, #1
 8002402:	d0f3      	beq.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002404:	f7ff fd64 	bl	8001ed0 <HAL_GetTick>
 8002408:	1b80      	subs	r0, r0, r6
 800240a:	42a8      	cmp	r0, r5
 800240c:	d801      	bhi.n	8002412 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800240e:	2d00      	cmp	r5, #0
 8002410:	d1ec      	bne.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002412:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002414:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002416:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002418:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800241c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002420:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002422:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002426:	f042 0220 	orr.w	r2, r2, #32
 800242a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800242c:	2001      	movs	r0, #1
 800242e:	e7e2      	b.n	80023f6 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08002430 <HAL_I2C_Init>:
{
 8002430:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002432:	4604      	mov	r4, r0
 8002434:	b908      	cbnz	r0, 800243a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002436:	2001      	movs	r0, #1
}
 8002438:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800243e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002442:	b91b      	cbnz	r3, 800244c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002444:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002448:	f7ff fb6e 	bl	8001b28 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800244c:	2324      	movs	r3, #36	; 0x24
 800244e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800246a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800246c:	f001 faf8 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002470:	6863      	ldr	r3, [r4, #4]
 8002472:	4a41      	ldr	r2, [pc, #260]	; (8002578 <HAL_I2C_Init+0x148>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d84d      	bhi.n	8002514 <HAL_I2C_Init+0xe4>
 8002478:	4a40      	ldr	r2, [pc, #256]	; (800257c <HAL_I2C_Init+0x14c>)
 800247a:	4290      	cmp	r0, r2
 800247c:	d9db      	bls.n	8002436 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800247e:	4940      	ldr	r1, [pc, #256]	; (8002580 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002480:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002482:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002486:	6855      	ldr	r5, [r2, #4]
 8002488:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800248c:	430d      	orrs	r5, r1
 800248e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002490:	6a15      	ldr	r5, [r2, #32]
 8002492:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002496:	3101      	adds	r1, #1
 8002498:	4329      	orrs	r1, r5
 800249a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800249c:	69d1      	ldr	r1, [r2, #28]
 800249e:	4d36      	ldr	r5, [pc, #216]	; (8002578 <HAL_I2C_Init+0x148>)
 80024a0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80024a4:	42ab      	cmp	r3, r5
 80024a6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80024aa:	f100 30ff 	add.w	r0, r0, #4294967295
 80024ae:	d848      	bhi.n	8002542 <HAL_I2C_Init+0x112>
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80024b6:	1c43      	adds	r3, r0, #1
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	2b04      	cmp	r3, #4
 80024be:	bf38      	it	cc
 80024c0:	2304      	movcc	r3, #4
 80024c2:	430b      	orrs	r3, r1
 80024c4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024c6:	6811      	ldr	r1, [r2, #0]
 80024c8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80024cc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80024d0:	4303      	orrs	r3, r0
 80024d2:	430b      	orrs	r3, r1
 80024d4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024d6:	6891      	ldr	r1, [r2, #8]
 80024d8:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80024dc:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80024e0:	4303      	orrs	r3, r0
 80024e2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80024e6:	430b      	orrs	r3, r1
 80024e8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024ea:	68d1      	ldr	r1, [r2, #12]
 80024ec:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80024f0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80024f4:	4303      	orrs	r3, r0
 80024f6:	430b      	orrs	r3, r1
 80024f8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80024fa:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002504:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002506:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002508:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800250c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002512:	e791      	b.n	8002438 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002514:	4a1b      	ldr	r2, [pc, #108]	; (8002584 <HAL_I2C_Init+0x154>)
 8002516:	4290      	cmp	r0, r2
 8002518:	d98d      	bls.n	8002436 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800251a:	4e19      	ldr	r6, [pc, #100]	; (8002580 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800251c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002520:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002524:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002526:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002528:	6855      	ldr	r5, [r2, #4]
 800252a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800252e:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002530:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002534:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002536:	6a15      	ldr	r5, [r2, #32]
 8002538:	fbb1 f1f6 	udiv	r1, r1, r6
 800253c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002540:	e7a9      	b.n	8002496 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002542:	68a5      	ldr	r5, [r4, #8]
 8002544:	b955      	cbnz	r5, 800255c <HAL_I2C_Init+0x12c>
 8002546:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800254a:	fbb0 f0f3 	udiv	r0, r0, r3
 800254e:	1c43      	adds	r3, r0, #1
 8002550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002554:	b16b      	cbz	r3, 8002572 <HAL_I2C_Init+0x142>
 8002556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800255a:	e7b2      	b.n	80024c2 <HAL_I2C_Init+0x92>
 800255c:	2519      	movs	r5, #25
 800255e:	436b      	muls	r3, r5
 8002560:	fbb0 f0f3 	udiv	r0, r0, r3
 8002564:	1c43      	adds	r3, r0, #1
 8002566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256a:	b113      	cbz	r3, 8002572 <HAL_I2C_Init+0x142>
 800256c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002570:	e7a7      	b.n	80024c2 <HAL_I2C_Init+0x92>
 8002572:	2301      	movs	r3, #1
 8002574:	e7a5      	b.n	80024c2 <HAL_I2C_Init+0x92>
 8002576:	bf00      	nop
 8002578:	000186a0 	.word	0x000186a0
 800257c:	001e847f 	.word	0x001e847f
 8002580:	000f4240 	.word	0x000f4240
 8002584:	003d08ff 	.word	0x003d08ff

08002588 <HAL_I2C_Master_Transmit>:
{
 8002588:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800258c:	4604      	mov	r4, r0
 800258e:	461f      	mov	r7, r3
 8002590:	460d      	mov	r5, r1
 8002592:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff fc9c 	bl	8001ed0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002598:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 800259c:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d004      	beq.n	80025ac <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80025a2:	2502      	movs	r5, #2
}
 80025a4:	4628      	mov	r0, r5
 80025a6:	b004      	add	sp, #16
 80025a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ac:	9000      	str	r0, [sp, #0]
 80025ae:	2319      	movs	r3, #25
 80025b0:	2201      	movs	r2, #1
 80025b2:	495b      	ldr	r1, [pc, #364]	; (8002720 <HAL_I2C_Master_Transmit+0x198>)
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7ff fee4 	bl	8002382 <I2C_WaitOnFlagUntilTimeout>
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d1f1      	bne.n	80025a2 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80025be:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d0ed      	beq.n	80025a2 <HAL_I2C_Master_Transmit+0x1a>
 80025c6:	2301      	movs	r3, #1
 80025c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80025d2:	bf5e      	ittt	pl
 80025d4:	681a      	ldrpl	r2, [r3, #0]
 80025d6:	f042 0201 	orrpl.w	r2, r2, #1
 80025da:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e2:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025e4:	2221      	movs	r2, #33	; 0x21
 80025e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ea:	2210      	movs	r2, #16
 80025ec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025f0:	2200      	movs	r2, #0
 80025f2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80025f4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80025f8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80025fc:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025fe:	4a49      	ldr	r2, [pc, #292]	; (8002724 <HAL_I2C_Master_Transmit+0x19c>)
 8002600:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002602:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002604:	2a08      	cmp	r2, #8
 8002606:	d004      	beq.n	8002612 <HAL_I2C_Master_Transmit+0x8a>
 8002608:	2a01      	cmp	r2, #1
 800260a:	d002      	beq.n	8002612 <HAL_I2C_Master_Transmit+0x8a>
 800260c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002610:	d104      	bne.n	800261c <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e002      	b.n	8002622 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800261c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800261e:	2a12      	cmp	r2, #18
 8002620:	d0f7      	beq.n	8002612 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002622:	2200      	movs	r2, #0
 8002624:	9600      	str	r6, [sp, #0]
 8002626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800262c:	4620      	mov	r0, r4
 800262e:	f7ff fea8 	bl	8002382 <I2C_WaitOnFlagUntilTimeout>
 8002632:	6822      	ldr	r2, [r4, #0]
 8002634:	b138      	cbz	r0, 8002646 <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002636:	6813      	ldr	r3, [r2, #0]
 8002638:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800263a:	bf44      	itt	mi
 800263c:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8002640:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002642:	2501      	movs	r5, #1
 8002644:	e7ae      	b.n	80025a4 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002646:	6923      	ldr	r3, [r4, #16]
 8002648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800264c:	d121      	bne.n	8002692 <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800264e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002652:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002654:	4633      	mov	r3, r6
 8002656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002658:	4933      	ldr	r1, [pc, #204]	; (8002728 <HAL_I2C_Master_Transmit+0x1a0>)
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff fe31 	bl	80022c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002660:	4605      	mov	r5, r0
 8002662:	2800      	cmp	r0, #0
 8002664:	d1ed      	bne.n	8002642 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	9003      	str	r0, [sp, #12]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	9203      	str	r2, [sp, #12]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	9303      	str	r3, [sp, #12]
 8002672:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002674:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002676:	b9f3      	cbnz	r3, 80026b6 <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	6821      	ldr	r1, [r4, #0]
 800267a:	680a      	ldr	r2, [r1, #0]
 800267c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002680:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002682:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002684:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002688:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002690:	e788      	b.n	80025a4 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002692:	11eb      	asrs	r3, r5, #7
 8002694:	f003 0306 	and.w	r3, r3, #6
 8002698:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800269c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800269e:	4923      	ldr	r1, [pc, #140]	; (800272c <HAL_I2C_Master_Transmit+0x1a4>)
 80026a0:	4633      	mov	r3, r6
 80026a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7ff fe0c 	bl	80022c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d1c9      	bne.n	8002642 <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	b2ed      	uxtb	r5, r5
 80026b2:	611d      	str	r5, [r3, #16]
 80026b4:	e7ce      	b.n	8002654 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b6:	4632      	mov	r2, r6
 80026b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff fe92 	bl	80023e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026c0:	b140      	cbz	r0, 80026d4 <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d1bc      	bne.n	8002642 <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	6822      	ldr	r2, [r4, #0]
 80026ca:	6813      	ldr	r3, [r2, #0]
 80026cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e7b6      	b.n	8002642 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026d6:	6820      	ldr	r0, [r4, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	f812 1b01 	ldrb.w	r1, [r2], #1
 80026de:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80026e0:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80026e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026e4:	3a01      	subs	r2, #1
 80026e6:	b292      	uxth	r2, r2
 80026e8:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026ea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ec:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80026ee:	1e51      	subs	r1, r2, #1
 80026f0:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026f2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80026f4:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026f6:	d50a      	bpl.n	800270e <HAL_I2C_Master_Transmit+0x186>
 80026f8:	b149      	cbz	r1, 800270e <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fa:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80026fc:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fe:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8002700:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002702:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002704:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002706:	3b01      	subs	r3, #1
 8002708:	b29b      	uxth	r3, r3
 800270a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800270c:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270e:	4632      	mov	r2, r6
 8002710:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002712:	4620      	mov	r0, r4
 8002714:	f7ff fe0f 	bl	8002336 <I2C_WaitOnBTFFlagUntilTimeout>
 8002718:	2800      	cmp	r0, #0
 800271a:	d0ab      	beq.n	8002674 <HAL_I2C_Master_Transmit+0xec>
 800271c:	e7d1      	b.n	80026c2 <HAL_I2C_Master_Transmit+0x13a>
 800271e:	bf00      	nop
 8002720:	00100002 	.word	0x00100002
 8002724:	ffff0000 	.word	0xffff0000
 8002728:	00010002 	.word	0x00010002
 800272c:	00010008 	.word	0x00010008

08002730 <HAL_I2C_IsDeviceReady>:
{
 8002730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002734:	4604      	mov	r4, r0
 8002736:	b085      	sub	sp, #20
 8002738:	4698      	mov	r8, r3
 800273a:	4689      	mov	r9, r1
 800273c:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 800273e:	f7ff fbc7 	bl	8001ed0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002742:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002746:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002748:	2b20      	cmp	r3, #32
 800274a:	d003      	beq.n	8002754 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 800274c:	2002      	movs	r0, #2
}
 800274e:	b005      	add	sp, #20
 8002750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002754:	9000      	str	r0, [sp, #0]
 8002756:	2319      	movs	r3, #25
 8002758:	2201      	movs	r2, #1
 800275a:	494c      	ldr	r1, [pc, #304]	; (800288c <HAL_I2C_IsDeviceReady+0x15c>)
 800275c:	4620      	mov	r0, r4
 800275e:	f7ff fe10 	bl	8002382 <I2C_WaitOnFlagUntilTimeout>
 8002762:	2800      	cmp	r0, #0
 8002764:	d1f2      	bne.n	800274c <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8002766:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d0ee      	beq.n	800274c <HAL_I2C_IsDeviceReady+0x1c>
 800276e:	2301      	movs	r3, #1
 8002770:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002774:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 8002776:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002778:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800277a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800288c <HAL_I2C_IsDeviceReady+0x15c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800277e:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002780:	bf58      	it	pl
 8002782:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002784:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8002788:	bf5c      	itt	pl
 800278a:	f042 0201 	orrpl.w	r2, r2, #1
 800278e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002796:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002798:	2324      	movs	r3, #36	; 0x24
 800279a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279e:	2300      	movs	r3, #0
 80027a0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80027a6:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a8:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ae:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027b0:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027b8:	4643      	mov	r3, r8
 80027ba:	9500      	str	r5, [sp, #0]
 80027bc:	2200      	movs	r2, #0
 80027be:	f7ff fde0 	bl	8002382 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	b138      	cbz	r0, 80027d6 <HAL_I2C_IsDeviceReady+0xa6>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	05db      	lsls	r3, r3, #23
 80027ca:	d502      	bpl.n	80027d2 <HAL_I2C_IsDeviceReady+0xa2>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d0:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80027d2:	2003      	movs	r0, #3
 80027d4:	e7bb      	b.n	800274e <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d6:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80027da:	f7ff fb79 	bl	8001ed0 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027de:	26a0      	movs	r6, #160	; 0xa0
      tickstart = HAL_GetTick();
 80027e0:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027e6:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027e8:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027ec:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027f0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80027f4:	29a0      	cmp	r1, #160	; 0xa0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_IsDeviceReady+0xcc>
 80027f8:	b902      	cbnz	r2, 80027fc <HAL_I2C_IsDeviceReady+0xcc>
 80027fa:	b1e3      	cbz	r3, 8002836 <HAL_I2C_IsDeviceReady+0x106>
      hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027fe:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8002800:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002810:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002812:	d027      	beq.n	8002864 <HAL_I2C_IsDeviceReady+0x134>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002814:	2200      	movs	r2, #0
 8002816:	9203      	str	r2, [sp, #12]
 8002818:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800281a:	491c      	ldr	r1, [pc, #112]	; (800288c <HAL_I2C_IsDeviceReady+0x15c>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281c:	9203      	str	r2, [sp, #12]
 800281e:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002820:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002822:	9303      	str	r3, [sp, #12]
 8002824:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002826:	9500      	str	r5, [sp, #0]
 8002828:	2319      	movs	r3, #25
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff fda9 	bl	8002382 <I2C_WaitOnFlagUntilTimeout>
 8002830:	b198      	cbz	r0, 800285a <HAL_I2C_IsDeviceReady+0x12a>
    return HAL_ERROR;
 8002832:	2001      	movs	r0, #1
 8002834:	e78b      	b.n	800274e <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002836:	f7ff fb4b 	bl	8001ed0 <HAL_GetTick>
 800283a:	1b40      	subs	r0, r0, r5
 800283c:	4540      	cmp	r0, r8
 800283e:	d802      	bhi.n	8002846 <HAL_I2C_IsDeviceReady+0x116>
 8002840:	f1b8 0f00 	cmp.w	r8, #0
 8002844:	d101      	bne.n	800284a <HAL_I2C_IsDeviceReady+0x11a>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002846:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800284e:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002850:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8002858:	e7ca      	b.n	80027f0 <HAL_I2C_IsDeviceReady+0xc0>
        hi2c->State = HAL_I2C_STATE_READY;
 800285a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800285e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8002862:	e774      	b.n	800274e <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002868:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800286c:	4620      	mov	r0, r4
 800286e:	9500      	str	r5, [sp, #0]
 8002870:	2319      	movs	r3, #25
 8002872:	2201      	movs	r2, #1
 8002874:	f7ff fd85 	bl	8002382 <I2C_WaitOnFlagUntilTimeout>
 8002878:	2800      	cmp	r0, #0
 800287a:	d1da      	bne.n	8002832 <HAL_I2C_IsDeviceReady+0x102>
      I2C_Trials++;
 800287c:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800287e:	4557      	cmp	r7, sl
 8002880:	d392      	bcc.n	80027a8 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 8002882:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002886:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800288a:	e7d2      	b.n	8002832 <HAL_I2C_IsDeviceReady+0x102>
 800288c:	00100002 	.word	0x00100002

08002890 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002890:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002892:	4604      	mov	r4, r0
{
 8002894:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8002896:	b310      	cbz	r0, 80028de <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002898:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800289c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028a0:	b91b      	cbnz	r3, 80028aa <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a2:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028a6:	f003 fae1 	bl	8005e6c <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028aa:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ac:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ae:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80028b0:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80028b4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80028b8:	f001 fe41 	bl	800453e <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	4625      	mov	r5, r4
 80028c4:	6033      	str	r3, [r6, #0]
 80028c6:	1d27      	adds	r7, r4, #4
 80028c8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80028cc:	f855 0b10 	ldr.w	r0, [r5], #16
 80028d0:	f001 fe25 	bl	800451e <USB_CoreInit>
 80028d4:	4606      	mov	r6, r0
 80028d6:	b120      	cbz	r0, 80028e2 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028d8:	2302      	movs	r3, #2
 80028da:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80028de:	2501      	movs	r5, #1
 80028e0:	e04b      	b.n	800297a <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028e2:	4601      	mov	r1, r0
 80028e4:	6820      	ldr	r0, [r4, #0]
 80028e6:	f001 fe34 	bl	8004552 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ea:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ec:	f04f 0e01 	mov.w	lr, #1
 80028f0:	2628      	movs	r6, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028f2:	4601      	mov	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80028f8:	b2c2      	uxtb	r2, r0
 80028fa:	4594      	cmp	ip, r2
 80028fc:	f100 0001 	add.w	r0, r0, #1
 8002900:	d818      	bhi.n	8002934 <HAL_PCD_Init+0xa4>
 8002902:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002904:	2628      	movs	r6, #40	; 0x28
 8002906:	4619      	mov	r1, r3
 8002908:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290a:	4584      	cmp	ip, r0
 800290c:	f103 0301 	add.w	r3, r3, #1
 8002910:	d81d      	bhi.n	800294e <HAL_PCD_Init+0xbe>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002914:	466e      	mov	r6, sp
 8002916:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	6033      	str	r3, [r6, #0]
 800291c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002920:	6820      	ldr	r0, [r4, #0]
 8002922:	f001 fe18 	bl	8004556 <USB_DevInit>
 8002926:	2301      	movs	r3, #1
 8002928:	4605      	mov	r5, r0
 800292a:	b1f8      	cbz	r0, 800296c <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800292c:	2202      	movs	r2, #2
 800292e:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
 8002932:	e7d4      	b.n	80028de <HAL_PCD_Init+0x4e>
 8002934:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002938:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 800293c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002940:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002942:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002946:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 800294a:	6419      	str	r1, [r3, #64]	; 0x40
 800294c:	e7d4      	b.n	80028f8 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 800294e:	fb06 4200 	mla	r2, r6, r0, r4
 8002952:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8002956:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800295a:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800295e:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002962:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002966:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 800296a:	e7cd      	b.n	8002908 <HAL_PCD_Init+0x78>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 800296c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002970:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002974:	6820      	ldr	r0, [r4, #0]
 8002976:	f002 f86e 	bl	8004a56 <USB_DevDisconnect>

  return HAL_OK;
}
 800297a:	4628      	mov	r0, r5
 800297c:	b007      	add	sp, #28
 800297e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002980 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002980:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002982:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8002986:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002988:	2b01      	cmp	r3, #1
 800298a:	d010      	beq.n	80029ae <HAL_PCD_Start+0x2e>
 800298c:	2501      	movs	r5, #1
 800298e:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002992:	6800      	ldr	r0, [r0, #0]
 8002994:	f001 fdca 	bl	800452c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002998:	4629      	mov	r1, r5
 800299a:	4620      	mov	r0, r4
 800299c:	f003 fb97 	bl	80060ce <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80029a0:	6820      	ldr	r0, [r4, #0]
 80029a2:	f002 f856 	bl	8004a52 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80029ac:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80029ae:	2002      	movs	r0, #2
 80029b0:	e7fc      	b.n	80029ac <HAL_PCD_Start+0x2c>

080029b2 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80029b2:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 80029b6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80029b8:	2a01      	cmp	r2, #1
{
 80029ba:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80029bc:	d00b      	beq.n	80029d6 <HAL_PCD_SetAddress+0x24>
 80029be:	2201      	movs	r2, #1
 80029c0:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80029c4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029c8:	6800      	ldr	r0, [r0, #0]
 80029ca:	f002 f83c 	bl	8004a46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80029d4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80029d6:	2002      	movs	r0, #2
 80029d8:	e7fc      	b.n	80029d4 <HAL_PCD_SetAddress+0x22>
	...

080029dc <HAL_PCD_IRQHandler>:
{
 80029dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e0:	4604      	mov	r4, r0
 80029e2:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80029e4:	6800      	ldr	r0, [r0, #0]
 80029e6:	f002 f838 	bl	8004a5a <USB_ReadInterrupts>
 80029ea:	0400      	lsls	r0, r0, #16
 80029ec:	d509      	bpl.n	8002a02 <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029ee:	f8df 9950 	ldr.w	r9, [pc, #2384]	; 8003340 <HAL_PCD_IRQHandler+0x964>
 80029f2:	f8df 8950 	ldr.w	r8, [pc, #2384]	; 8003344 <HAL_PCD_IRQHandler+0x968>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029f6:	6820      	ldr	r0, [r4, #0]
 80029f8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	f100 80bc 	bmi.w	8002b7a <HAL_PCD_IRQHandler+0x19e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a02:	6820      	ldr	r0, [r4, #0]
 8002a04:	f002 f829 	bl	8004a5a <USB_ReadInterrupts>
 8002a08:	0541      	lsls	r1, r0, #21
 8002a0a:	d50f      	bpl.n	8002a2c <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a0c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8002a0e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a10:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002a14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002a20:	f003 fa5f 	bl	8005ee2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a24:	2100      	movs	r1, #0
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7ff ffc3 	bl	80029b2 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a2c:	6820      	ldr	r0, [r4, #0]
 8002a2e:	f002 f814 	bl	8004a5a <USB_ReadInterrupts>
 8002a32:	0447      	lsls	r7, r0, #17
 8002a34:	d508      	bpl.n	8002a48 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002a48:	6820      	ldr	r0, [r4, #0]
 8002a4a:	f002 f806 	bl	8004a5a <USB_ReadInterrupts>
 8002a4e:	0486      	lsls	r6, r0, #18
 8002a50:	d508      	bpl.n	8002a64 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a52:	6822      	ldr	r2, [r4, #0]
 8002a54:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002a64:	6820      	ldr	r0, [r4, #0]
 8002a66:	f001 fff8 	bl	8004a5a <USB_ReadInterrupts>
 8002a6a:	04c5      	lsls	r5, r0, #19
 8002a6c:	d51c      	bpl.n	8002aa8 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a6e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8002a70:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a72:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002a76:	f023 0304 	bic.w	r3, r3, #4
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a82:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002a86:	f023 0308 	bic.w	r3, r3, #8
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002a92:	f003 fa49 	bl	8005f28 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a96:	6822      	ldr	r2, [r4, #0]
 8002a98:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	0c1b      	lsrs	r3, r3, #16
 8002aa4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002aa8:	6820      	ldr	r0, [r4, #0]
 8002aaa:	f001 ffd6 	bl	8004a5a <USB_ReadInterrupts>
 8002aae:	0500      	lsls	r0, r0, #20
 8002ab0:	d541      	bpl.n	8002b36 <HAL_PCD_IRQHandler+0x15a>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002aba:	f82d 1012 	strh.w	r1, [sp, r2, lsl #1]
 8002abe:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8002ac0:	2a08      	cmp	r2, #8
 8002ac2:	d1f8      	bne.n	8002ab6 <HAL_PCD_IRQHandler+0xda>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002ac4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ad0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	0412      	lsls	r2, r2, #16
 8002ada:	0c12      	lsrs	r2, r2, #16
 8002adc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002ae0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002ae4:	0551      	lsls	r1, r2, #21
 8002ae6:	d5fb      	bpl.n	8002ae0 <HAL_PCD_IRQHandler+0x104>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ae8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af0:	0412      	lsls	r2, r2, #16
 8002af2:	0c12      	lsrs	r2, r2, #16
 8002af4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002af8:	2200      	movs	r2, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002afa:	f83d 1012 	ldrh.w	r1, [sp, r2, lsl #1]
 8002afe:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8002b02:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8002b04:	2a08      	cmp	r2, #8
 8002b06:	d1f8      	bne.n	8002afa <HAL_PCD_IRQHandler+0x11e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b08:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002b0c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b0e:	f042 0208 	orr.w	r2, r2, #8
 8002b12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b16:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b1e:	0412      	lsls	r2, r2, #16
 8002b20:	0c12      	lsrs	r2, r2, #16
 8002b22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002b26:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002b2a:	f042 0204 	orr.w	r2, r2, #4
 8002b2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002b32:	f003 f9e9 	bl	8005f08 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002b36:	6820      	ldr	r0, [r4, #0]
 8002b38:	f001 ff8f 	bl	8004a5a <USB_ReadInterrupts>
 8002b3c:	0582      	lsls	r2, r0, #22
 8002b3e:	d50b      	bpl.n	8002b58 <HAL_PCD_IRQHandler+0x17c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b40:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8002b42:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b44:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002b54:	f003 f9c1 	bl	8005eda <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	f001 ff7e 	bl	8004a5a <USB_ReadInterrupts>
 8002b5e:	05c3      	lsls	r3, r0, #23
 8002b60:	d508      	bpl.n	8002b74 <HAL_PCD_IRQHandler+0x198>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b62:	6822      	ldr	r2, [r4, #0]
 8002b64:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8002b74:	b005      	add	sp, #20
 8002b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8002b7a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8002b7e:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8002b80:	f011 060f 	ands.w	r6, r1, #15
 8002b84:	f040 80b5 	bne.w	8002cf2 <HAL_PCD_IRQHandler+0x316>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b88:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b8c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b8e:	d12a      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x20a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b90:	ea09 0303 	and.w	r3, r9, r3
 8002b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b98:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b9a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b9e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002ba2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ba6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002baa:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8002bae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb4:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002bb6:	4413      	add	r3, r2
 8002bb8:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f003 f985 	bl	8005eca <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bc0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f43f af16 	beq.w	80029f6 <HAL_PCD_IRQHandler+0x1a>
 8002bca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bcc:	2a00      	cmp	r2, #0
 8002bce:	f47f af12 	bne.w	80029f6 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bd2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002bd6:	6821      	ldr	r1, [r4, #0]
 8002bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bdc:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002be0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8002be4:	e707      	b.n	80029f6 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002be6:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002be8:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8002bec:	d020      	beq.n	8002c30 <HAL_PCD_IRQHandler+0x254>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002bf2:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bf6:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002bfe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c02:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c06:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c0e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c12:	f002 fa85 	bl	8005120 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c16:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c18:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c1a:	8813      	ldrh	r3, [r2, #0]
 8002c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c20:	051b      	lsls	r3, r3, #20
 8002c22:	0d1b      	lsrs	r3, r3, #20
 8002c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c28:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c2a:	f003 f93f 	bl	8005eac <HAL_PCD_SetupStageCallback>
 8002c2e:	e6e2      	b.n	80029f6 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c30:	041a      	lsls	r2, r3, #16
 8002c32:	f57f aee0 	bpl.w	80029f6 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c36:	8803      	ldrh	r3, [r0, #0]
 8002c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3c:	051b      	lsls	r3, r3, #20
 8002c3e:	0d1b      	lsrs	r3, r3, #20
 8002c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c44:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c46:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c4a:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002c4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c56:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c5e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c62:	b18b      	cbz	r3, 8002c88 <HAL_PCD_IRQHandler+0x2ac>
 8002c64:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002c68:	b171      	cbz	r1, 8002c88 <HAL_PCD_IRQHandler+0x2ac>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c6a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002c6e:	f002 fa57 	bl	8005120 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002c76:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c7a:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c82:	4620      	mov	r0, r4
 8002c84:	f003 f918 	bl	8005eb8 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002c88:	6821      	ldr	r1, [r4, #0]
 8002c8a:	880b      	ldrh	r3, [r1, #0]
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	f53f aeb2 	bmi.w	80029f6 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c92:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002c96:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8002ca0:	b9bd      	cbnz	r5, 8002cd2 <HAL_PCD_IRQHandler+0x2f6>
 8002ca2:	5ac2      	ldrh	r2, [r0, r3]
 8002ca4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002ca8:	0412      	lsls	r2, r2, #16
 8002caa:	0c12      	lsrs	r2, r2, #16
 8002cac:	52c2      	strh	r2, [r0, r3]
 8002cae:	5ac2      	ldrh	r2, [r0, r3]
 8002cb0:	ea48 0202 	orr.w	r2, r8, r2
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cb8:	880b      	ldrh	r3, [r1, #0]
 8002cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cce:	800b      	strh	r3, [r1, #0]
 8002cd0:	e691      	b.n	80029f6 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cd2:	2d3e      	cmp	r5, #62	; 0x3e
 8002cd4:	d805      	bhi.n	8002ce2 <HAL_PCD_IRQHandler+0x306>
 8002cd6:	086a      	lsrs	r2, r5, #1
 8002cd8:	07ef      	lsls	r7, r5, #31
 8002cda:	bf48      	it	mi
 8002cdc:	3201      	addmi	r2, #1
 8002cde:	0292      	lsls	r2, r2, #10
 8002ce0:	e7e8      	b.n	8002cb4 <HAL_PCD_IRQHandler+0x2d8>
 8002ce2:	096a      	lsrs	r2, r5, #5
 8002ce4:	06ee      	lsls	r6, r5, #27
 8002ce6:	bf08      	it	eq
 8002ce8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002cec:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8002cf0:	e7e0      	b.n	8002cb4 <HAL_PCD_IRQHandler+0x2d8>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002cf2:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
 8002cf6:	b2bf      	uxth	r7, r7
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cf8:	043d      	lsls	r5, r7, #16
 8002cfa:	f140 80f2 	bpl.w	8002ee2 <HAL_PCD_IRQHandler+0x506>
        if (ep->doublebuffer == 0U)
 8002cfe:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d00:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002d04:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	0d1b      	lsrs	r3, r3, #20
 8002d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d14:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002d18:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8002d1c:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8002d20:	b9ab      	cbnz	r3, 8002d4e <HAL_PCD_IRQHandler+0x372>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d26:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002d2a:	3306      	adds	r3, #6
 8002d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d30:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002d34:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	f000 80b6 	beq.w	8002eaa <HAL_PCD_IRQHandler+0x4ce>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d3e:	462b      	mov	r3, r5
 8002d40:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d44:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002d48:	f002 f9ea 	bl	8005120 <USB_ReadPMA>
 8002d4c:	e0ad      	b.n	8002eaa <HAL_PCD_IRQHandler+0x4ce>
          if (ep->type == EP_TYPE_BULK)
 8002d4e:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8002d52:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	f040 8089 	bne.w	8002e6e <HAL_PCD_IRQHandler+0x492>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d5c:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 8002d60:	ea4f 05c2 	mov.w	r5, r2, lsl #3
 8002d64:	f8d1 3180 	ldr.w	r3, [r1, #384]	; 0x180
 8002d68:	f007 0e40 	and.w	lr, r7, #64	; 0x40
 8002d6c:	d03e      	beq.n	8002dec <HAL_PCD_IRQHandler+0x410>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d6e:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 8002d72:	4455      	add	r5, sl
 8002d74:	3502      	adds	r5, #2
 8002d76:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002d7a:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002d7e:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
    }
    else
    {
      ep->xfer_len = 0U;
 8002d80:	bf8c      	ite	hi
 8002d82:	2300      	movhi	r3, #0
      ep->xfer_len -= count;
 8002d84:	1b5b      	subls	r3, r3, r5
      ep->xfer_len = 0U;
 8002d86:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
 8002d8a:	2328      	movs	r3, #40	; 0x28
 8002d8c:	fb03 4306 	mla	r3, r3, r6, r4
 8002d90:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002d94:	b96b      	cbnz	r3, 8002db2 <HAL_PCD_IRQHandler+0x3d6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002db2:	f1be 0f00 	cmp.w	lr, #0
 8002db6:	d010      	beq.n	8002dda <HAL_PCD_IRQHandler+0x3fe>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002db8:	2328      	movs	r3, #40	; 0x28
 8002dba:	fb03 4306 	mla	r3, r3, r6, r4
 8002dbe:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8002dc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dca:	051b      	lsls	r3, r3, #20
 8002dcc:	0d1b      	lsrs	r3, r3, #20
 8002dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dd6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8002dda:	2d00      	cmp	r5, #0
 8002ddc:	d065      	beq.n	8002eaa <HAL_PCD_IRQHandler+0x4ce>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dde:	2128      	movs	r1, #40	; 0x28
 8002de0:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002de4:	462b      	mov	r3, r5
 8002de6:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002dea:	e7ab      	b.n	8002d44 <HAL_PCD_IRQHandler+0x368>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dec:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 8002df0:	445d      	add	r5, fp
 8002df2:	3506      	adds	r5, #6
 8002df4:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002df8:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002dfc:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
 8002dfe:	bf9c      	itt	ls
 8002e00:	1b5b      	subls	r3, r3, r5
 8002e02:	f8c1 3180 	strls.w	r3, [r1, #384]	; 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8002e06:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002e0a:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 8002e0e:	bf88      	it	hi
 8002e10:	f8c1 a180 	strhi.w	sl, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002e14:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002e18:	b96b      	cbnz	r3, 8002e36 <HAL_PCD_IRQHandler+0x45a>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e36:	f1be 0f00 	cmp.w	lr, #0
 8002e3a:	d110      	bne.n	8002e5e <HAL_PCD_IRQHandler+0x482>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e3c:	2328      	movs	r3, #40	; 0x28
 8002e3e:	fb03 4306 	mla	r3, r3, r6, r4
 8002e42:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8002e46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e4e:	051b      	lsls	r3, r3, #20
 8002e50:	0d1b      	lsrs	r3, r3, #20
 8002e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8002e5e:	b325      	cbz	r5, 8002eaa <HAL_PCD_IRQHandler+0x4ce>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e60:	2128      	movs	r1, #40	; 0x28
 8002e62:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e66:	462b      	mov	r3, r5
 8002e68:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002e6c:	e76a      	b.n	8002d44 <HAL_PCD_IRQHandler+0x368>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e76:	051b      	lsls	r3, r3, #20
 8002e78:	0d1b      	lsrs	r3, r3, #20
 8002e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e86:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8002e8a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e94:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e98:	d060      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x580>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e9a:	3202      	adds	r2, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002ea2:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	d19c      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x408>
        ep->xfer_count += count;
 8002eaa:	2128      	movs	r1, #40	; 0x28
 8002eac:	4371      	muls	r1, r6
 8002eae:	1863      	adds	r3, r4, r1
 8002eb0:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002eb4:	442a      	add	r2, r5
 8002eb6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002eba:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002ebe:	442a      	add	r2, r5
 8002ec0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ec4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002ec8:	b11a      	cbz	r2, 8002ed2 <HAL_PCD_IRQHandler+0x4f6>
 8002eca:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002ece:	429d      	cmp	r5, r3
 8002ed0:	d24d      	bcs.n	8002f6e <HAL_PCD_IRQHandler+0x592>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ed2:	2328      	movs	r3, #40	; 0x28
 8002ed4:	fb03 4306 	mla	r3, r3, r6, r4
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002ede:	f002 ffeb 	bl	8005eb8 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ee2:	0638      	lsls	r0, r7, #24
 8002ee4:	f57f ad87 	bpl.w	80029f6 <HAL_PCD_IRQHandler+0x1a>
 8002ee8:	2528      	movs	r5, #40	; 0x28
 8002eea:	6820      	ldr	r0, [r4, #0]
 8002eec:	fb05 4506 	mla	r5, r5, r6, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ef0:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002ef4:	ea09 0303 	and.w	r3, r9, r3
 8002ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efc:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002f00:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 8002f04:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8002f08:	2a03      	cmp	r2, #3
 8002f0a:	d004      	beq.n	8002f16 <HAL_PCD_IRQHandler+0x53a>
 8002f0c:	b11a      	cbz	r2, 8002f16 <HAL_PCD_IRQHandler+0x53a>
 8002f0e:	2a02      	cmp	r2, #2
 8002f10:	d140      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x5b8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002f12:	05f9      	lsls	r1, r7, #23
 8002f14:	d43e      	bmi.n	8002f94 <HAL_PCD_IRQHandler+0x5b8>
          if (ep->xfer_len > TxByteNbre)
 8002f16:	2128      	movs	r1, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f18:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 8002f1c:	fb01 4c06 	mla	ip, r1, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f20:	3202      	adds	r2, #2
 8002f22:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002f26:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f2a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8002f2e:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 8002f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f36:	429f      	cmp	r7, r3
            ep->xfer_len = 0U;
 8002f38:	bf92      	itee	ls
 8002f3a:	2200      	movls	r2, #0
            ep->xfer_len -= TxByteNbre;
 8002f3c:	1aff      	subhi	r7, r7, r3
 8002f3e:	f8cc 7040 	strhi.w	r7, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002f42:	fb01 4706 	mla	r7, r1, r6, r4
            ep->xfer_len = 0U;
 8002f46:	bf98      	it	ls
 8002f48:	f8cc 2040 	strls.w	r2, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002f4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f4e:	b9aa      	cbnz	r2, 8002f7c <HAL_PCD_IRQHandler+0x5a0>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f50:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002f54:	4620      	mov	r0, r4
 8002f56:	f002 ffb8 	bl	8005eca <HAL_PCD_DataInStageCallback>
 8002f5a:	e54c      	b.n	80029f6 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f5c:	3206      	adds	r2, #6
 8002f5e:	4413      	add	r3, r2
 8002f60:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002f64:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002f68:	2d00      	cmp	r5, #0
 8002f6a:	d09e      	beq.n	8002eaa <HAL_PCD_IRQHandler+0x4ce>
 8002f6c:	e77b      	b.n	8002e66 <HAL_PCD_IRQHandler+0x48a>
        ep = &hpcd->OUT_ep[epindex];
 8002f6e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f72:	4421      	add	r1, r4
 8002f74:	6820      	ldr	r0, [r4, #0]
 8002f76:	f001 fd85 	bl	8004a84 <USB_EPStartXfer>
 8002f7a:	e7b2      	b.n	8002ee2 <HAL_PCD_IRQHandler+0x506>
            ep->xfer_buff += TxByteNbre;
 8002f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8002f7e:	fb06 1101 	mla	r1, r6, r1, r1
            ep->xfer_buff += TxByteNbre;
 8002f82:	441a      	add	r2, r3
 8002f84:	63fa      	str	r2, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f88:	4421      	add	r1, r4
            ep->xfer_count += TxByteNbre;
 8002f8a:	4413      	add	r3, r2
 8002f8c:	647b      	str	r3, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f8e:	f001 fd79 	bl	8004a84 <USB_EPStartXfer>
 8002f92:	e530      	b.n	80029f6 <HAL_PCD_IRQHandler+0x1a>
 8002f94:	2128      	movs	r1, #40	; 0x28
 8002f96:	fb01 4106 	mla	r1, r1, r6, r4
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f9a:	f017 0a40 	ands.w	sl, r7, #64	; 0x40
 8002f9e:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8002fa2:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8002fa6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002fa8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002fac:	f000 80e3 	beq.w	8003176 <HAL_PCD_IRQHandler+0x79a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fb0:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 8002fb4:	b2bf      	uxth	r7, r7
 8002fb6:	44d4      	add	ip, sl
 8002fb8:	f10c 0c02 	add.w	ip, ip, #2
 8002fbc:	f83e c01c 	ldrh.w	ip, [lr, ip, lsl #1]

    if (ep->xfer_len > TxByteNbre)
 8002fc0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002fc4:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8002fc6:	bf2c      	ite	cs
 8002fc8:	2200      	movcs	r2, #0
      ep->xfer_len -= TxByteNbre;
 8002fca:	eba2 020c 	subcc.w	r2, r2, ip
      ep->xfer_len = 0U;
 8002fce:	640a      	str	r2, [r1, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fd0:	2228      	movs	r2, #40	; 0x28
 8002fd2:	fb02 4206 	mla	r2, r2, r6, r4
 8002fd6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002fd8:	2900      	cmp	r1, #0
 8002fda:	d157      	bne.n	800308c <HAL_PCD_IRQHandler+0x6b0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fdc:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002fe0:	2a00      	cmp	r2, #0
 8002fe2:	d13e      	bne.n	8003062 <HAL_PCD_IRQHandler+0x686>
 8002fe4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002fe8:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8002fec:	4411      	add	r1, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	5aca      	ldrh	r2, [r1, r3]
 8002ff2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002ff6:	0412      	lsls	r2, r2, #16
 8002ff8:	0c12      	lsrs	r2, r2, #16
 8002ffa:	52ca      	strh	r2, [r1, r3]
 8002ffc:	5aca      	ldrh	r2, [r1, r3]
 8002ffe:	ea48 0202 	orr.w	r2, r8, r2
 8003002:	b292      	uxth	r2, r2
 8003004:	52ca      	strh	r2, [r1, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003006:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800300a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800300e:	bb92      	cbnz	r2, 8003076 <HAL_PCD_IRQHandler+0x69a>
 8003010:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003014:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003018:	4410      	add	r0, r2
 800301a:	011a      	lsls	r2, r3, #4
 800301c:	5a83      	ldrh	r3, [r0, r2]
 800301e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	5283      	strh	r3, [r0, r2]
 8003028:	5a83      	ldrh	r3, [r0, r2]
 800302a:	ea48 0303 	orr.w	r3, r8, r3
 800302e:	b29b      	uxth	r3, r3
 8003030:	5283      	strh	r3, [r0, r2]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003032:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003036:	4620      	mov	r0, r4
 8003038:	f002 ff47 	bl	8005eca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800303c:	2f00      	cmp	r7, #0
 800303e:	f000 80e6 	beq.w	800320e <HAL_PCD_IRQHandler+0x832>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003042:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003046:	6822      	ldr	r2, [r4, #0]
 8003048:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800304c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003050:	051b      	lsls	r3, r3, #20
 8003052:	0d1b      	lsrs	r3, r3, #20
 8003054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003060:	e0d5      	b.n	800320e <HAL_PCD_IRQHandler+0x832>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003062:	2a01      	cmp	r2, #1
 8003064:	d1cf      	bne.n	8003006 <HAL_PCD_IRQHandler+0x62a>
 8003066:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800306a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800306e:	4432      	add	r2, r6
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	52d1      	strh	r1, [r2, r3]
 8003074:	e7c7      	b.n	8003006 <HAL_PCD_IRQHandler+0x62a>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003076:	2a01      	cmp	r2, #1
 8003078:	d1db      	bne.n	8003032 <HAL_PCD_IRQHandler+0x656>
 800307a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800307e:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003082:	4410      	add	r0, r2
 8003084:	2200      	movs	r2, #0
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	52c2      	strh	r2, [r0, r3]
 800308a:	e7d2      	b.n	8003032 <HAL_PCD_IRQHandler+0x656>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800308c:	b15f      	cbz	r7, 80030a6 <HAL_PCD_IRQHandler+0x6ca>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800308e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003092:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003096:	0512      	lsls	r2, r2, #20
 8003098:	0d12      	lsrs	r2, r2, #20
 800309a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800309e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80030a6:	2328      	movs	r3, #40	; 0x28
 80030a8:	fb03 4306 	mla	r3, r3, r6, r4
 80030ac:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80030b0:	2a01      	cmp	r2, #1
 80030b2:	f040 80ac 	bne.w	800320e <HAL_PCD_IRQHandler+0x832>
        ep->xfer_count += TxByteNbre;
 80030b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80030b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80030ba:	4462      	add	r2, ip
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80030be:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80030c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80030c2:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 80030c4:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 80030c6:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80030c8:	d326      	bcc.n	8003118 <HAL_PCD_IRQHandler+0x73c>
          ep->xfer_len_db -= len;
 80030ca:	1abf      	subs	r7, r7, r2
 80030cc:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030ce:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 80030d2:	b293      	uxth	r3, r2
 80030d4:	2f00      	cmp	r7, #0
 80030d6:	d142      	bne.n	800315e <HAL_PCD_IRQHandler+0x782>
 80030d8:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80030dc:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 80030e0:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 80030e4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80030e8:	4477      	add	r7, lr
 80030ea:	bb02      	cbnz	r2, 800312e <HAL_PCD_IRQHandler+0x752>
 80030ec:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80030f0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80030f4:	0412      	lsls	r2, r2, #16
 80030f6:	0c12      	lsrs	r2, r2, #16
 80030f8:	f82c 2007 	strh.w	r2, [ip, r7]
 80030fc:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8003100:	ea48 0202 	orr.w	r2, r8, r2
 8003104:	b292      	uxth	r2, r2
 8003106:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800310a:	2228      	movs	r2, #40	; 0x28
 800310c:	fb02 4606 	mla	r6, r2, r6, r4
 8003110:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003112:	f001 fca7 	bl	8004a64 <USB_WritePMA>
 8003116:	e07a      	b.n	800320e <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 8003118:	b91f      	cbnz	r7, 8003122 <HAL_PCD_IRQHandler+0x746>
          ep->xfer_fill_db = 0U;
 800311a:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 800311e:	4662      	mov	r2, ip
 8003120:	e7d5      	b.n	80030ce <HAL_PCD_IRQHandler+0x6f2>
          ep->xfer_fill_db = 0U;
 8003122:	2200      	movs	r2, #0
 8003124:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8003128:	649a      	str	r2, [r3, #72]	; 0x48
 800312a:	463a      	mov	r2, r7
 800312c:	e7cf      	b.n	80030ce <HAL_PCD_IRQHandler+0x6f2>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800312e:	2a3e      	cmp	r2, #62	; 0x3e
 8003130:	d80c      	bhi.n	800314c <HAL_PCD_IRQHandler+0x770>
 8003132:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8003136:	07d2      	lsls	r2, r2, #31
 8003138:	bf48      	it	mi
 800313a:	f10e 0e01 	addmi.w	lr, lr, #1
 800313e:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8003142:	fa1f fe8e 	uxth.w	lr, lr
 8003146:	f82c e007 	strh.w	lr, [ip, r7]
 800314a:	e7de      	b.n	800310a <HAL_PCD_IRQHandler+0x72e>
 800314c:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8003150:	06d2      	lsls	r2, r2, #27
 8003152:	bf08      	it	eq
 8003154:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8003158:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800315c:	e7f1      	b.n	8003142 <HAL_PCD_IRQHandler+0x766>
 800315e:	2f01      	cmp	r7, #1
 8003160:	d1d3      	bne.n	800310a <HAL_PCD_IRQHandler+0x72e>
 8003162:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003166:	f200 4704 	addw	r7, r0, #1028	; 0x404
 800316a:	4417      	add	r7, r2
 800316c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	52bb      	strh	r3, [r7, r2]
 8003174:	e7c9      	b.n	800310a <HAL_PCD_IRQHandler+0x72e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003176:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 800317a:	b2bf      	uxth	r7, r7
 800317c:	44dc      	add	ip, fp
 800317e:	f10c 0c06 	add.w	ip, ip, #6
 8003182:	f83e c01c 	ldrh.w	ip, [lr, ip, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 8003186:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800318a:	4594      	cmp	ip, r2
      ep->xfer_len -= TxByteNbre;
 800318c:	bf9c      	itt	ls
 800318e:	eba2 020c 	subls.w	r2, r2, ip
 8003192:	640a      	strls	r2, [r1, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003194:	f04f 0228 	mov.w	r2, #40	; 0x28
 8003198:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len = 0U;
 800319c:	bf88      	it	hi
 800319e:	f8c1 a040 	strhi.w	sl, [r1, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80031a2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80031a4:	2900      	cmp	r1, #0
 80031a6:	d15a      	bne.n	800325e <HAL_PCD_IRQHandler+0x882>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a8:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d141      	bne.n	8003234 <HAL_PCD_IRQHandler+0x858>
 80031b0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80031b4:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80031b8:	4411      	add	r1, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	5aca      	ldrh	r2, [r1, r3]
 80031be:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80031c2:	0412      	lsls	r2, r2, #16
 80031c4:	0c12      	lsrs	r2, r2, #16
 80031c6:	52ca      	strh	r2, [r1, r3]
 80031c8:	5aca      	ldrh	r2, [r1, r3]
 80031ca:	ea48 0202 	orr.w	r2, r8, r2
 80031ce:	b292      	uxth	r2, r2
 80031d0:	52ca      	strh	r2, [r1, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031d2:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80031d6:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80031da:	bbaa      	cbnz	r2, 8003248 <HAL_PCD_IRQHandler+0x86c>
 80031dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80031e0:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80031e4:	4410      	add	r0, r2
 80031e6:	011a      	lsls	r2, r3, #4
 80031e8:	5a83      	ldrh	r3, [r0, r2]
 80031ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	5283      	strh	r3, [r0, r2]
 80031f4:	5a83      	ldrh	r3, [r0, r2]
 80031f6:	ea48 0303 	orr.w	r3, r8, r3
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	5283      	strh	r3, [r0, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031fe:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003202:	4620      	mov	r0, r4
 8003204:	f002 fe61 	bl	8005eca <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003208:	2f00      	cmp	r7, #0
 800320a:	f43f af1a 	beq.w	8003042 <HAL_PCD_IRQHandler+0x666>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800320e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003212:	6822      	ldr	r2, [r4, #0]
 8003214:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003220:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003230:	f7ff bbe1 	b.w	80029f6 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003234:	2a01      	cmp	r2, #1
 8003236:	d1cc      	bne.n	80031d2 <HAL_PCD_IRQHandler+0x7f6>
 8003238:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800323c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003240:	4432      	add	r2, r6
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	52d1      	strh	r1, [r2, r3]
 8003246:	e7c4      	b.n	80031d2 <HAL_PCD_IRQHandler+0x7f6>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003248:	2a01      	cmp	r2, #1
 800324a:	d1d8      	bne.n	80031fe <HAL_PCD_IRQHandler+0x822>
 800324c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003250:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003254:	4410      	add	r0, r2
 8003256:	2200      	movs	r2, #0
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	52c2      	strh	r2, [r0, r3]
 800325c:	e7cf      	b.n	80031fe <HAL_PCD_IRQHandler+0x822>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800325e:	b95f      	cbnz	r7, 8003278 <HAL_PCD_IRQHandler+0x89c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003260:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003264:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003268:	0512      	lsls	r2, r2, #20
 800326a:	0d12      	lsrs	r2, r2, #20
 800326c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003270:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003274:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003278:	2328      	movs	r3, #40	; 0x28
 800327a:	fb03 4306 	mla	r3, r3, r6, r4
 800327e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8003282:	2a01      	cmp	r2, #1
 8003284:	d1c3      	bne.n	800320e <HAL_PCD_IRQHandler+0x832>
        ep->xfer_count += TxByteNbre;
 8003286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8003288:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800328a:	4462      	add	r2, ip
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800328e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8003290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8003292:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8003294:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8003296:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003298:	d323      	bcc.n	80032e2 <HAL_PCD_IRQHandler+0x906>
          ep->xfer_len_db -= len;
 800329a:	1abf      	subs	r7, r7, r2
 800329c:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800329e:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 80032a2:	b293      	uxth	r3, r2
 80032a4:	2f00      	cmp	r7, #0
 80032a6:	d13f      	bne.n	8003328 <HAL_PCD_IRQHandler+0x94c>
 80032a8:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80032ac:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 80032b0:	44bc      	add	ip, r7
 80032b2:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 80032b6:	013f      	lsls	r7, r7, #4
 80032b8:	b9f2      	cbnz	r2, 80032f8 <HAL_PCD_IRQHandler+0x91c>
 80032ba:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80032be:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80032c2:	0412      	lsls	r2, r2, #16
 80032c4:	0c12      	lsrs	r2, r2, #16
 80032c6:	f82c 2007 	strh.w	r2, [ip, r7]
 80032ca:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80032ce:	ea48 0202 	orr.w	r2, r8, r2
 80032d2:	b292      	uxth	r2, r2
 80032d4:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032d8:	2228      	movs	r2, #40	; 0x28
 80032da:	fb02 4606 	mla	r6, r2, r6, r4
 80032de:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80032e0:	e717      	b.n	8003112 <HAL_PCD_IRQHandler+0x736>
        else if (ep->xfer_len_db == 0U)
 80032e2:	b91f      	cbnz	r7, 80032ec <HAL_PCD_IRQHandler+0x910>
          ep->xfer_fill_db = 0U;
 80032e4:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 80032e8:	4662      	mov	r2, ip
 80032ea:	e7d8      	b.n	800329e <HAL_PCD_IRQHandler+0x8c2>
          ep->xfer_len_db = 0U;
 80032ec:	2200      	movs	r2, #0
 80032ee:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80032f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80032f4:	463a      	mov	r2, r7
 80032f6:	e7d2      	b.n	800329e <HAL_PCD_IRQHandler+0x8c2>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032f8:	2a3e      	cmp	r2, #62	; 0x3e
 80032fa:	d80c      	bhi.n	8003316 <HAL_PCD_IRQHandler+0x93a>
 80032fc:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8003300:	07d2      	lsls	r2, r2, #31
 8003302:	bf48      	it	mi
 8003304:	f10e 0e01 	addmi.w	lr, lr, #1
 8003308:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 800330c:	fa1f fe8e 	uxth.w	lr, lr
 8003310:	f82c e007 	strh.w	lr, [ip, r7]
 8003314:	e7e0      	b.n	80032d8 <HAL_PCD_IRQHandler+0x8fc>
 8003316:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800331a:	06d2      	lsls	r2, r2, #27
 800331c:	bf08      	it	eq
 800331e:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8003322:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8003326:	e7f1      	b.n	800330c <HAL_PCD_IRQHandler+0x930>
 8003328:	2f01      	cmp	r7, #1
 800332a:	d1d5      	bne.n	80032d8 <HAL_PCD_IRQHandler+0x8fc>
 800332c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003330:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 8003334:	4417      	add	r7, r2
 8003336:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800333a:	0112      	lsls	r2, r2, #4
 800333c:	52bb      	strh	r3, [r7, r2]
 800333e:	e7cb      	b.n	80032d8 <HAL_PCD_IRQHandler+0x8fc>
 8003340:	ffff8f0f 	.word	0xffff8f0f
 8003344:	ffff8000 	.word	0xffff8000

08003348 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003348:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	f001 0507 	and.w	r5, r1, #7
 8003352:	4604      	mov	r4, r0
 8003354:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8003358:	d01c      	beq.n	8003394 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335a:	fb05 1101 	mla	r1, r5, r1, r1
 800335e:	4401      	add	r1, r0
    ep->is_in = 1U;
 8003360:	2001      	movs	r0, #1
 8003362:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8003364:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8003366:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003368:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800336a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800336c:	b102      	cbz	r2, 8003370 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 800336e:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8003370:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003372:	bf04      	itt	eq
 8003374:	2300      	moveq	r3, #0
 8003376:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003378:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800337c:	2b01      	cmp	r3, #1
 800337e:	d013      	beq.n	80033a8 <HAL_PCD_EP_Open+0x60>
 8003380:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003382:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003384:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003388:	f001 f8fa 	bl	8004580 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800338c:	2000      	movs	r0, #0
 800338e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003392:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8003394:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003396:	fb01 f005 	mul.w	r0, r1, r5
 800339a:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 800339e:	4420      	add	r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a0:	4421      	add	r1, r4
    ep->is_in = 0U;
 80033a2:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 80033a6:	e7dd      	b.n	8003364 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 80033a8:	2002      	movs	r0, #2
 80033aa:	e7f2      	b.n	8003392 <HAL_PCD_EP_Open+0x4a>

080033ac <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80033ac:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80033b0:	b510      	push	{r4, lr}
 80033b2:	f001 0207 	and.w	r2, r1, #7
 80033b6:	4604      	mov	r4, r0
 80033b8:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80033bc:	d013      	beq.n	80033e6 <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 80033be:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	fb02 1101 	mla	r1, r2, r1, r1
 80033c4:	4401      	add	r1, r0
    ep->is_in = 1U;
 80033c6:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033c8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80033ca:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d013      	beq.n	80033fa <HAL_PCD_EP_Close+0x4e>
 80033d2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033d4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80033d6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033da:	f001 fa0f 	bl	80047fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033de:	2000      	movs	r0, #0
 80033e0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80033e4:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e6:	fb01 f302 	mul.w	r3, r1, r2
 80033ea:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80033ee:	4401      	add	r1, r0
    ep->is_in = 0U;
 80033f0:	4403      	add	r3, r0
 80033f2:	2000      	movs	r0, #0
 80033f4:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80033f8:	e7e6      	b.n	80033c8 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 80033fa:	2002      	movs	r0, #2
 80033fc:	e7f2      	b.n	80033e4 <HAL_PCD_EP_Close+0x38>

080033fe <HAL_PCD_EP_Receive>:
{
 80033fe:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8003400:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8003402:	2600      	movs	r6, #0
 8003404:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8003408:	434c      	muls	r4, r1
 800340a:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800340c:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003410:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003414:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8003416:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 800341a:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 800341e:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8003422:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003426:	6800      	ldr	r0, [r0, #0]
 8003428:	f001 fb2c 	bl	8004a84 <USB_EPStartXfer>
}
 800342c:	4630      	mov	r0, r6
 800342e:	bd70      	pop	{r4, r5, r6, pc}

08003430 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003430:	2328      	movs	r3, #40	; 0x28
 8003432:	f001 0107 	and.w	r1, r1, #7
 8003436:	fb03 0101 	mla	r1, r3, r1, r0
}
 800343a:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 800343e:	4770      	bx	lr

08003440 <HAL_PCD_EP_Transmit>:
{
 8003440:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8003442:	2528      	movs	r5, #40	; 0x28
 8003444:	f001 0107 	and.w	r1, r1, #7
 8003448:	fb05 0401 	mla	r4, r5, r1, r0
  ep->xfer_count = 0U;
 800344c:	2600      	movs	r6, #0
  ep->xfer_len = len;
 800344e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8003452:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003454:	fb01 5505 	mla	r5, r1, r5, r5
  ep->num = ep_addr & EP_ADDR_MSK;
 8003458:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 800345c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003460:	1941      	adds	r1, r0, r5
  ep->xfer_len_db = len;
 8003462:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8003464:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8003466:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800346a:	6800      	ldr	r0, [r0, #0]
 800346c:	f001 fb0a 	bl	8004a84 <USB_EPStartXfer>
}
 8003470:	4630      	mov	r0, r6
 8003472:	bd70      	pop	{r4, r5, r6, pc}

08003474 <HAL_PCD_EP_SetStall>:
{
 8003474:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003476:	6843      	ldr	r3, [r0, #4]
 8003478:	f001 0507 	and.w	r5, r1, #7
 800347c:	429d      	cmp	r5, r3
{
 800347e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003480:	d828      	bhi.n	80034d4 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8003482:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003486:	f04f 0328 	mov.w	r3, #40	; 0x28
 800348a:	d01a      	beq.n	80034c2 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348c:	fb05 3303 	mla	r3, r5, r3, r3
 8003490:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8003492:	2301      	movs	r3, #1
 8003494:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8003496:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003498:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800349a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800349c:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d019      	beq.n	80034d8 <HAL_PCD_EP_SetStall+0x64>
 80034a4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	f001 fa6d 	bl	8004988 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ae:	b925      	cbnz	r5, 80034ba <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034b0:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80034b4:	6820      	ldr	r0, [r4, #0]
 80034b6:	f001 fad3 	bl	8004a60 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80034ba:	2000      	movs	r0, #0
 80034bc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80034c0:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80034c2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80034c4:	434b      	muls	r3, r1
 80034c6:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80034ca:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80034cc:	4401      	add	r1, r0
    ep->is_in = 0U;
 80034ce:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80034d2:	e7e0      	b.n	8003496 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80034d4:	2001      	movs	r0, #1
 80034d6:	e7f3      	b.n	80034c0 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80034d8:	2002      	movs	r0, #2
 80034da:	e7f1      	b.n	80034c0 <HAL_PCD_EP_SetStall+0x4c>

080034dc <HAL_PCD_EP_ClrStall>:
{
 80034dc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034de:	6843      	ldr	r3, [r0, #4]
 80034e0:	f001 020f 	and.w	r2, r1, #15
 80034e4:	429a      	cmp	r2, r3
{
 80034e6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034e8:	d826      	bhi.n	8003538 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80034ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80034ee:	f001 0207 	and.w	r2, r1, #7
 80034f2:	f04f 0128 	mov.w	r1, #40	; 0x28
 80034f6:	d015      	beq.n	8003524 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 80034f8:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034fa:	fb02 1101 	mla	r1, r2, r1, r1
 80034fe:	4401      	add	r1, r0
    ep->is_in = 1U;
 8003500:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8003502:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8003504:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8003506:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003508:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800350c:	2b01      	cmp	r3, #1
 800350e:	d015      	beq.n	800353c <HAL_PCD_EP_ClrStall+0x60>
 8003510:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003512:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003514:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003518:	f001 fa52 	bl	80049c0 <USB_EPClearStall>
  return HAL_OK;
 800351c:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800351e:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8003522:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003524:	fb01 f302 	mul.w	r3, r1, r2
 8003528:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800352c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800352e:	4403      	add	r3, r0
 8003530:	2000      	movs	r0, #0
 8003532:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8003536:	e7e4      	b.n	8003502 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8003538:	2001      	movs	r0, #1
 800353a:	e7f2      	b.n	8003522 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 800353c:	2002      	movs	r0, #2
 800353e:	e7f0      	b.n	8003522 <HAL_PCD_EP_ClrStall+0x46>

08003540 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003540:	b510      	push	{r4, lr}
 8003542:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003544:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003548:	bf1b      	ittet	ne
 800354a:	f001 0107 	andne.w	r1, r1, #7
 800354e:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003552:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003556:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8003558:	bf08      	it	eq
 800355a:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
 800355e:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003560:	b91a      	cbnz	r2, 800356a <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003562:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003564:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8003566:	2000      	movs	r0, #0
 8003568:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 800356a:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800356c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800356e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003570:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003572:	8143      	strh	r3, [r0, #10]
 8003574:	e7f7      	b.n	8003566 <HAL_PCDEx_PMAConfig+0x26>
	...

08003578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003578:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800357c:	4605      	mov	r5, r0
 800357e:	b908      	cbnz	r0, 8003584 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8003580:	2001      	movs	r0, #1
 8003582:	e03c      	b.n	80035fe <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003584:	6803      	ldr	r3, [r0, #0]
 8003586:	07db      	lsls	r3, r3, #31
 8003588:	d410      	bmi.n	80035ac <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358a:	682b      	ldr	r3, [r5, #0]
 800358c:	079f      	lsls	r7, r3, #30
 800358e:	d45d      	bmi.n	800364c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	0719      	lsls	r1, r3, #28
 8003594:	f100 8094 	bmi.w	80036c0 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003598:	682b      	ldr	r3, [r5, #0]
 800359a:	075a      	lsls	r2, r3, #29
 800359c:	f100 80be 	bmi.w	800371c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a0:	69e8      	ldr	r0, [r5, #28]
 80035a2:	2800      	cmp	r0, #0
 80035a4:	f040 812c 	bne.w	8003800 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80035a8:	2000      	movs	r0, #0
 80035aa:	e028      	b.n	80035fe <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035ac:	4c8f      	ldr	r4, [pc, #572]	; (80037ec <HAL_RCC_OscConfig+0x274>)
 80035ae:	6863      	ldr	r3, [r4, #4]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d007      	beq.n	80035c8 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035b8:	6863      	ldr	r3, [r4, #4]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_OscConfig+0x5e>
 80035c2:	6863      	ldr	r3, [r4, #4]
 80035c4:	03de      	lsls	r6, r3, #15
 80035c6:	d506      	bpl.n	80035d6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	039c      	lsls	r4, r3, #14
 80035cc:	d5dd      	bpl.n	800358a <HAL_RCC_OscConfig+0x12>
 80035ce:	686b      	ldr	r3, [r5, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1da      	bne.n	800358a <HAL_RCC_OscConfig+0x12>
 80035d4:	e7d4      	b.n	8003580 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d6:	686b      	ldr	r3, [r5, #4]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d112      	bne.n	8003604 <HAL_RCC_OscConfig+0x8c>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80035e6:	f7fe fc73 	bl	8001ed0 <HAL_GetTick>
 80035ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	0398      	lsls	r0, r3, #14
 80035f0:	d4cb      	bmi.n	800358a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f2:	f7fe fc6d 	bl	8001ed0 <HAL_GetTick>
 80035f6:	1b80      	subs	r0, r0, r6
 80035f8:	2864      	cmp	r0, #100	; 0x64
 80035fa:	d9f7      	bls.n	80035ec <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80035fc:	2003      	movs	r0, #3
}
 80035fe:	b002      	add	sp, #8
 8003600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	b99b      	cbnz	r3, 800362e <HAL_RCC_OscConfig+0xb6>
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360c:	6023      	str	r3, [r4, #0]
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003614:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003616:	f7fe fc5b 	bl	8001ed0 <HAL_GetTick>
 800361a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	0399      	lsls	r1, r3, #14
 8003620:	d5b3      	bpl.n	800358a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003622:	f7fe fc55 	bl	8001ed0 <HAL_GetTick>
 8003626:	1b80      	subs	r0, r0, r6
 8003628:	2864      	cmp	r0, #100	; 0x64
 800362a:	d9f7      	bls.n	800361c <HAL_RCC_OscConfig+0xa4>
 800362c:	e7e6      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	d103      	bne.n	800363e <HAL_RCC_OscConfig+0xc6>
 8003636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800363a:	6023      	str	r3, [r4, #0]
 800363c:	e7cf      	b.n	80035de <HAL_RCC_OscConfig+0x66>
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364a:	e7cb      	b.n	80035e4 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364c:	4c67      	ldr	r4, [pc, #412]	; (80037ec <HAL_RCC_OscConfig+0x274>)
 800364e:	6863      	ldr	r3, [r4, #4]
 8003650:	f013 0f0c 	tst.w	r3, #12
 8003654:	d007      	beq.n	8003666 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003656:	6863      	ldr	r3, [r4, #4]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b08      	cmp	r3, #8
 800365e:	d110      	bne.n	8003682 <HAL_RCC_OscConfig+0x10a>
 8003660:	6863      	ldr	r3, [r4, #4]
 8003662:	03da      	lsls	r2, r3, #15
 8003664:	d40d      	bmi.n	8003682 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	079b      	lsls	r3, r3, #30
 800366a:	d502      	bpl.n	8003672 <HAL_RCC_OscConfig+0xfa>
 800366c:	692b      	ldr	r3, [r5, #16]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d186      	bne.n	8003580 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	696a      	ldr	r2, [r5, #20]
 8003676:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800367a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800367e:	6023      	str	r3, [r4, #0]
 8003680:	e786      	b.n	8003590 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003682:	692a      	ldr	r2, [r5, #16]
 8003684:	4b5a      	ldr	r3, [pc, #360]	; (80037f0 <HAL_RCC_OscConfig+0x278>)
 8003686:	b16a      	cbz	r2, 80036a4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800368c:	f7fe fc20 	bl	8001ed0 <HAL_GetTick>
 8003690:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	079f      	lsls	r7, r3, #30
 8003696:	d4ec      	bmi.n	8003672 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003698:	f7fe fc1a 	bl	8001ed0 <HAL_GetTick>
 800369c:	1b80      	subs	r0, r0, r6
 800369e:	2802      	cmp	r0, #2
 80036a0:	d9f7      	bls.n	8003692 <HAL_RCC_OscConfig+0x11a>
 80036a2:	e7ab      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80036a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036a6:	f7fe fc13 	bl	8001ed0 <HAL_GetTick>
 80036aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	0798      	lsls	r0, r3, #30
 80036b0:	f57f af6e 	bpl.w	8003590 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b4:	f7fe fc0c 	bl	8001ed0 <HAL_GetTick>
 80036b8:	1b80      	subs	r0, r0, r6
 80036ba:	2802      	cmp	r0, #2
 80036bc:	d9f6      	bls.n	80036ac <HAL_RCC_OscConfig+0x134>
 80036be:	e79d      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c0:	69aa      	ldr	r2, [r5, #24]
 80036c2:	4c4a      	ldr	r4, [pc, #296]	; (80037ec <HAL_RCC_OscConfig+0x274>)
 80036c4:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <HAL_RCC_OscConfig+0x27c>)
 80036c6:	b1da      	cbz	r2, 8003700 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80036cc:	f7fe fc00 	bl	8001ed0 <HAL_GetTick>
 80036d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036d4:	079b      	lsls	r3, r3, #30
 80036d6:	d50d      	bpl.n	80036f4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80036dc:	4b46      	ldr	r3, [pc, #280]	; (80037f8 <HAL_RCC_OscConfig+0x280>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036e4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80036e6:	bf00      	nop
  }
  while (Delay --);
 80036e8:	9b01      	ldr	r3, [sp, #4]
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	9201      	str	r2, [sp, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f9      	bne.n	80036e6 <HAL_RCC_OscConfig+0x16e>
 80036f2:	e751      	b.n	8003598 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f4:	f7fe fbec 	bl	8001ed0 <HAL_GetTick>
 80036f8:	1b80      	subs	r0, r0, r6
 80036fa:	2802      	cmp	r0, #2
 80036fc:	d9e9      	bls.n	80036d2 <HAL_RCC_OscConfig+0x15a>
 80036fe:	e77d      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8003700:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003702:	f7fe fbe5 	bl	8001ed0 <HAL_GetTick>
 8003706:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800370a:	079f      	lsls	r7, r3, #30
 800370c:	f57f af44 	bpl.w	8003598 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003710:	f7fe fbde 	bl	8001ed0 <HAL_GetTick>
 8003714:	1b80      	subs	r0, r0, r6
 8003716:	2802      	cmp	r0, #2
 8003718:	d9f6      	bls.n	8003708 <HAL_RCC_OscConfig+0x190>
 800371a:	e76f      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371c:	4c33      	ldr	r4, [pc, #204]	; (80037ec <HAL_RCC_OscConfig+0x274>)
 800371e:	69e3      	ldr	r3, [r4, #28]
 8003720:	00d8      	lsls	r0, r3, #3
 8003722:	d424      	bmi.n	800376e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8003724:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	69e3      	ldr	r3, [r4, #28]
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372c:	61e3      	str	r3, [r4, #28]
 800372e:	69e3      	ldr	r3, [r4, #28]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	4e30      	ldr	r6, [pc, #192]	; (80037fc <HAL_RCC_OscConfig+0x284>)
 800373a:	6833      	ldr	r3, [r6, #0]
 800373c:	05d9      	lsls	r1, r3, #23
 800373e:	d518      	bpl.n	8003772 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003740:	68eb      	ldr	r3, [r5, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d126      	bne.n	8003794 <HAL_RCC_OscConfig+0x21c>
 8003746:	6a23      	ldr	r3, [r4, #32]
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800374e:	f7fe fbbf 	bl	8001ed0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003756:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	6a23      	ldr	r3, [r4, #32]
 800375a:	079b      	lsls	r3, r3, #30
 800375c:	d53f      	bpl.n	80037de <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800375e:	2f00      	cmp	r7, #0
 8003760:	f43f af1e 	beq.w	80035a0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003764:	69e3      	ldr	r3, [r4, #28]
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	61e3      	str	r3, [r4, #28]
 800376c:	e718      	b.n	80035a0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800376e:	2700      	movs	r7, #0
 8003770:	e7e2      	b.n	8003738 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003772:	6833      	ldr	r3, [r6, #0]
 8003774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003778:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800377a:	f7fe fba9 	bl	8001ed0 <HAL_GetTick>
 800377e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	6833      	ldr	r3, [r6, #0]
 8003782:	05da      	lsls	r2, r3, #23
 8003784:	d4dc      	bmi.n	8003740 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7fe fba3 	bl	8001ed0 <HAL_GetTick>
 800378a:	eba0 0008 	sub.w	r0, r0, r8
 800378e:	2864      	cmp	r0, #100	; 0x64
 8003790:	d9f6      	bls.n	8003780 <HAL_RCC_OscConfig+0x208>
 8003792:	e733      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003794:	b9ab      	cbnz	r3, 80037c2 <HAL_RCC_OscConfig+0x24a>
 8003796:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6223      	str	r3, [r4, #32]
 80037a2:	6a23      	ldr	r3, [r4, #32]
 80037a4:	f023 0304 	bic.w	r3, r3, #4
 80037a8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80037aa:	f7fe fb91 	bl	8001ed0 <HAL_GetTick>
 80037ae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b0:	6a23      	ldr	r3, [r4, #32]
 80037b2:	0798      	lsls	r0, r3, #30
 80037b4:	d5d3      	bpl.n	800375e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fe fb8b 	bl	8001ed0 <HAL_GetTick>
 80037ba:	1b80      	subs	r0, r0, r6
 80037bc:	4540      	cmp	r0, r8
 80037be:	d9f7      	bls.n	80037b0 <HAL_RCC_OscConfig+0x238>
 80037c0:	e71c      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	6a23      	ldr	r3, [r4, #32]
 80037c6:	d103      	bne.n	80037d0 <HAL_RCC_OscConfig+0x258>
 80037c8:	f043 0304 	orr.w	r3, r3, #4
 80037cc:	6223      	str	r3, [r4, #32]
 80037ce:	e7ba      	b.n	8003746 <HAL_RCC_OscConfig+0x1ce>
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6223      	str	r3, [r4, #32]
 80037d6:	6a23      	ldr	r3, [r4, #32]
 80037d8:	f023 0304 	bic.w	r3, r3, #4
 80037dc:	e7b6      	b.n	800374c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe fb77 	bl	8001ed0 <HAL_GetTick>
 80037e2:	eba0 0008 	sub.w	r0, r0, r8
 80037e6:	42b0      	cmp	r0, r6
 80037e8:	d9b6      	bls.n	8003758 <HAL_RCC_OscConfig+0x1e0>
 80037ea:	e707      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
 80037ec:	40021000 	.word	0x40021000
 80037f0:	42420000 	.word	0x42420000
 80037f4:	42420480 	.word	0x42420480
 80037f8:	20000020 	.word	0x20000020
 80037fc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003800:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <HAL_RCC_OscConfig+0x334>)
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	461c      	mov	r4, r3
 8003806:	f002 020c 	and.w	r2, r2, #12
 800380a:	2a08      	cmp	r2, #8
 800380c:	d03d      	beq.n	800388a <HAL_RCC_OscConfig+0x312>
 800380e:	2300      	movs	r3, #0
 8003810:	4e27      	ldr	r6, [pc, #156]	; (80038b0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003812:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003814:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003816:	d12b      	bne.n	8003870 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8003818:	f7fe fb5a 	bl	8001ed0 <HAL_GetTick>
 800381c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	0199      	lsls	r1, r3, #6
 8003822:	d41f      	bmi.n	8003864 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003824:	6a2b      	ldr	r3, [r5, #32]
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382a:	d105      	bne.n	8003838 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800382c:	6862      	ldr	r2, [r4, #4]
 800382e:	68a9      	ldr	r1, [r5, #8]
 8003830:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003834:	430a      	orrs	r2, r1
 8003836:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003838:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800383a:	6862      	ldr	r2, [r4, #4]
 800383c:	430b      	orrs	r3, r1
 800383e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003842:	4313      	orrs	r3, r2
 8003844:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003846:	2301      	movs	r3, #1
 8003848:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800384a:	f7fe fb41 	bl	8001ed0 <HAL_GetTick>
 800384e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	019a      	lsls	r2, r3, #6
 8003854:	f53f aea8 	bmi.w	80035a8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe fb3a 	bl	8001ed0 <HAL_GetTick>
 800385c:	1b40      	subs	r0, r0, r5
 800385e:	2802      	cmp	r0, #2
 8003860:	d9f6      	bls.n	8003850 <HAL_RCC_OscConfig+0x2d8>
 8003862:	e6cb      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fe fb34 	bl	8001ed0 <HAL_GetTick>
 8003868:	1bc0      	subs	r0, r0, r7
 800386a:	2802      	cmp	r0, #2
 800386c:	d9d7      	bls.n	800381e <HAL_RCC_OscConfig+0x2a6>
 800386e:	e6c5      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8003870:	f7fe fb2e 	bl	8001ed0 <HAL_GetTick>
 8003874:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	019b      	lsls	r3, r3, #6
 800387a:	f57f ae95 	bpl.w	80035a8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387e:	f7fe fb27 	bl	8001ed0 <HAL_GetTick>
 8003882:	1b40      	subs	r0, r0, r5
 8003884:	2802      	cmp	r0, #2
 8003886:	d9f6      	bls.n	8003876 <HAL_RCC_OscConfig+0x2fe>
 8003888:	e6b8      	b.n	80035fc <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800388a:	2801      	cmp	r0, #1
 800388c:	f43f aeb7 	beq.w	80035fe <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8003890:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	6a2b      	ldr	r3, [r5, #32]
 8003894:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8003898:	429a      	cmp	r2, r3
 800389a:	f47f ae71 	bne.w	8003580 <HAL_RCC_OscConfig+0x8>
 800389e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038a0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80038a4:	1ac0      	subs	r0, r0, r3
 80038a6:	bf18      	it	ne
 80038a8:	2001      	movne	r0, #1
 80038aa:	e6a8      	b.n	80035fe <HAL_RCC_OscConfig+0x86>
 80038ac:	40021000 	.word	0x40021000
 80038b0:	42420060 	.word	0x42420060

080038b4 <HAL_RCC_GetSysClockFreq>:
{
 80038b4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038b6:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80038b8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038ba:	ac02      	add	r4, sp, #8
 80038bc:	f103 0510 	add.w	r5, r3, #16
 80038c0:	4622      	mov	r2, r4
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	3308      	adds	r3, #8
 80038c8:	c203      	stmia	r2!, {r0, r1}
 80038ca:	42ab      	cmp	r3, r5
 80038cc:	4614      	mov	r4, r2
 80038ce:	d1f7      	bne.n	80038c0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038d0:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80038d4:	4911      	ldr	r1, [pc, #68]	; (800391c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038d6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80038da:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80038dc:	f003 020c 	and.w	r2, r3, #12
 80038e0:	2a08      	cmp	r2, #8
 80038e2:	d117      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038e4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80038e8:	a806      	add	r0, sp, #24
 80038ea:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ec:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ee:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038f2:	d50c      	bpl.n	800390e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038f4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038f6:	480a      	ldr	r0, [pc, #40]	; (8003920 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038f8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038fc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038fe:	aa06      	add	r2, sp, #24
 8003900:	4413      	add	r3, r2
 8003902:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003906:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800390a:	b007      	add	sp, #28
 800390c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800390e:	4805      	ldr	r0, [pc, #20]	; (8003924 <HAL_RCC_GetSysClockFreq+0x70>)
 8003910:	4350      	muls	r0, r2
 8003912:	e7fa      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003916:	e7f8      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x56>
 8003918:	0800b7c0 	.word	0x0800b7c0
 800391c:	40021000 	.word	0x40021000
 8003920:	007a1200 	.word	0x007a1200
 8003924:	003d0900 	.word	0x003d0900

08003928 <HAL_RCC_ClockConfig>:
{
 8003928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800392c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800392e:	4604      	mov	r4, r0
 8003930:	b910      	cbnz	r0, 8003938 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003932:	2001      	movs	r0, #1
}
 8003934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4a44      	ldr	r2, [pc, #272]	; (8003a4c <HAL_RCC_ClockConfig+0x124>)
 800393a:	6813      	ldr	r3, [r2, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	428b      	cmp	r3, r1
 8003942:	d328      	bcc.n	8003996 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	6821      	ldr	r1, [r4, #0]
 8003946:	078e      	lsls	r6, r1, #30
 8003948:	d430      	bmi.n	80039ac <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	07ca      	lsls	r2, r1, #31
 800394c:	d443      	bmi.n	80039d6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800394e:	4a3f      	ldr	r2, [pc, #252]	; (8003a4c <HAL_RCC_ClockConfig+0x124>)
 8003950:	6813      	ldr	r3, [r2, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	42ab      	cmp	r3, r5
 8003958:	d865      	bhi.n	8003a26 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	4d3c      	ldr	r5, [pc, #240]	; (8003a50 <HAL_RCC_ClockConfig+0x128>)
 800395e:	f012 0f04 	tst.w	r2, #4
 8003962:	d16c      	bne.n	8003a3e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003964:	0713      	lsls	r3, r2, #28
 8003966:	d506      	bpl.n	8003976 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003968:	686b      	ldr	r3, [r5, #4]
 800396a:	6922      	ldr	r2, [r4, #16]
 800396c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003970:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003974:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003976:	f7ff ff9d 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800397a:	686b      	ldr	r3, [r5, #4]
 800397c:	4a35      	ldr	r2, [pc, #212]	; (8003a54 <HAL_RCC_ClockConfig+0x12c>)
 800397e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003982:	5cd3      	ldrb	r3, [r2, r3]
 8003984:	40d8      	lsrs	r0, r3
 8003986:	4b34      	ldr	r3, [pc, #208]	; (8003a58 <HAL_RCC_ClockConfig+0x130>)
 8003988:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800398a:	4b34      	ldr	r3, [pc, #208]	; (8003a5c <HAL_RCC_ClockConfig+0x134>)
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	f7fe fa5d 	bl	8001e4c <HAL_InitTick>
  return HAL_OK;
 8003992:	2000      	movs	r0, #0
 8003994:	e7ce      	b.n	8003934 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	6813      	ldr	r3, [r2, #0]
 8003998:	f023 0307 	bic.w	r3, r3, #7
 800399c:	430b      	orrs	r3, r1
 800399e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a0:	6813      	ldr	r3, [r2, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	428b      	cmp	r3, r1
 80039a8:	d1c3      	bne.n	8003932 <HAL_RCC_ClockConfig+0xa>
 80039aa:	e7cb      	b.n	8003944 <HAL_RCC_ClockConfig+0x1c>
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ae:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b2:	bf1e      	ittt	ne
 80039b4:	685a      	ldrne	r2, [r3, #4]
 80039b6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80039ba:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039bc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039be:	bf42      	ittt	mi
 80039c0:	685a      	ldrmi	r2, [r3, #4]
 80039c2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80039c6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	68a0      	ldr	r0, [r4, #8]
 80039cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039d0:	4302      	orrs	r2, r0
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	e7b9      	b.n	800394a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d6:	6862      	ldr	r2, [r4, #4]
 80039d8:	4e1d      	ldr	r6, [pc, #116]	; (8003a50 <HAL_RCC_ClockConfig+0x128>)
 80039da:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039dc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039de:	d11a      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	d0a5      	beq.n	8003932 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ec:	f023 0303 	bic.w	r3, r3, #3
 80039f0:	4313      	orrs	r3, r2
 80039f2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80039f4:	f7fe fa6c 	bl	8001ed0 <HAL_GetTick>
 80039f8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	6873      	ldr	r3, [r6, #4]
 80039fc:	6862      	ldr	r2, [r4, #4]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003a06:	d0a2      	beq.n	800394e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fe fa62 	bl	8001ed0 <HAL_GetTick>
 8003a0c:	1bc0      	subs	r0, r0, r7
 8003a0e:	4540      	cmp	r0, r8
 8003a10:	d9f3      	bls.n	80039fa <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003a12:	2003      	movs	r0, #3
 8003a14:	e78e      	b.n	8003934 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a16:	2a02      	cmp	r2, #2
 8003a18:	d102      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a1e:	e7e1      	b.n	80039e4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	f013 0f02 	tst.w	r3, #2
 8003a24:	e7de      	b.n	80039e4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	f023 0307 	bic.w	r3, r3, #7
 8003a2c:	432b      	orrs	r3, r5
 8003a2e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a30:	6813      	ldr	r3, [r2, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	42ab      	cmp	r3, r5
 8003a38:	f47f af7b 	bne.w	8003932 <HAL_RCC_ClockConfig+0xa>
 8003a3c:	e78d      	b.n	800395a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3e:	686b      	ldr	r3, [r5, #4]
 8003a40:	68e1      	ldr	r1, [r4, #12]
 8003a42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a46:	430b      	orrs	r3, r1
 8003a48:	606b      	str	r3, [r5, #4]
 8003a4a:	e78b      	b.n	8003964 <HAL_RCC_ClockConfig+0x3c>
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40021000 	.word	0x40021000
 8003a54:	0800b826 	.word	0x0800b826
 8003a58:	20000020 	.word	0x20000020
 8003a5c:	2000002c 	.word	0x2000002c

08003a60 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003a6a:	5cd3      	ldrb	r3, [r2, r3]
 8003a6c:	4a03      	ldr	r2, [pc, #12]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003a6e:	6810      	ldr	r0, [r2, #0]
}
 8003a70:	40d8      	lsrs	r0, r3
 8003a72:	4770      	bx	lr
 8003a74:	40021000 	.word	0x40021000
 8003a78:	0800b836 	.word	0x0800b836
 8003a7c:	20000020 	.word	0x20000020

08003a80 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a80:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003a8a:	5cd3      	ldrb	r3, [r2, r3]
 8003a8c:	4a03      	ldr	r2, [pc, #12]	; (8003a9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003a8e:	6810      	ldr	r0, [r2, #0]
}
 8003a90:	40d8      	lsrs	r0, r3
 8003a92:	4770      	bx	lr
 8003a94:	40021000 	.word	0x40021000
 8003a98:	0800b836 	.word	0x0800b836
 8003a9c:	20000020 	.word	0x20000020

08003aa0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aa0:	6803      	ldr	r3, [r0, #0]
{
 8003aa2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aa6:	07d9      	lsls	r1, r3, #31
{
 8003aa8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aaa:	d520      	bpl.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aac:	4c35      	ldr	r4, [pc, #212]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003aae:	69e3      	ldr	r3, [r4, #28]
 8003ab0:	00da      	lsls	r2, r3, #3
 8003ab2:	d432      	bmi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003ab4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	69e3      	ldr	r3, [r4, #28]
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	61e3      	str	r3, [r4, #28]
 8003abe:	69e3      	ldr	r3, [r4, #28]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac8:	4e2f      	ldr	r6, [pc, #188]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003aca:	6833      	ldr	r3, [r6, #0]
 8003acc:	05db      	lsls	r3, r3, #23
 8003ace:	d526      	bpl.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ad0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ad2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ad6:	d136      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad8:	6a23      	ldr	r3, [r4, #32]
 8003ada:	686a      	ldr	r2, [r5, #4]
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ae4:	b11f      	cbz	r7, 8003aee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae6:	69e3      	ldr	r3, [r4, #28]
 8003ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aec:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aee:	6828      	ldr	r0, [r5, #0]
 8003af0:	0783      	lsls	r3, r0, #30
 8003af2:	d506      	bpl.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003af4:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003af6:	68a9      	ldr	r1, [r5, #8]
 8003af8:	6853      	ldr	r3, [r2, #4]
 8003afa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003afe:	430b      	orrs	r3, r1
 8003b00:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b02:	f010 0010 	ands.w	r0, r0, #16
 8003b06:	d01b      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b08:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003b0a:	68e9      	ldr	r1, [r5, #12]
 8003b0c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b0e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b10:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6053      	str	r3, [r2, #4]
 8003b18:	e012      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8003b1a:	2700      	movs	r7, #0
 8003b1c:	e7d4      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1e:	6833      	ldr	r3, [r6, #0]
 8003b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b24:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003b26:	f7fe f9d3 	bl	8001ed0 <HAL_GetTick>
 8003b2a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	6833      	ldr	r3, [r6, #0]
 8003b2e:	05d8      	lsls	r0, r3, #23
 8003b30:	d4ce      	bmi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b32:	f7fe f9cd 	bl	8001ed0 <HAL_GetTick>
 8003b36:	eba0 0008 	sub.w	r0, r0, r8
 8003b3a:	2864      	cmp	r0, #100	; 0x64
 8003b3c:	d9f6      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8003b3e:	2003      	movs	r0, #3
}
 8003b40:	b002      	add	sp, #8
 8003b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b46:	686a      	ldr	r2, [r5, #4]
 8003b48:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0c3      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b50:	2001      	movs	r0, #1
 8003b52:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b54:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b56:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b5e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8003b60:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b62:	07d9      	lsls	r1, r3, #31
 8003b64:	d5b8      	bpl.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003b66:	f7fe f9b3 	bl	8001ed0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003b6e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b70:	6a23      	ldr	r3, [r4, #32]
 8003b72:	079a      	lsls	r2, r3, #30
 8003b74:	d4b0      	bmi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe f9ab 	bl	8001ed0 <HAL_GetTick>
 8003b7a:	1b80      	subs	r0, r0, r6
 8003b7c:	4540      	cmp	r0, r8
 8003b7e:	d9f7      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003b80:	e7dd      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40007000 	.word	0x40007000
 8003b8c:	42420440 	.word	0x42420440

08003b90 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b90:	6a03      	ldr	r3, [r0, #32]
{
 8003b92:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b9e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ba2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003ba6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ba8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003baa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003bae:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bb0:	4d0a      	ldr	r5, [pc, #40]	; (8003bdc <TIM_OC1_SetConfig+0x4c>)
 8003bb2:	42a8      	cmp	r0, r5
 8003bb4:	d10b      	bne.n	8003bce <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bb6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bb8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003bbc:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bbe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bc2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003bc6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bc8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bcc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bce:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bd2:	684a      	ldr	r2, [r1, #4]
 8003bd4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd6:	6203      	str	r3, [r0, #32]
}
 8003bd8:	bd70      	pop	{r4, r5, r6, pc}
 8003bda:	bf00      	nop
 8003bdc:	40012c00 	.word	0x40012c00

08003be0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003be0:	6a03      	ldr	r3, [r0, #32]
{
 8003be2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003bf6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bf8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003bfa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bfe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c02:	4d0b      	ldr	r5, [pc, #44]	; (8003c30 <TIM_OC3_SetConfig+0x50>)
 8003c04:	42a8      	cmp	r0, r5
 8003c06:	d10d      	bne.n	8003c24 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c08:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c12:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c16:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003c1a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c20:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c24:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c26:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c28:	684a      	ldr	r2, [r1, #4]
 8003c2a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2c:	6203      	str	r3, [r0, #32]
}
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	40012c00 	.word	0x40012c00

08003c34 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c34:	6a03      	ldr	r3, [r0, #32]
{
 8003c36:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c3c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c40:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c42:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c46:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c4a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c4e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c54:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c58:	4d06      	ldr	r5, [pc, #24]	; (8003c74 <TIM_OC4_SetConfig+0x40>)
 8003c5a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c5c:	bf02      	ittt	eq
 8003c5e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c60:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c64:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c68:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c6c:	684a      	ldr	r2, [r1, #4]
 8003c6e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c70:	6203      	str	r3, [r0, #32]
}
 8003c72:	bd30      	pop	{r4, r5, pc}
 8003c74:	40012c00 	.word	0x40012c00

08003c78 <HAL_TIM_PWM_MspInit>:
 8003c78:	4770      	bx	lr
	...

08003c7c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003c7e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c80:	4290      	cmp	r0, r2
 8003c82:	d00a      	beq.n	8003c9a <TIM_Base_SetConfig+0x1e>
 8003c84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c88:	d007      	beq.n	8003c9a <TIM_Base_SetConfig+0x1e>
 8003c8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003c8e:	4290      	cmp	r0, r2
 8003c90:	d003      	beq.n	8003c9a <TIM_Base_SetConfig+0x1e>
 8003c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c96:	4290      	cmp	r0, r2
 8003c98:	d115      	bne.n	8003cc6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003c9a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ca0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca2:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <TIM_Base_SetConfig+0x6c>)
 8003ca4:	4290      	cmp	r0, r2
 8003ca6:	d00a      	beq.n	8003cbe <TIM_Base_SetConfig+0x42>
 8003ca8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0x42>
 8003cae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003cb2:	4290      	cmp	r0, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0x42>
 8003cb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cba:	4290      	cmp	r0, r2
 8003cbc:	d103      	bne.n	8003cc6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cbe:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc6:	694a      	ldr	r2, [r1, #20]
 8003cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ccc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003cce:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd0:	688b      	ldr	r3, [r1, #8]
 8003cd2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003cd4:	680b      	ldr	r3, [r1, #0]
 8003cd6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <TIM_Base_SetConfig+0x6c>)
 8003cda:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003cdc:	bf04      	itt	eq
 8003cde:	690b      	ldreq	r3, [r1, #16]
 8003ce0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	6143      	str	r3, [r0, #20]
}
 8003ce6:	4770      	bx	lr
 8003ce8:	40012c00 	.word	0x40012c00

08003cec <HAL_TIM_Base_Init>:
{
 8003cec:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003cee:	4604      	mov	r4, r0
 8003cf0:	b330      	cbz	r0, 8003d40 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cfa:	b91b      	cbnz	r3, 8003d04 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003cfc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d00:	f7fd ff4e 	bl	8001ba0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d06:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0c:	1d21      	adds	r1, r4, #4
 8003d0e:	f7ff ffb5 	bl	8003c7c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d12:	2301      	movs	r3, #1
  return HAL_OK;
 8003d14:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d16:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003d1e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003d22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003d26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003d3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d40:	2001      	movs	r0, #1
 8003d42:	e7fc      	b.n	8003d3e <HAL_TIM_Base_Init+0x52>

08003d44 <HAL_TIM_PWM_Init>:
{
 8003d44:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003d46:	4604      	mov	r4, r0
 8003d48:	b330      	cbz	r0, 8003d98 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d52:	b91b      	cbnz	r3, 8003d5c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003d54:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003d58:	f7ff ff8e 	bl	8003c78 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	1d21      	adds	r1, r4, #4
 8003d66:	f7ff ff89 	bl	8003c7c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6a:	2301      	movs	r3, #1
  return HAL_OK;
 8003d6c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003d76:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003d7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003d7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003d96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d98:	2001      	movs	r0, #1
 8003d9a:	e7fc      	b.n	8003d96 <HAL_TIM_PWM_Init+0x52>

08003d9c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9c:	6a03      	ldr	r3, [r0, #32]
{
 8003d9e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da0:	f023 0310 	bic.w	r3, r3, #16
 8003da4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003da6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003da8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003daa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dae:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003db8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dbc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc0:	4d0b      	ldr	r5, [pc, #44]	; (8003df0 <TIM_OC2_SetConfig+0x54>)
 8003dc2:	42a8      	cmp	r0, r5
 8003dc4:	d10d      	bne.n	8003de2 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dc6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dcc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dd0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dd4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003dd8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dde:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003de2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003de4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003de6:	684a      	ldr	r2, [r1, #4]
 8003de8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003dea:	6203      	str	r3, [r0, #32]
}
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	bf00      	nop
 8003df0:	40012c00 	.word	0x40012c00

08003df4 <HAL_TIM_PWM_ConfigChannel>:
{
 8003df4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003df6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003dfa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d054      	beq.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0xb6>
 8003e00:	2301      	movs	r3, #1
 8003e02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003e06:	2a0c      	cmp	r2, #12
 8003e08:	d818      	bhi.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x48>
 8003e0a:	e8df f002 	tbb	[pc, r2]
 8003e0e:	1707      	.short	0x1707
 8003e10:	171b1717 	.word	0x171b1717
 8003e14:	172c1717 	.word	0x172c1717
 8003e18:	1717      	.short	0x1717
 8003e1a:	3d          	.byte	0x3d
 8003e1b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e1c:	6800      	ldr	r0, [r0, #0]
 8003e1e:	f7ff feb7 	bl	8003b90 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e22:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e24:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	f042 0208 	orr.w	r2, r2, #8
 8003e2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	f022 0204 	bic.w	r2, r2, #4
 8003e34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e3a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e44:	6800      	ldr	r0, [r0, #0]
 8003e46:	f7ff ffa9 	bl	8003d9c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e4a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e4c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e54:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e64:	e7e9      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x46>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	f7ff feba 	bl	8003be0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e6c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e6e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e70:	69da      	ldr	r2, [r3, #28]
 8003e72:	f042 0208 	orr.w	r2, r2, #8
 8003e76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	f022 0204 	bic.w	r2, r2, #4
 8003e7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e84:	61da      	str	r2, [r3, #28]
      break;
 8003e86:	e7d9      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e88:	6800      	ldr	r0, [r0, #0]
 8003e8a:	f7ff fed3 	bl	8003c34 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e8e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e90:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ea8:	e7ec      	b.n	8003e84 <HAL_TIM_PWM_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8003eaa:	2002      	movs	r0, #2
 8003eac:	e7c9      	b.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x4e>

08003eae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eae:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eb0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb2:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003ebc:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ebe:	6083      	str	r3, [r0, #8]
}
 8003ec0:	bd10      	pop	{r4, pc}

08003ec2 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003ec2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003ec6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003ec8:	2b01      	cmp	r3, #1
{
 8003eca:	4604      	mov	r4, r0
 8003ecc:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003ed0:	d019      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x44>
 8003ed2:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003ed8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003eda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003ede:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ee4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003ee8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003eea:	680b      	ldr	r3, [r1, #0]
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d065      	beq.n	8003fbc <HAL_TIM_ConfigClockSource+0xfa>
 8003ef0:	d815      	bhi.n	8003f1e <HAL_TIM_ConfigClockSource+0x5c>
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d00c      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0x4e>
 8003ef6:	d807      	bhi.n	8003f08 <HAL_TIM_ConfigClockSource+0x46>
 8003ef8:	b153      	cbz	r3, 8003f10 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8003efa:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003efc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003efe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003f02:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d001      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0x4e>
 8003f0c:	2b30      	cmp	r3, #48	; 0x30
 8003f0e:	d1f4      	bne.n	8003efa <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8003f10:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f12:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	e01a      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003f1e:	2b60      	cmp	r3, #96	; 0x60
 8003f20:	d034      	beq.n	8003f8c <HAL_TIM_ConfigClockSource+0xca>
 8003f22:	d819      	bhi.n	8003f58 <HAL_TIM_ConfigClockSource+0x96>
 8003f24:	2b50      	cmp	r3, #80	; 0x50
 8003f26:	d1e8      	bne.n	8003efa <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f28:	684a      	ldr	r2, [r1, #4]
 8003f2a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003f2c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f30:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f34:	f025 0501 	bic.w	r5, r5, #1
 8003f38:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003f3c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f42:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003f46:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003f48:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003f4a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f50:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003f54:	6083      	str	r3, [r0, #8]
 8003f56:	e7d0      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8003f58:	2b70      	cmp	r3, #112	; 0x70
 8003f5a:	d00c      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0xb4>
 8003f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f60:	d1cb      	bne.n	8003efa <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8003f62:	68cb      	ldr	r3, [r1, #12]
 8003f64:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003f68:	f7ff ffa1 	bl	8003eae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f6c:	6822      	ldr	r2, [r4, #0]
 8003f6e:	6893      	ldr	r3, [r2, #8]
 8003f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f74:	e008      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003f76:	68cb      	ldr	r3, [r1, #12]
 8003f78:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003f7c:	f7ff ff97 	bl	8003eae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f80:	6822      	ldr	r2, [r4, #0]
 8003f82:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f88:	6093      	str	r3, [r2, #8]
      break;
 8003f8a:	e7b6      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f8c:	684d      	ldr	r5, [r1, #4]
 8003f8e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f90:	6a01      	ldr	r1, [r0, #32]
 8003f92:	f021 0110 	bic.w	r1, r1, #16
 8003f96:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f98:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003f9a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f9c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fa4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003fac:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003fae:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003fb0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fb6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003fba:	e7cb      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbc:	684a      	ldr	r2, [r1, #4]
 8003fbe:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003fc0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc2:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc8:	f025 0501 	bic.w	r5, r5, #1
 8003fcc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003fd0:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003fda:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003fdc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003fde:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fe4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003fe8:	e7b4      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x92>

08003fea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fea:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fec:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fee:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff0:	f001 011f 	and.w	r1, r1, #31
 8003ff4:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003ff6:	ea23 0304 	bic.w	r3, r3, r4
 8003ffa:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ffc:	6a03      	ldr	r3, [r0, #32]
 8003ffe:	408a      	lsls	r2, r1
 8004000:	431a      	orrs	r2, r3
 8004002:	6202      	str	r2, [r0, #32]
}
 8004004:	bd10      	pop	{r4, pc}
	...

08004008 <HAL_TIM_OC_Start>:
{
 8004008:	b510      	push	{r4, lr}
 800400a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800400c:	b929      	cbnz	r1, 800401a <HAL_TIM_OC_Start+0x12>
 800400e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004012:	2b01      	cmp	r3, #1
 8004014:	d01d      	beq.n	8004052 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 8004016:	2001      	movs	r0, #1
}
 8004018:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800401a:	2904      	cmp	r1, #4
 800401c:	d107      	bne.n	800402e <HAL_TIM_OC_Start+0x26>
 800401e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004022:	2b01      	cmp	r3, #1
 8004024:	d1f7      	bne.n	8004016 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004026:	2302      	movs	r3, #2
 8004028:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800402c:	e014      	b.n	8004058 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800402e:	2908      	cmp	r1, #8
 8004030:	d107      	bne.n	8004042 <HAL_TIM_OC_Start+0x3a>
 8004032:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004036:	2b01      	cmp	r3, #1
 8004038:	d1ed      	bne.n	8004016 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800403a:	2302      	movs	r3, #2
 800403c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004040:	e00a      	b.n	8004058 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004042:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004046:	2b01      	cmp	r3, #1
 8004048:	d1e5      	bne.n	8004016 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800404a:	2302      	movs	r3, #2
 800404c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8004050:	e002      	b.n	8004058 <HAL_TIM_OC_Start+0x50>
 8004052:	2302      	movs	r3, #2
 8004054:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004058:	2201      	movs	r2, #1
 800405a:	6820      	ldr	r0, [r4, #0]
 800405c:	f7ff ffc5 	bl	8003fea <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <HAL_TIM_OC_Start+0x94>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d10a      	bne.n	800407e <HAL_TIM_OC_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 8004068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004076:	2a06      	cmp	r2, #6
 8004078:	d10b      	bne.n	8004092 <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 800407a:	2000      	movs	r0, #0
 800407c:	e7cc      	b.n	8004018 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004082:	d0f5      	beq.n	8004070 <HAL_TIM_OC_Start+0x68>
 8004084:	4a06      	ldr	r2, [pc, #24]	; (80040a0 <HAL_TIM_OC_Start+0x98>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d0f2      	beq.n	8004070 <HAL_TIM_OC_Start+0x68>
 800408a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800408e:	4293      	cmp	r3, r2
 8004090:	d0ee      	beq.n	8004070 <HAL_TIM_OC_Start+0x68>
    __HAL_TIM_ENABLE(htim);
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e7ee      	b.n	800407a <HAL_TIM_OC_Start+0x72>
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400

080040a4 <HAL_TIM_PWM_Start>:
 80040a4:	f7ff bfb0 	b.w	8004008 <HAL_TIM_OC_Start>

080040a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80040ac:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	f04f 0302 	mov.w	r3, #2
 80040b4:	d025      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80040b6:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040bc:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040be:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80040c0:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 80040c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ca:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80040cc:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ce:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d0:	4c0d      	ldr	r4, [pc, #52]	; (8004108 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80040d2:	42a3      	cmp	r3, r4
 80040d4:	d00a      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d007      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80040dc:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	d003      	beq.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80040e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80040e8:	42a3      	cmp	r3, r4
 80040ea:	d104      	bne.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ec:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040f2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040fc:	2300      	movs	r3, #0
 80040fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004102:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004104:	bd30      	pop	{r4, r5, pc}
 8004106:	bf00      	nop
 8004108:	40012c00 	.word	0x40012c00

0800410c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410c:	6803      	ldr	r3, [r0, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004114:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004120:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004122:	bf02      	ittt	eq
 8004124:	68da      	ldreq	r2, [r3, #12]
 8004126:	f022 0210 	biceq.w	r2, r2, #16
 800412a:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800412c:	2320      	movs	r3, #32
 800412e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	2300      	movs	r3, #0
 8004134:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004136:	4770      	bx	lr

08004138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	b510      	push	{r4, lr}
 800413a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800413c:	6803      	ldr	r3, [r0, #0]
 800413e:	68c1      	ldr	r1, [r0, #12]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004146:	430a      	orrs	r2, r1
 8004148:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800414a:	6882      	ldr	r2, [r0, #8]
 800414c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800414e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004150:	4302      	orrs	r2, r0
 8004152:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004154:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004158:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800415c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800415e:	430a      	orrs	r2, r1
 8004160:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004162:	695a      	ldr	r2, [r3, #20]
 8004164:	69a1      	ldr	r1, [r4, #24]
 8004166:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800416a:	430a      	orrs	r2, r1
 800416c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800416e:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <UART_SetConfig+0x70>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d115      	bne.n	80041a0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004174:	f7ff fc84 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004178:	2319      	movs	r3, #25
 800417a:	4358      	muls	r0, r3
 800417c:	6863      	ldr	r3, [r4, #4]
 800417e:	2264      	movs	r2, #100	; 0x64
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	fbb0 f0f3 	udiv	r0, r0, r3
 8004186:	fbb0 f1f2 	udiv	r1, r0, r2
 800418a:	fb02 0311 	mls	r3, r2, r1, r0
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	3332      	adds	r3, #50	; 0x32
 8004192:	fbb3 f3f2 	udiv	r3, r3, r2
 8004196:	6824      	ldr	r4, [r4, #0]
 8004198:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800419c:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 800419e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80041a0:	f7ff fc5e 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 80041a4:	e7e8      	b.n	8004178 <UART_SetConfig+0x40>
 80041a6:	bf00      	nop
 80041a8:	40013800 	.word	0x40013800

080041ac <HAL_UART_Init>:
{
 80041ac:	b510      	push	{r4, lr}
  if (huart == NULL)
 80041ae:	4604      	mov	r4, r0
 80041b0:	b340      	cbz	r0, 8004204 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80041b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041ba:	b91b      	cbnz	r3, 80041c4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80041bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80041c0:	f7fd fd28 	bl	8001c14 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80041c4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80041c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80041c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80041cc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80041ce:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80041d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041d4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80041d6:	f7ff ffaf 	bl	8004138 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041da:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ec:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041f4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80041f6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004202:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004204:	2001      	movs	r0, #1
 8004206:	e7fc      	b.n	8004202 <HAL_UART_Init+0x56>

08004208 <HAL_UART_TxCpltCallback>:
 8004208:	4770      	bx	lr

0800420a <HAL_UART_ErrorCallback>:
 800420a:	4770      	bx	lr

0800420c <UART_DMAAbortOnError>:
{
 800420c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800420e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004210:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004212:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004214:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004216:	f7ff fff8 	bl	800420a <HAL_UART_ErrorCallback>
}
 800421a:	bd08      	pop	{r3, pc}

0800421c <HAL_UARTEx_RxEventCallback>:
}
 800421c:	4770      	bx	lr

0800421e <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800421e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 8004222:	b513      	push	{r0, r1, r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004224:	2b22      	cmp	r3, #34	; 0x22
 8004226:	d148      	bne.n	80042ba <UART_Receive_IT+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004228:	6881      	ldr	r1, [r0, #8]
 800422a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800422c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004230:	6802      	ldr	r2, [r0, #0]
 8004232:	d133      	bne.n	800429c <UART_Receive_IT+0x7e>
 8004234:	6901      	ldr	r1, [r0, #16]
 8004236:	2900      	cmp	r1, #0
 8004238:	d133      	bne.n	80042a2 <UART_Receive_IT+0x84>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800423a:	6852      	ldr	r2, [r2, #4]
 800423c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004240:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8004244:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8004246:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004248:	3c01      	subs	r4, #1
 800424a:	b2a4      	uxth	r4, r4
 800424c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800424e:	bb1c      	cbnz	r4, 8004298 <UART_Receive_IT+0x7a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004250:	6803      	ldr	r3, [r0, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	f022 0220 	bic.w	r2, r2, #32
 8004258:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004260:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800426a:	2220      	movs	r2, #32
 800426c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004270:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004272:	2a01      	cmp	r2, #1
 8004274:	d11e      	bne.n	80042b4 <UART_Receive_IT+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004276:	6304      	str	r4, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	f022 0210 	bic.w	r2, r2, #16
 800427e:	60da      	str	r2, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	06d2      	lsls	r2, r2, #27
 8004284:	d505      	bpl.n	8004292 <UART_Receive_IT+0x74>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004286:	9401      	str	r4, [sp, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	9201      	str	r2, [sp, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	9301      	str	r3, [sp, #4]
 8004290:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004292:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004294:	f7ff ffc2 	bl	800421c <HAL_UARTEx_RxEventCallback>
    if (--huart->RxXferCount == 0U)
 8004298:	2000      	movs	r0, #0
 800429a:	e00f      	b.n	80042bc <UART_Receive_IT+0x9e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800429c:	b931      	cbnz	r1, 80042ac <UART_Receive_IT+0x8e>
 800429e:	6901      	ldr	r1, [r0, #16]
 80042a0:	b921      	cbnz	r1, 80042ac <UART_Receive_IT+0x8e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a2:	6852      	ldr	r2, [r2, #4]
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042a4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80042a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80042a8:	3301      	adds	r3, #1
 80042aa:	e7cb      	b.n	8004244 <UART_Receive_IT+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042ac:	6852      	ldr	r2, [r2, #4]
 80042ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042b2:	e7f7      	b.n	80042a4 <UART_Receive_IT+0x86>
       HAL_UART_RxCpltCallback(huart);
 80042b4:	f7fd fa1e 	bl	80016f4 <HAL_UART_RxCpltCallback>
 80042b8:	e7ee      	b.n	8004298 <UART_Receive_IT+0x7a>
    return HAL_BUSY;
 80042ba:	2002      	movs	r0, #2
}
 80042bc:	b002      	add	sp, #8
 80042be:	bd10      	pop	{r4, pc}

080042c0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042c0:	6803      	ldr	r3, [r0, #0]
{
 80042c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042c4:	681a      	ldr	r2, [r3, #0]
{
 80042c6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80042c8:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042cc:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042ce:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80042d0:	d108      	bne.n	80042e4 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042d2:	0695      	lsls	r5, r2, #26
 80042d4:	d55d      	bpl.n	8004392 <HAL_UART_IRQHandler+0xd2>
 80042d6:	068d      	lsls	r5, r1, #26
 80042d8:	d55b      	bpl.n	8004392 <HAL_UART_IRQHandler+0xd2>
}
 80042da:	b003      	add	sp, #12
 80042dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 80042e0:	f7ff bf9d 	b.w	800421e <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042e4:	f015 0501 	ands.w	r5, r5, #1
 80042e8:	d102      	bne.n	80042f0 <HAL_UART_IRQHandler+0x30>
 80042ea:	f411 7f90 	tst.w	r1, #288	; 0x120
 80042ee:	d050      	beq.n	8004392 <HAL_UART_IRQHandler+0xd2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042f0:	07d0      	lsls	r0, r2, #31
 80042f2:	d505      	bpl.n	8004300 <HAL_UART_IRQHandler+0x40>
 80042f4:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042f6:	bf42      	ittt	mi
 80042f8:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 80042fa:	f043 0301 	orrmi.w	r3, r3, #1
 80042fe:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004300:	0750      	lsls	r0, r2, #29
 8004302:	d504      	bpl.n	800430e <HAL_UART_IRQHandler+0x4e>
 8004304:	b11d      	cbz	r5, 800430e <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800430e:	0793      	lsls	r3, r2, #30
 8004310:	d504      	bpl.n	800431c <HAL_UART_IRQHandler+0x5c>
 8004312:	b11d      	cbz	r5, 800431c <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004316:	f043 0304 	orr.w	r3, r3, #4
 800431a:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800431c:	0710      	lsls	r0, r2, #28
 800431e:	d506      	bpl.n	800432e <HAL_UART_IRQHandler+0x6e>
 8004320:	068b      	lsls	r3, r1, #26
 8004322:	d400      	bmi.n	8004326 <HAL_UART_IRQHandler+0x66>
 8004324:	b11d      	cbz	r5, 800432e <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004328:	f043 0308 	orr.w	r3, r3, #8
 800432c:	6423      	str	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800432e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004330:	b34b      	cbz	r3, 8004386 <HAL_UART_IRQHandler+0xc6>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004332:	0690      	lsls	r0, r2, #26
 8004334:	d504      	bpl.n	8004340 <HAL_UART_IRQHandler+0x80>
 8004336:	068a      	lsls	r2, r1, #26
 8004338:	d502      	bpl.n	8004340 <HAL_UART_IRQHandler+0x80>
        UART_Receive_IT(huart);
 800433a:	4620      	mov	r0, r4
 800433c:	f7ff ff6f 	bl	800421e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004340:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8004342:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004344:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004346:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004348:	0713      	lsls	r3, r2, #28
 800434a:	d402      	bmi.n	8004352 <HAL_UART_IRQHandler+0x92>
 800434c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8004350:	d01b      	beq.n	800438a <HAL_UART_IRQHandler+0xca>
        UART_EndRxTransfer(huart);
 8004352:	f7ff fedb 	bl	800410c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	0655      	lsls	r5, r2, #25
 800435c:	d510      	bpl.n	8004380 <HAL_UART_IRQHandler+0xc0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004360:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004366:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004368:	b150      	cbz	r0, 8004380 <HAL_UART_IRQHandler+0xc0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436a:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_UART_IRQHandler+0x1f8>)
 800436c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800436e:	f7fd fe53 	bl	8002018 <HAL_DMA_Abort_IT>
 8004372:	b140      	cbz	r0, 8004386 <HAL_UART_IRQHandler+0xc6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004374:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004376:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8004378:	b003      	add	sp, #12
 800437a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800437e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004380:	4620      	mov	r0, r4
 8004382:	f7ff ff42 	bl	800420a <HAL_UART_ErrorCallback>
}
 8004386:	b003      	add	sp, #12
 8004388:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800438a:	f7ff ff3e 	bl	800420a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438e:	6425      	str	r5, [r4, #64]	; 0x40
 8004390:	e7f9      	b.n	8004386 <HAL_UART_IRQHandler+0xc6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004392:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004394:	2801      	cmp	r0, #1
 8004396:	d155      	bne.n	8004444 <HAL_UART_IRQHandler+0x184>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004398:	06d0      	lsls	r0, r2, #27
 800439a:	d553      	bpl.n	8004444 <HAL_UART_IRQHandler+0x184>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800439c:	06cd      	lsls	r5, r1, #27
 800439e:	d551      	bpl.n	8004444 <HAL_UART_IRQHandler+0x184>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043a0:	2100      	movs	r1, #0
 80043a2:	9101      	str	r1, [sp, #4]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	9201      	str	r2, [sp, #4]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	9201      	str	r2, [sp, #4]
 80043ac:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80043b4:	d02a      	beq.n	800440c <HAL_UART_IRQHandler+0x14c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80043b8:	6802      	ldr	r2, [r0, #0]
 80043ba:	6852      	ldr	r2, [r2, #4]
 80043bc:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80043be:	2a00      	cmp	r2, #0
 80043c0:	d0e1      	beq.n	8004386 <HAL_UART_IRQHandler+0xc6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043c2:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80043c4:	4295      	cmp	r5, r2
 80043c6:	d9de      	bls.n	8004386 <HAL_UART_IRQHandler+0xc6>
        huart->RxXferCount = nb_remaining_rx_data;
 80043c8:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043ca:	6982      	ldr	r2, [r0, #24]
 80043cc:	2a20      	cmp	r2, #32
 80043ce:	d015      	beq.n	80043fc <HAL_UART_IRQHandler+0x13c>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043d6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e6:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80043e8:	2220      	movs	r2, #32
 80043ea:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	f022 0210 	bic.w	r2, r2, #16
 80043f6:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043f8:	f7fd fdec 	bl	8001fd4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043fc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80043fe:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004400:	1ac9      	subs	r1, r1, r3
 8004402:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004404:	4620      	mov	r0, r4
 8004406:	f7ff ff09 	bl	800421c <HAL_UARTEx_RxEventCallback>
 800440a:	e7bc      	b.n	8004386 <HAL_UART_IRQHandler+0xc6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800440c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800440e:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 8004410:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004412:	b289      	uxth	r1, r1
 8004414:	2900      	cmp	r1, #0
 8004416:	d0b6      	beq.n	8004386 <HAL_UART_IRQHandler+0xc6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004418:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800441a:	1a09      	subs	r1, r1, r0
 800441c:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 800441e:	2900      	cmp	r1, #0
 8004420:	d0b1      	beq.n	8004386 <HAL_UART_IRQHandler+0xc6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004422:	68d8      	ldr	r0, [r3, #12]
 8004424:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8004428:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	6958      	ldr	r0, [r3, #20]
 800442c:	f020 0001 	bic.w	r0, r0, #1
 8004430:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004432:	2020      	movs	r0, #32
 8004434:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004438:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	f022 0210 	bic.w	r2, r2, #16
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	e7df      	b.n	8004404 <HAL_UART_IRQHandler+0x144>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004444:	0610      	lsls	r0, r2, #24
 8004446:	d526      	bpl.n	8004496 <HAL_UART_IRQHandler+0x1d6>
 8004448:	060d      	lsls	r5, r1, #24
 800444a:	d524      	bpl.n	8004496 <HAL_UART_IRQHandler+0x1d6>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800444c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004450:	2a21      	cmp	r2, #33	; 0x21
 8004452:	d198      	bne.n	8004386 <HAL_UART_IRQHandler+0xc6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004454:	68a1      	ldr	r1, [r4, #8]
 8004456:	6a22      	ldr	r2, [r4, #32]
 8004458:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800445c:	d116      	bne.n	800448c <HAL_UART_IRQHandler+0x1cc>
 800445e:	6921      	ldr	r1, [r4, #16]
 8004460:	b9a1      	cbnz	r1, 800448c <HAL_UART_IRQHandler+0x1cc>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004462:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004466:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800446a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800446c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800446e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004470:	3a01      	subs	r2, #1
 8004472:	b292      	uxth	r2, r2
 8004474:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004476:	2a00      	cmp	r2, #0
 8004478:	d185      	bne.n	8004386 <HAL_UART_IRQHandler+0xc6>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004480:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	e77c      	b.n	8004386 <HAL_UART_IRQHandler+0xc6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800448c:	1c51      	adds	r1, r2, #1
 800448e:	6221      	str	r1, [r4, #32]
 8004490:	7812      	ldrb	r2, [r2, #0]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	e7eb      	b.n	800446e <HAL_UART_IRQHandler+0x1ae>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004496:	0650      	lsls	r0, r2, #25
 8004498:	f57f af75 	bpl.w	8004386 <HAL_UART_IRQHandler+0xc6>
 800449c:	064a      	lsls	r2, r1, #25
 800449e:	f57f af72 	bpl.w	8004386 <HAL_UART_IRQHandler+0xc6>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044a2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80044a4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044aa:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80044ac:	2320      	movs	r3, #32
 80044ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80044b2:	f7ff fea9 	bl	8004208 <HAL_UART_TxCpltCallback>
 80044b6:	e766      	b.n	8004386 <HAL_UART_IRQHandler+0xc6>
 80044b8:	0800420d 	.word	0x0800420d

080044bc <UART_Start_Receive_IT>:
  huart->RxXferCount = Size;
 80044bc:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->RxXferSize = Size;
 80044be:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->pRxBuffPtr = pData;
 80044c0:	6281      	str	r1, [r0, #40]	; 0x28
{
 80044c2:	4603      	mov	r3, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044c4:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c6:	2000      	movs	r0, #0
 80044c8:	6418      	str	r0, [r3, #64]	; 0x40
  __HAL_UNLOCK(huart);
 80044ca:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044da:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	f042 0220 	orr.w	r2, r2, #32
 80044ea:	60da      	str	r2, [r3, #12]
}
 80044ec:	4770      	bx	lr

080044ee <HAL_UART_Receive_IT>:
{
 80044ee:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 80044f0:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 80044f4:	2e20      	cmp	r6, #32
 80044f6:	d110      	bne.n	800451a <HAL_UART_Receive_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 80044f8:	b161      	cbz	r1, 8004514 <HAL_UART_Receive_IT+0x26>
 80044fa:	b15a      	cbz	r2, 8004514 <HAL_UART_Receive_IT+0x26>
    __HAL_LOCK(huart);
 80044fc:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8004500:	2c01      	cmp	r4, #1
 8004502:	d00a      	beq.n	800451a <HAL_UART_Receive_IT+0x2c>
 8004504:	2401      	movs	r4, #1
 8004506:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450a:	2400      	movs	r4, #0
 800450c:	6304      	str	r4, [r0, #48]	; 0x30
}
 800450e:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_IT(huart, pData, Size));
 8004510:	f7ff bfd4 	b.w	80044bc <UART_Start_Receive_IT>
      return HAL_ERROR;
 8004514:	2001      	movs	r0, #1
}
 8004516:	bc70      	pop	{r4, r5, r6}
 8004518:	4770      	bx	lr
    return HAL_BUSY;
 800451a:	2002      	movs	r0, #2
 800451c:	e7fb      	b.n	8004516 <HAL_UART_Receive_IT+0x28>

0800451e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800451e:	b084      	sub	sp, #16
 8004520:	a801      	add	r0, sp, #4
 8004522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004526:	b004      	add	sp, #16
 8004528:	2000      	movs	r0, #0
 800452a:	4770      	bx	lr

0800452c <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800452c:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800452e:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8004532:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8004536:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 800453a:	4618      	mov	r0, r3
 800453c:	4770      	bx	lr

0800453e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800453e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004542:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004546:	045b      	lsls	r3, r3, #17
 8004548:	0c5b      	lsrs	r3, r3, #17
 800454a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800454e:	2000      	movs	r0, #0
 8004550:	4770      	bx	lr

08004552 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004552:	2000      	movs	r0, #0
 8004554:	4770      	bx	lr

08004556 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004556:	b084      	sub	sp, #16
 8004558:	b510      	push	{r4, lr}
 800455a:	ac03      	add	r4, sp, #12
 800455c:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8004560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004564:	2301      	movs	r3, #1
 8004566:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 800456a:	2300      	movs	r3, #0
}
 800456c:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 800456e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0U;
 8004572:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8004576:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 800457a:	4618      	mov	r0, r3
 800457c:	4770      	bx	lr
	...

08004580 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004580:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004582:	780c      	ldrb	r4, [r1, #0]
{
 8004584:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004586:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800458a:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800458c:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8004590:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8004594:	2803      	cmp	r0, #3
 8004596:	d803      	bhi.n	80045a0 <USB_ActivateEndpoint+0x20>
 8004598:	e8df f000 	tbb	[pc, r0]
 800459c:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 80045a0:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045a2:	f248 0580 	movw	r5, #32896	; 0x8080
 80045a6:	432a      	orrs	r2, r5
 80045a8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045ac:	780e      	ldrb	r6, [r1, #0]
 80045ae:	4a90      	ldr	r2, [pc, #576]	; (80047f0 <USB_ActivateEndpoint+0x270>)
 80045b0:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 80045b4:	4335      	orrs	r5, r6
 80045b6:	4014      	ands	r4, r2
 80045b8:	432c      	orrs	r4, r5
 80045ba:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 80045be:	7b0d      	ldrb	r5, [r1, #12]
 80045c0:	780c      	ldrb	r4, [r1, #0]
 80045c2:	2d00      	cmp	r5, #0
 80045c4:	f040 8082 	bne.w	80046cc <USB_ActivateEndpoint+0x14c>
 80045c8:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 80045ca:	784e      	ldrb	r6, [r1, #1]
 80045cc:	086d      	lsrs	r5, r5, #1
 80045ce:	006d      	lsls	r5, r5, #1
 80045d0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80045d4:	b376      	cbz	r6, 8004634 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045d6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80045da:	4434      	add	r4, r6
 80045dc:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045e0:	780d      	ldrb	r5, [r1, #0]
 80045e2:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80045e6:	0667      	lsls	r7, r4, #25
 80045e8:	d508      	bpl.n	80045fc <USB_ActivateEndpoint+0x7c>
 80045ea:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80045ee:	4022      	ands	r2, r4
 80045f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045f4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80045f8:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80045fc:	78ca      	ldrb	r2, [r1, #3]
 80045fe:	780c      	ldrb	r4, [r1, #0]
 8004600:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004602:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8004606:	4a7b      	ldr	r2, [pc, #492]	; (80047f4 <USB_ActivateEndpoint+0x274>)
 8004608:	ea02 0201 	and.w	r2, r2, r1
 800460c:	bf18      	it	ne
 800460e:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800461a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8004620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8004624:	2000      	movs	r0, #0
 8004626:	e7bc      	b.n	80045a2 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004628:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800462c:	e7fa      	b.n	8004624 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800462e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004632:	e7f7      	b.n	8004624 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004634:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004638:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800463a:	4414      	add	r4, r2
 800463c:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004640:	780a      	ldrb	r2, [r1, #0]
 8004642:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004646:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800464a:	b2a4      	uxth	r4, r4
 800464c:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8004650:	bb56      	cbnz	r6, 80046a8 <USB_ActivateEndpoint+0x128>
 8004652:	5b15      	ldrh	r5, [r2, r4]
 8004654:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8004658:	042d      	lsls	r5, r5, #16
 800465a:	0c2d      	lsrs	r5, r5, #16
 800465c:	5315      	strh	r5, [r2, r4]
 800465e:	5b15      	ldrh	r5, [r2, r4]
 8004660:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8004664:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004666:	780c      	ldrb	r4, [r1, #0]
 8004668:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800466c:	0457      	lsls	r7, r2, #17
 800466e:	d50b      	bpl.n	8004688 <USB_ActivateEndpoint+0x108>
 8004670:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004674:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004678:	0512      	lsls	r2, r2, #20
 800467a:	0d12      	lsrs	r2, r2, #20
 800467c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004680:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004684:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004688:	7809      	ldrb	r1, [r1, #0]
 800468a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800468e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004692:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004696:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800469a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800469e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046a2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80046a6:	e7ba      	b.n	800461e <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80046a8:	2e3e      	cmp	r6, #62	; 0x3e
 80046aa:	d806      	bhi.n	80046ba <USB_ActivateEndpoint+0x13a>
 80046ac:	0875      	lsrs	r5, r6, #1
 80046ae:	07f6      	lsls	r6, r6, #31
 80046b0:	bf48      	it	mi
 80046b2:	3501      	addmi	r5, #1
 80046b4:	02ad      	lsls	r5, r5, #10
 80046b6:	b2ad      	uxth	r5, r5
 80046b8:	e7d4      	b.n	8004664 <USB_ActivateEndpoint+0xe4>
 80046ba:	0977      	lsrs	r7, r6, #5
 80046bc:	06f5      	lsls	r5, r6, #27
 80046be:	4d4e      	ldr	r5, [pc, #312]	; (80047f8 <USB_ActivateEndpoint+0x278>)
 80046c0:	bf08      	it	eq
 80046c2:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80046c6:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80046ca:	e7f4      	b.n	80046b6 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80046cc:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80046d0:	4015      	ands	r5, r2
 80046d2:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 80046d6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80046da:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80046de:	780c      	ldrb	r4, [r1, #0]
 80046e0:	890d      	ldrh	r5, [r1, #8]
 80046e2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80046e6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80046ea:	086d      	lsrs	r5, r5, #1
 80046ec:	b2b6      	uxth	r6, r6
 80046ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80046f2:	006d      	lsls	r5, r5, #1
 80046f4:	53a5      	strh	r5, [r4, r6]
 80046f6:	780c      	ldrb	r4, [r1, #0]
 80046f8:	894d      	ldrh	r5, [r1, #10]
 80046fa:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80046fe:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8004702:	086d      	lsrs	r5, r5, #1
 8004704:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8004708:	006d      	lsls	r5, r5, #1
 800470a:	b2b6      	uxth	r6, r6
 800470c:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 800470e:	784c      	ldrb	r4, [r1, #1]
 8004710:	780d      	ldrb	r5, [r1, #0]
 8004712:	bbb4      	cbnz	r4, 8004782 <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004714:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8004718:	0466      	lsls	r6, r4, #17
 800471a:	d508      	bpl.n	800472e <USB_ActivateEndpoint+0x1ae>
 800471c:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8004720:	4022      	ands	r2, r4
 8004722:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004726:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800472a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800472e:	780c      	ldrb	r4, [r1, #0]
 8004730:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004734:	0655      	lsls	r5, r2, #25
 8004736:	d50b      	bpl.n	8004750 <USB_ActivateEndpoint+0x1d0>
 8004738:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800473c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004740:	0512      	lsls	r2, r2, #20
 8004742:	0d12      	lsrs	r2, r2, #20
 8004744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004748:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800474c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004750:	f248 0480 	movw	r4, #32896	; 0x8080
 8004754:	780d      	ldrb	r5, [r1, #0]
 8004756:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800475a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800475e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004762:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004766:	4322      	orrs	r2, r4
 8004768:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800476c:	7809      	ldrb	r1, [r1, #0]
 800476e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004772:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477a:	4314      	orrs	r4, r2
 800477c:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8004780:	e74d      	b.n	800461e <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004782:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8004786:	0464      	lsls	r4, r4, #17
 8004788:	d508      	bpl.n	800479c <USB_ActivateEndpoint+0x21c>
 800478a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800478e:	4022      	ands	r2, r4
 8004790:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004794:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004798:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800479c:	780c      	ldrb	r4, [r1, #0]
 800479e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80047a2:	0652      	lsls	r2, r2, #25
 80047a4:	d50b      	bpl.n	80047be <USB_ActivateEndpoint+0x23e>
 80047a6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80047aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80047ae:	0512      	lsls	r2, r2, #20
 80047b0:	0d12      	lsrs	r2, r2, #20
 80047b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047b6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80047ba:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80047be:	78ca      	ldrb	r2, [r1, #3]
 80047c0:	780c      	ldrb	r4, [r1, #0]
 80047c2:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047c4:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80047c8:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <USB_ActivateEndpoint+0x274>)
 80047ca:	ea02 0205 	and.w	r2, r2, r5
 80047ce:	bf18      	it	ne
 80047d0:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047dc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047e0:	7809      	ldrb	r1, [r1, #0]
 80047e2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80047e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80047ea:	0492      	lsls	r2, r2, #18
 80047ec:	0c92      	lsrs	r2, r2, #18
 80047ee:	e754      	b.n	800469a <USB_ActivateEndpoint+0x11a>
 80047f0:	ffff8f8f 	.word	0xffff8f8f
 80047f4:	ffff8fbf 	.word	0xffff8fbf
 80047f8:	ffff8000 	.word	0xffff8000

080047fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047fc:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80047fe:	7b0c      	ldrb	r4, [r1, #12]
 8004800:	784a      	ldrb	r2, [r1, #1]
 8004802:	780b      	ldrb	r3, [r1, #0]
 8004804:	bbbc      	cbnz	r4, 8004876 <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 8004806:	b1f2      	cbz	r2, 8004846 <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004808:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800480c:	0652      	lsls	r2, r2, #25
 800480e:	d50b      	bpl.n	8004828 <USB_DeactivateEndpoint+0x2c>
 8004810:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004814:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004818:	0512      	lsls	r2, r2, #20
 800481a:	0d12      	lsrs	r2, r2, #20
 800481c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004820:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004824:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004828:	780a      	ldrb	r2, [r1, #0]
 800482a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800482e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004832:	051b      	lsls	r3, r3, #20
 8004834:	0d1b      	lsrs	r3, r3, #20
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8004842:	2000      	movs	r0, #0
 8004844:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004846:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800484a:	0454      	lsls	r4, r2, #17
 800484c:	d50b      	bpl.n	8004866 <USB_DeactivateEndpoint+0x6a>
 800484e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004852:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004856:	0512      	lsls	r2, r2, #20
 8004858:	0d12      	lsrs	r2, r2, #20
 800485a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800485e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004862:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004866:	780a      	ldrb	r2, [r1, #0]
 8004868:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800486c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004870:	049b      	lsls	r3, r3, #18
 8004872:	0c9b      	lsrs	r3, r3, #18
 8004874:	e7df      	b.n	8004836 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8004876:	2a00      	cmp	r2, #0
 8004878:	d144      	bne.n	8004904 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800487a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800487e:	0452      	lsls	r2, r2, #17
 8004880:	d50b      	bpl.n	800489a <USB_DeactivateEndpoint+0x9e>
 8004882:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004886:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800488a:	0512      	lsls	r2, r2, #20
 800488c:	0d12      	lsrs	r2, r2, #20
 800488e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004892:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004896:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800489a:	780a      	ldrb	r2, [r1, #0]
 800489c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80048a0:	065c      	lsls	r4, r3, #25
 80048a2:	d50b      	bpl.n	80048bc <USB_DeactivateEndpoint+0xc0>
 80048a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80048a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ac:	051b      	lsls	r3, r3, #20
 80048ae:	0d1b      	lsrs	r3, r3, #20
 80048b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80048bc:	780a      	ldrb	r2, [r1, #0]
 80048be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80048c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c6:	051b      	lsls	r3, r3, #20
 80048c8:	0d1b      	lsrs	r3, r3, #20
 80048ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048d6:	f248 0280 	movw	r2, #32896	; 0x8080
 80048da:	780c      	ldrb	r4, [r1, #0]
 80048dc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80048e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048ee:	7809      	ldrb	r1, [r1, #0]
 80048f0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80048f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048fc:	431a      	orrs	r2, r3
 80048fe:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8004902:	e79e      	b.n	8004842 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004904:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004908:	0452      	lsls	r2, r2, #17
 800490a:	d50b      	bpl.n	8004924 <USB_DeactivateEndpoint+0x128>
 800490c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004910:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004914:	0512      	lsls	r2, r2, #20
 8004916:	0d12      	lsrs	r2, r2, #20
 8004918:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800491c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004920:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004924:	780a      	ldrb	r2, [r1, #0]
 8004926:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800492a:	065b      	lsls	r3, r3, #25
 800492c:	d50b      	bpl.n	8004946 <USB_DeactivateEndpoint+0x14a>
 800492e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004936:	051b      	lsls	r3, r3, #20
 8004938:	0d1b      	lsrs	r3, r3, #20
 800493a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004942:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8004946:	780a      	ldrb	r2, [r1, #0]
 8004948:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800494c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004950:	051b      	lsls	r3, r3, #20
 8004952:	0d1b      	lsrs	r3, r3, #20
 8004954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004960:	f248 0280 	movw	r2, #32896	; 0x8080
 8004964:	780c      	ldrb	r4, [r1, #0]
 8004966:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800496a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004972:	4313      	orrs	r3, r2
 8004974:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004978:	7809      	ldrb	r1, [r1, #0]
 800497a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800497e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	e7b9      	b.n	80048fc <USB_DeactivateEndpoint+0x100>

08004988 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004988:	784b      	ldrb	r3, [r1, #1]
 800498a:	780a      	ldrb	r2, [r1, #0]
 800498c:	b17b      	cbz	r3, 80049ae <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800498e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800499a:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800499e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80049aa:	2000      	movs	r0, #0
 80049ac:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80049ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049be:	e7ee      	b.n	800499e <USB_EPSetStall+0x16>

080049c0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80049c0:	7b0b      	ldrb	r3, [r1, #12]
 80049c2:	bb23      	cbnz	r3, 8004a0e <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 80049c4:	784b      	ldrb	r3, [r1, #1]
 80049c6:	780a      	ldrb	r2, [r1, #0]
 80049c8:	b31b      	cbz	r3, 8004a12 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049ce:	065b      	lsls	r3, r3, #25
 80049d0:	d50b      	bpl.n	80049ea <USB_EPClearStall+0x2a>
 80049d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	051b      	lsls	r3, r3, #20
 80049dc:	0d1b      	lsrs	r3, r3, #20
 80049de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80049ea:	78cb      	ldrb	r3, [r1, #3]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d00e      	beq.n	8004a0e <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049f0:	780a      	ldrb	r2, [r1, #0]
 80049f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fe:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004a0e:	2000      	movs	r0, #0
 8004a10:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a16:	045b      	lsls	r3, r3, #17
 8004a18:	d50b      	bpl.n	8004a32 <USB_EPClearStall+0x72>
 8004a1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a22:	051b      	lsls	r3, r3, #20
 8004a24:	0d1b      	lsrs	r3, r3, #20
 8004a26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a32:	780a      	ldrb	r2, [r1, #0]
 8004a34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a40:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004a44:	e7dd      	b.n	8004a02 <USB_EPClearStall+0x42>

08004a46 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004a46:	b911      	cbnz	r1, 8004a4e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004a4e:	2000      	movs	r0, #0
 8004a50:	4770      	bx	lr

08004a52 <USB_DevConnect>:
 8004a52:	2000      	movs	r0, #0
 8004a54:	4770      	bx	lr

08004a56 <USB_DevDisconnect>:
 8004a56:	2000      	movs	r0, #0
 8004a58:	4770      	bx	lr

08004a5a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004a5a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004a5e:	4770      	bx	lr

08004a60 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004a60:	2000      	movs	r0, #0
 8004a62:	4770      	bx	lr

08004a64 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a64:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004a68:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d100      	bne.n	8004a7a <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8004a78:	4770      	bx	lr
 8004a7a:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8004a7e:	f822 0b04 	strh.w	r0, [r2], #4
 8004a82:	e7f7      	b.n	8004a74 <USB_WritePMA+0x10>

08004a84 <USB_EPStartXfer>:
{
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8004a88:	7849      	ldrb	r1, [r1, #1]
{
 8004a8a:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8004a8c:	2901      	cmp	r1, #1
 8004a8e:	7b27      	ldrb	r7, [r4, #12]
 8004a90:	f040 8227 	bne.w	8004ee2 <USB_EPStartXfer+0x45e>
    if (ep->xfer_len > ep->maxpacket)
 8004a94:	6922      	ldr	r2, [r4, #16]
 8004a96:	69a6      	ldr	r6, [r4, #24]
 8004a98:	6961      	ldr	r1, [r4, #20]
 8004a9a:	4296      	cmp	r6, r2
 8004a9c:	bf28      	it	cs
 8004a9e:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8004aa0:	b9ef      	cbnz	r7, 8004ade <USB_EPStartXfer+0x5a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004aa2:	b2b6      	uxth	r6, r6
 8004aa4:	4633      	mov	r3, r6
 8004aa6:	88e2      	ldrh	r2, [r4, #6]
 8004aa8:	f7ff ffdc 	bl	8004a64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004aac:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8004ab0:	7822      	ldrb	r2, [r4, #0]
 8004ab2:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8004ab6:	0112      	lsls	r2, r2, #4
 8004ab8:	440b      	add	r3, r1
 8004aba:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004abc:	7822      	ldrb	r2, [r4, #0]
 8004abe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aca:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8004ace:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8004adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8004ade:	f894 c003 	ldrb.w	ip, [r4, #3]
 8004ae2:	6a23      	ldr	r3, [r4, #32]
 8004ae4:	f1bc 0f02 	cmp.w	ip, #2
 8004ae8:	7827      	ldrb	r7, [r4, #0]
 8004aea:	f040 8107 	bne.w	8004cfc <USB_EPStartXfer+0x278>
        if (ep->xfer_len_db > ep->maxpacket)
 8004aee:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004af0:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8004af4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8004af8:	ea4f 5202 	mov.w	r2, r2, lsl #20
 8004afc:	ea4f 5212 	mov.w	r2, r2, lsr #20
        if (ep->xfer_len_db > ep->maxpacket)
 8004b00:	f080 80e9 	bcs.w	8004cd6 <USB_EPStartXfer+0x252>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004b04:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b0c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b10:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 8004b12:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b14:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8004b18:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b1e:	b2b3      	uxth	r3, r6
 8004b20:	7860      	ldrb	r0, [r4, #1]
 8004b22:	d070      	beq.n	8004c06 <USB_EPStartXfer+0x182>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d14e      	bne.n	8004bc6 <USB_EPStartXfer+0x142>
 8004b28:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004b2c:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8004b30:	4438      	add	r0, r7
 8004b32:	0112      	lsls	r2, r2, #4
 8004b34:	2e00      	cmp	r6, #0
 8004b36:	d132      	bne.n	8004b9e <USB_EPStartXfer+0x11a>
 8004b38:	5a87      	ldrh	r7, [r0, r2]
 8004b3a:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8004b3e:	043f      	lsls	r7, r7, #16
 8004b40:	0c3f      	lsrs	r7, r7, #16
 8004b42:	5287      	strh	r7, [r0, r2]
 8004b44:	5a87      	ldrh	r7, [r0, r2]
 8004b46:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8004b4a:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b4c:	8962      	ldrh	r2, [r4, #10]
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7ff ff88 	bl	8004a64 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004b54:	6a22      	ldr	r2, [r4, #32]
 8004b56:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8004b58:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004b5a:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8004b5c:	bf89      	itett	hi
 8004b5e:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8004b60:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8004b62:	6222      	strhi	r2, [r4, #32]
 8004b64:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b66:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8004b68:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8004b6a:	bf98      	it	ls
 8004b6c:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 8004b6e:	6161      	str	r1, [r4, #20]
 8004b70:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b72:	2800      	cmp	r0, #0
 8004b74:	f040 813f 	bne.w	8004df6 <USB_EPStartXfer+0x372>
 8004b78:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004b7c:	7826      	ldrb	r6, [r4, #0]
 8004b7e:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8004b82:	0136      	lsls	r6, r6, #4
 8004b84:	4438      	add	r0, r7
 8004b86:	bb42      	cbnz	r2, 8004bda <USB_EPStartXfer+0x156>
 8004b88:	5a32      	ldrh	r2, [r6, r0]
 8004b8a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004b8e:	0412      	lsls	r2, r2, #16
 8004b90:	0c12      	lsrs	r2, r2, #16
 8004b92:	5232      	strh	r2, [r6, r0]
 8004b94:	5a32      	ldrh	r2, [r6, r0]
 8004b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b9a:	5232      	strh	r2, [r6, r0]
 8004b9c:	e026      	b.n	8004bec <USB_EPStartXfer+0x168>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b9e:	2e3e      	cmp	r6, #62	; 0x3e
 8004ba0:	d807      	bhi.n	8004bb2 <USB_EPStartXfer+0x12e>
 8004ba2:	0877      	lsrs	r7, r6, #1
 8004ba4:	f016 0f01 	tst.w	r6, #1
 8004ba8:	bf18      	it	ne
 8004baa:	3701      	addne	r7, #1
 8004bac:	02bf      	lsls	r7, r7, #10
 8004bae:	b2bf      	uxth	r7, r7
 8004bb0:	e7cb      	b.n	8004b4a <USB_EPStartXfer+0xc6>
 8004bb2:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8004bb6:	06f7      	lsls	r7, r6, #27
 8004bb8:	4f95      	ldr	r7, [pc, #596]	; (8004e10 <USB_EPStartXfer+0x38c>)
 8004bba:	bf08      	it	eq
 8004bbc:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8004bc0:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8004bc4:	e7f3      	b.n	8004bae <USB_EPStartXfer+0x12a>
 8004bc6:	2801      	cmp	r0, #1
 8004bc8:	d1c0      	bne.n	8004b4c <USB_EPStartXfer+0xc8>
 8004bca:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 8004bce:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8004bd2:	4438      	add	r0, r7
 8004bd4:	0112      	lsls	r2, r2, #4
 8004bd6:	5283      	strh	r3, [r0, r2]
 8004bd8:	e7b8      	b.n	8004b4c <USB_EPStartXfer+0xc8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004bda:	2a3e      	cmp	r2, #62	; 0x3e
 8004bdc:	d809      	bhi.n	8004bf2 <USB_EPStartXfer+0x16e>
 8004bde:	0857      	lsrs	r7, r2, #1
 8004be0:	07d2      	lsls	r2, r2, #31
 8004be2:	bf48      	it	mi
 8004be4:	3701      	addmi	r7, #1
 8004be6:	02bf      	lsls	r7, r7, #10
 8004be8:	b2bf      	uxth	r7, r7
 8004bea:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bec:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bee:	4628      	mov	r0, r5
 8004bf0:	e081      	b.n	8004cf6 <USB_EPStartXfer+0x272>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004bf2:	0957      	lsrs	r7, r2, #5
 8004bf4:	06d2      	lsls	r2, r2, #27
 8004bf6:	4a86      	ldr	r2, [pc, #536]	; (8004e10 <USB_EPStartXfer+0x38c>)
 8004bf8:	bf08      	it	eq
 8004bfa:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004bfe:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004c02:	b292      	uxth	r2, r2
 8004c04:	e7c9      	b.n	8004b9a <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d151      	bne.n	8004cae <USB_EPStartXfer+0x22a>
 8004c0a:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004c0e:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8004c12:	4438      	add	r0, r7
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	2e00      	cmp	r6, #0
 8004c18:	d135      	bne.n	8004c86 <USB_EPStartXfer+0x202>
 8004c1a:	5a87      	ldrh	r7, [r0, r2]
 8004c1c:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8004c20:	043f      	lsls	r7, r7, #16
 8004c22:	0c3f      	lsrs	r7, r7, #16
 8004c24:	5287      	strh	r7, [r0, r2]
 8004c26:	5a87      	ldrh	r7, [r0, r2]
 8004c28:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8004c2c:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c2e:	8922      	ldrh	r2, [r4, #8]
 8004c30:	4628      	mov	r0, r5
 8004c32:	f7ff ff17 	bl	8004a64 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004c36:	6a22      	ldr	r2, [r4, #32]
 8004c38:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8004c3a:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004c3c:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8004c3e:	bf89      	itett	hi
 8004c40:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8004c42:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8004c44:	6222      	strhi	r2, [r4, #32]
 8004c46:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c48:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8004c4a:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8004c4c:	bf98      	it	ls
 8004c4e:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 8004c50:	6161      	str	r1, [r4, #20]
 8004c52:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c54:	2800      	cmp	r0, #0
 8004c56:	f040 8138 	bne.w	8004eca <USB_EPStartXfer+0x446>
 8004c5a:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004c5e:	7827      	ldrb	r7, [r4, #0]
 8004c60:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 8004c64:	013f      	lsls	r7, r7, #4
 8004c66:	4406      	add	r6, r0
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	f040 8105 	bne.w	8004e78 <USB_EPStartXfer+0x3f4>
 8004c6e:	5bba      	ldrh	r2, [r7, r6]
 8004c70:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004c74:	0412      	lsls	r2, r2, #16
 8004c76:	0c12      	lsrs	r2, r2, #16
 8004c78:	53ba      	strh	r2, [r7, r6]
 8004c7a:	5bba      	ldrh	r2, [r7, r6]
 8004c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c80:	53ba      	strh	r2, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c82:	8962      	ldrh	r2, [r4, #10]
 8004c84:	e7b3      	b.n	8004bee <USB_EPStartXfer+0x16a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c86:	2e3e      	cmp	r6, #62	; 0x3e
 8004c88:	d807      	bhi.n	8004c9a <USB_EPStartXfer+0x216>
 8004c8a:	0877      	lsrs	r7, r6, #1
 8004c8c:	f016 0f01 	tst.w	r6, #1
 8004c90:	bf18      	it	ne
 8004c92:	3701      	addne	r7, #1
 8004c94:	02bf      	lsls	r7, r7, #10
 8004c96:	b2bf      	uxth	r7, r7
 8004c98:	e7c8      	b.n	8004c2c <USB_EPStartXfer+0x1a8>
 8004c9a:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8004c9e:	06f7      	lsls	r7, r6, #27
 8004ca0:	4f5b      	ldr	r7, [pc, #364]	; (8004e10 <USB_EPStartXfer+0x38c>)
 8004ca2:	bf08      	it	eq
 8004ca4:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8004ca8:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8004cac:	e7f3      	b.n	8004c96 <USB_EPStartXfer+0x212>
 8004cae:	2801      	cmp	r0, #1
 8004cb0:	d1bd      	bne.n	8004c2e <USB_EPStartXfer+0x1aa>
 8004cb2:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 8004cb6:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8004cba:	4438      	add	r0, r7
 8004cbc:	0112      	lsls	r2, r2, #4
 8004cbe:	5283      	strh	r3, [r0, r2]
 8004cc0:	e7b5      	b.n	8004c2e <USB_EPStartXfer+0x1aa>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cc2:	0950      	lsrs	r0, r2, #5
 8004cc4:	06d2      	lsls	r2, r2, #27
 8004cc6:	4a52      	ldr	r2, [pc, #328]	; (8004e10 <USB_EPStartXfer+0x38c>)
 8004cc8:	bf08      	it	eq
 8004cca:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004cce:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8004cd2:	b292      	uxth	r2, r2
 8004cd4:	e7d4      	b.n	8004c80 <USB_EPStartXfer+0x1fc>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cde:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ce2:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8004ce6:	7826      	ldrb	r6, [r4, #0]
 8004ce8:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004cec:	443a      	add	r2, r7
 8004cee:	0136      	lsls	r6, r6, #4
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cf4:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cf6:	f7ff feb5 	bl	8004a64 <USB_WritePMA>
 8004cfa:	e6df      	b.n	8004abc <USB_EPStartXfer+0x38>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004cfc:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 8004d00:	1b9b      	subs	r3, r3, r6
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004d02:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8004d06:	0512      	lsls	r2, r2, #20
 8004d08:	0d12      	lsrs	r2, r2, #20
 8004d0a:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d12:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d16:	7822      	ldrb	r2, [r4, #0]
        ep->xfer_len_db -= len;
 8004d18:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d1a:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
 8004d1e:	b2b3      	uxth	r3, r6
 8004d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d24:	7860      	ldrb	r0, [r4, #1]
 8004d26:	d075      	beq.n	8004e14 <USB_EPStartXfer+0x390>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d14f      	bne.n	8004dcc <USB_EPStartXfer+0x348>
 8004d2c:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004d30:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8004d34:	4407      	add	r7, r0
 8004d36:	0112      	lsls	r2, r2, #4
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	d133      	bne.n	8004da4 <USB_EPStartXfer+0x320>
 8004d3c:	5ab8      	ldrh	r0, [r7, r2]
 8004d3e:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8004d42:	0400      	lsls	r0, r0, #16
 8004d44:	0c00      	lsrs	r0, r0, #16
 8004d46:	52b8      	strh	r0, [r7, r2]
 8004d48:	5ab8      	ldrh	r0, [r7, r2]
 8004d4a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004d4e:	52b8      	strh	r0, [r7, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d50:	8962      	ldrh	r2, [r4, #10]
 8004d52:	4628      	mov	r0, r5
 8004d54:	f7ff fe86 	bl	8004a64 <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 8004d58:	6a22      	ldr	r2, [r4, #32]
 8004d5a:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 8004d5c:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8004d5e:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 8004d60:	bf85      	ittet	hi
 8004d62:	1b92      	subhi	r2, r2, r6
 8004d64:	6222      	strhi	r2, [r4, #32]
            ep->xfer_len_db = 0U;
 8004d66:	2300      	movls	r3, #0
 8004d68:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 8004d6a:	4431      	add	r1, r6
 8004d6c:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db = 0U;
 8004d6e:	bf98      	it	ls
 8004d70:	6223      	strls	r3, [r4, #32]
          if (len > 0U)
 8004d72:	2a00      	cmp	r2, #0
 8004d74:	f43f aea2 	beq.w	8004abc <USB_EPStartXfer+0x38>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d78:	7860      	ldrb	r0, [r4, #1]
 8004d7a:	b293      	uxth	r3, r2
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d13a      	bne.n	8004df6 <USB_EPStartXfer+0x372>
 8004d80:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004d84:	7827      	ldrb	r7, [r4, #0]
 8004d86:	f205 4604 	addw	r6, r5, #1028	; 0x404
 8004d8a:	2a3e      	cmp	r2, #62	; 0x3e
 8004d8c:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8004d90:	4406      	add	r6, r0
 8004d92:	d825      	bhi.n	8004de0 <USB_EPStartXfer+0x35c>
 8004d94:	0850      	lsrs	r0, r2, #1
 8004d96:	07d2      	lsls	r2, r2, #31
 8004d98:	bf48      	it	mi
 8004d9a:	3001      	addmi	r0, #1
 8004d9c:	0280      	lsls	r0, r0, #10
 8004d9e:	b280      	uxth	r0, r0
 8004da0:	53b8      	strh	r0, [r7, r6]
 8004da2:	e723      	b.n	8004bec <USB_EPStartXfer+0x168>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004da4:	2e3e      	cmp	r6, #62	; 0x3e
 8004da6:	d807      	bhi.n	8004db8 <USB_EPStartXfer+0x334>
 8004da8:	0870      	lsrs	r0, r6, #1
 8004daa:	f016 0f01 	tst.w	r6, #1
 8004dae:	bf18      	it	ne
 8004db0:	3001      	addne	r0, #1
 8004db2:	0280      	lsls	r0, r0, #10
 8004db4:	b280      	uxth	r0, r0
 8004db6:	e7ca      	b.n	8004d4e <USB_EPStartXfer+0x2ca>
 8004db8:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8004dbc:	06f0      	lsls	r0, r6, #27
 8004dbe:	4814      	ldr	r0, [pc, #80]	; (8004e10 <USB_EPStartXfer+0x38c>)
 8004dc0:	bf08      	it	eq
 8004dc2:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8004dc6:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8004dca:	e7f3      	b.n	8004db4 <USB_EPStartXfer+0x330>
 8004dcc:	2801      	cmp	r0, #1
 8004dce:	d1bf      	bne.n	8004d50 <USB_EPStartXfer+0x2cc>
 8004dd0:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 8004dd4:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8004dd8:	4438      	add	r0, r7
 8004dda:	0112      	lsls	r2, r2, #4
 8004ddc:	5283      	strh	r3, [r0, r2]
 8004dde:	e7b7      	b.n	8004d50 <USB_EPStartXfer+0x2cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004de0:	0950      	lsrs	r0, r2, #5
 8004de2:	06d2      	lsls	r2, r2, #27
 8004de4:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <USB_EPStartXfer+0x38c>)
 8004de6:	bf08      	it	eq
 8004de8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004dec:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8004df0:	b292      	uxth	r2, r2
 8004df2:	53ba      	strh	r2, [r7, r6]
 8004df4:	e6fa      	b.n	8004bec <USB_EPStartXfer+0x168>
 8004df6:	2801      	cmp	r0, #1
 8004df8:	f47f aef8 	bne.w	8004bec <USB_EPStartXfer+0x168>
 8004dfc:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8004e00:	7820      	ldrb	r0, [r4, #0]
 8004e02:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8004e06:	0100      	lsls	r0, r0, #4
 8004e08:	4432      	add	r2, r6
 8004e0a:	5283      	strh	r3, [r0, r2]
 8004e0c:	e6ee      	b.n	8004bec <USB_EPStartXfer+0x168>
 8004e0e:	bf00      	nop
 8004e10:	ffff8000 	.word	0xffff8000
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d14e      	bne.n	8004eb6 <USB_EPStartXfer+0x432>
 8004e18:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004e1c:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8004e20:	4407      	add	r7, r0
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	2e00      	cmp	r6, #0
 8004e26:	d132      	bne.n	8004e8e <USB_EPStartXfer+0x40a>
 8004e28:	5ab8      	ldrh	r0, [r7, r2]
 8004e2a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8004e2e:	0400      	lsls	r0, r0, #16
 8004e30:	0c00      	lsrs	r0, r0, #16
 8004e32:	52b8      	strh	r0, [r7, r2]
 8004e34:	5ab8      	ldrh	r0, [r7, r2]
 8004e36:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004e3a:	52b8      	strh	r0, [r7, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e3c:	8922      	ldrh	r2, [r4, #8]
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f7ff fe10 	bl	8004a64 <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 8004e44:	6a22      	ldr	r2, [r4, #32]
 8004e46:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 8004e48:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8004e4a:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 8004e4c:	bf85      	ittet	hi
 8004e4e:	1b92      	subhi	r2, r2, r6
 8004e50:	6222      	strhi	r2, [r4, #32]
            ep->xfer_len_db = 0U;
 8004e52:	2300      	movls	r3, #0
 8004e54:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 8004e56:	4431      	add	r1, r6
 8004e58:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db = 0U;
 8004e5a:	bf98      	it	ls
 8004e5c:	6223      	strls	r3, [r4, #32]
          if (len > 0U)
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	f43f ae2c 	beq.w	8004abc <USB_EPStartXfer+0x38>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e64:	7860      	ldrb	r0, [r4, #1]
 8004e66:	b293      	uxth	r3, r2
 8004e68:	bb78      	cbnz	r0, 8004eca <USB_EPStartXfer+0x446>
 8004e6a:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8004e6e:	7827      	ldrb	r7, [r4, #0]
 8004e70:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 8004e74:	013f      	lsls	r7, r7, #4
 8004e76:	4406      	add	r6, r0
 8004e78:	2a3e      	cmp	r2, #62	; 0x3e
 8004e7a:	f63f af22 	bhi.w	8004cc2 <USB_EPStartXfer+0x23e>
 8004e7e:	0850      	lsrs	r0, r2, #1
 8004e80:	07d2      	lsls	r2, r2, #31
 8004e82:	bf48      	it	mi
 8004e84:	3001      	addmi	r0, #1
 8004e86:	0280      	lsls	r0, r0, #10
 8004e88:	b280      	uxth	r0, r0
 8004e8a:	53b8      	strh	r0, [r7, r6]
 8004e8c:	e6f9      	b.n	8004c82 <USB_EPStartXfer+0x1fe>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e8e:	2e3e      	cmp	r6, #62	; 0x3e
 8004e90:	d807      	bhi.n	8004ea2 <USB_EPStartXfer+0x41e>
 8004e92:	0870      	lsrs	r0, r6, #1
 8004e94:	f016 0f01 	tst.w	r6, #1
 8004e98:	bf18      	it	ne
 8004e9a:	3001      	addne	r0, #1
 8004e9c:	0280      	lsls	r0, r0, #10
 8004e9e:	b280      	uxth	r0, r0
 8004ea0:	e7cb      	b.n	8004e3a <USB_EPStartXfer+0x3b6>
 8004ea2:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8004ea6:	06f0      	lsls	r0, r6, #27
 8004ea8:	489c      	ldr	r0, [pc, #624]	; (800511c <USB_EPStartXfer+0x698>)
 8004eaa:	bf08      	it	eq
 8004eac:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8004eb0:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8004eb4:	e7f3      	b.n	8004e9e <USB_EPStartXfer+0x41a>
 8004eb6:	2801      	cmp	r0, #1
 8004eb8:	d1c0      	bne.n	8004e3c <USB_EPStartXfer+0x3b8>
 8004eba:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 8004ebe:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8004ec2:	4438      	add	r0, r7
 8004ec4:	0112      	lsls	r2, r2, #4
 8004ec6:	5283      	strh	r3, [r0, r2]
 8004ec8:	e7b8      	b.n	8004e3c <USB_EPStartXfer+0x3b8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004eca:	2801      	cmp	r0, #1
 8004ecc:	f47f aed9 	bne.w	8004c82 <USB_EPStartXfer+0x1fe>
 8004ed0:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8004ed4:	7820      	ldrb	r0, [r4, #0]
 8004ed6:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8004eda:	0100      	lsls	r0, r0, #4
 8004edc:	4432      	add	r2, r6
 8004ede:	5283      	strh	r3, [r0, r2]
 8004ee0:	e6cf      	b.n	8004c82 <USB_EPStartXfer+0x1fe>
    if (ep->doublebuffer == 0U)
 8004ee2:	2f00      	cmp	r7, #0
 8004ee4:	d138      	bne.n	8004f58 <USB_EPStartXfer+0x4d4>
      if (ep->xfer_len > ep->maxpacket)
 8004ee6:	69a2      	ldr	r2, [r4, #24]
 8004ee8:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004eea:	f205 410c 	addw	r1, r5, #1036	; 0x40c
      if (ep->xfer_len > ep->maxpacket)
 8004eee:	429a      	cmp	r2, r3
        ep->xfer_len = 0U;
 8004ef0:	bf92      	itee	ls
 8004ef2:	4613      	movls	r3, r2
        ep->xfer_len -= len;
 8004ef4:	1ad2      	subhi	r2, r2, r3
 8004ef6:	61a2      	strhi	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ef8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004efc:	7820      	ldrb	r0, [r4, #0]
        ep->xfer_len = 0U;
 8004efe:	bf98      	it	ls
 8004f00:	61a7      	strls	r7, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f02:	0100      	lsls	r0, r0, #4
 8004f04:	4411      	add	r1, r2
 8004f06:	b953      	cbnz	r3, 8004f1e <USB_EPStartXfer+0x49a>
 8004f08:	5a43      	ldrh	r3, [r0, r1]
 8004f0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f0e:	041b      	lsls	r3, r3, #16
 8004f10:	0c1b      	lsrs	r3, r3, #16
 8004f12:	5243      	strh	r3, [r0, r1]
 8004f14:	5a43      	ldrh	r3, [r0, r1]
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	5243      	strh	r3, [r0, r1]
 8004f1c:	e008      	b.n	8004f30 <USB_EPStartXfer+0x4ac>
 8004f1e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f20:	d810      	bhi.n	8004f44 <USB_EPStartXfer+0x4c0>
 8004f22:	085a      	lsrs	r2, r3, #1
 8004f24:	07df      	lsls	r7, r3, #31
 8004f26:	bf48      	it	mi
 8004f28:	3201      	addmi	r2, #1
 8004f2a:	0292      	lsls	r2, r2, #10
 8004f2c:	b292      	uxth	r2, r2
 8004f2e:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f30:	7822      	ldrb	r2, [r4, #0]
 8004f32:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004f42:	e5c4      	b.n	8004ace <USB_EPStartXfer+0x4a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f44:	095a      	lsrs	r2, r3, #5
 8004f46:	06de      	lsls	r6, r3, #27
 8004f48:	4b74      	ldr	r3, [pc, #464]	; (800511c <USB_EPStartXfer+0x698>)
 8004f4a:	bf08      	it	eq
 8004f4c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004f50:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	e7e0      	b.n	8004f1a <USB_EPStartXfer+0x496>
      if (ep->type == EP_TYPE_BULK)
 8004f58:	78e3      	ldrb	r3, [r4, #3]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d174      	bne.n	8005048 <USB_EPStartXfer+0x5c4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004f5e:	b999      	cbnz	r1, 8004f88 <USB_EPStartXfer+0x504>
 8004f60:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004f64:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004f68:	7821      	ldrb	r1, [r4, #0]
 8004f6a:	6920      	ldr	r0, [r4, #16]
 8004f6c:	0109      	lsls	r1, r1, #4
 8004f6e:	441a      	add	r2, r3
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d13a      	bne.n	8004fea <USB_EPStartXfer+0x566>
 8004f74:	5a8b      	ldrh	r3, [r1, r2]
 8004f76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	528b      	strh	r3, [r1, r2]
 8004f80:	5a8b      	ldrh	r3, [r1, r2]
 8004f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f86:	528b      	strh	r3, [r1, r2]
 8004f88:	7862      	ldrb	r2, [r4, #1]
 8004f8a:	7823      	ldrb	r3, [r4, #0]
 8004f8c:	2a00      	cmp	r2, #0
 8004f8e:	d150      	bne.n	8005032 <USB_EPStartXfer+0x5ae>
 8004f90:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004f94:	6920      	ldr	r0, [r4, #16]
 8004f96:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8004f9a:	4411      	add	r1, r2
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d135      	bne.n	800500e <USB_EPStartXfer+0x58a>
 8004fa2:	5aca      	ldrh	r2, [r1, r3]
 8004fa4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004fa8:	0412      	lsls	r2, r2, #16
 8004faa:	0c12      	lsrs	r2, r2, #16
 8004fac:	52ca      	strh	r2, [r1, r3]
 8004fae:	5aca      	ldrh	r2, [r1, r3]
 8004fb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fb4:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8004fb6:	69e3      	ldr	r3, [r4, #28]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0b9      	beq.n	8004f30 <USB_EPStartXfer+0x4ac>
 8004fbc:	f244 0140 	movw	r1, #16448	; 0x4040
 8004fc0:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004fc2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004fc6:	400b      	ands	r3, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004fc8:	428b      	cmp	r3, r1
 8004fca:	d001      	beq.n	8004fd0 <USB_EPStartXfer+0x54c>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1af      	bne.n	8004f30 <USB_EPStartXfer+0x4ac>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004fd0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fd8:	051b      	lsls	r3, r3, #20
 8004fda:	0d1b      	lsrs	r3, r3, #20
 8004fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fe4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8004fe8:	e7a2      	b.n	8004f30 <USB_EPStartXfer+0x4ac>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fea:	283e      	cmp	r0, #62	; 0x3e
 8004fec:	d806      	bhi.n	8004ffc <USB_EPStartXfer+0x578>
 8004fee:	0843      	lsrs	r3, r0, #1
 8004ff0:	07c0      	lsls	r0, r0, #31
 8004ff2:	bf48      	it	mi
 8004ff4:	3301      	addmi	r3, #1
 8004ff6:	029b      	lsls	r3, r3, #10
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	e7c4      	b.n	8004f86 <USB_EPStartXfer+0x502>
 8004ffc:	0946      	lsrs	r6, r0, #5
 8004ffe:	06c7      	lsls	r7, r0, #27
 8005000:	4b46      	ldr	r3, [pc, #280]	; (800511c <USB_EPStartXfer+0x698>)
 8005002:	bf08      	it	eq
 8005004:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005008:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 800500c:	e7f4      	b.n	8004ff8 <USB_EPStartXfer+0x574>
 800500e:	283e      	cmp	r0, #62	; 0x3e
 8005010:	d806      	bhi.n	8005020 <USB_EPStartXfer+0x59c>
 8005012:	0842      	lsrs	r2, r0, #1
 8005014:	07c0      	lsls	r0, r0, #31
 8005016:	bf48      	it	mi
 8005018:	3201      	addmi	r2, #1
 800501a:	0292      	lsls	r2, r2, #10
 800501c:	b292      	uxth	r2, r2
 800501e:	e7c9      	b.n	8004fb4 <USB_EPStartXfer+0x530>
 8005020:	0946      	lsrs	r6, r0, #5
 8005022:	06c7      	lsls	r7, r0, #27
 8005024:	4a3d      	ldr	r2, [pc, #244]	; (800511c <USB_EPStartXfer+0x698>)
 8005026:	bf08      	it	eq
 8005028:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800502c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005030:	e7f4      	b.n	800501c <USB_EPStartXfer+0x598>
 8005032:	2a01      	cmp	r2, #1
 8005034:	d1bf      	bne.n	8004fb6 <USB_EPStartXfer+0x532>
 8005036:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800503a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800503e:	440a      	add	r2, r1
 8005040:	8a21      	ldrh	r1, [r4, #16]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	52d1      	strh	r1, [r2, r3]
 8005046:	e7b6      	b.n	8004fb6 <USB_EPStartXfer+0x532>
      else if (ep->type == EP_TYPE_ISOC)
 8005048:	2b01      	cmp	r3, #1
 800504a:	d164      	bne.n	8005116 <USB_EPStartXfer+0x692>
        if (ep->xfer_len > ep->maxpacket)
 800504c:	69a2      	ldr	r2, [r4, #24]
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	429a      	cmp	r2, r3
          ep->xfer_len = 0U;
 8005052:	bf95      	itete	ls
 8005054:	2300      	movls	r3, #0
          ep->xfer_len -= len;
 8005056:	1ad2      	subhi	r2, r2, r3
          ep->xfer_len = 0U;
 8005058:	61a3      	strls	r3, [r4, #24]
          ep->xfer_len -= len;
 800505a:	61a2      	strhi	r2, [r4, #24]
          ep->xfer_len = 0U;
 800505c:	bf98      	it	ls
 800505e:	4613      	movls	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005060:	b989      	cbnz	r1, 8005086 <USB_EPStartXfer+0x602>
 8005062:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005066:	7820      	ldrb	r0, [r4, #0]
 8005068:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800506c:	0100      	lsls	r0, r0, #4
 800506e:	4411      	add	r1, r2
 8005070:	b9fb      	cbnz	r3, 80050b2 <USB_EPStartXfer+0x62e>
 8005072:	5a42      	ldrh	r2, [r0, r1]
 8005074:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005078:	0412      	lsls	r2, r2, #16
 800507a:	0c12      	lsrs	r2, r2, #16
 800507c:	5242      	strh	r2, [r0, r1]
 800507e:	5a42      	ldrh	r2, [r0, r1]
 8005080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005084:	5242      	strh	r2, [r0, r1]
 8005086:	7861      	ldrb	r1, [r4, #1]
 8005088:	7822      	ldrb	r2, [r4, #0]
 800508a:	2900      	cmp	r1, #0
 800508c:	d137      	bne.n	80050fe <USB_EPStartXfer+0x67a>
 800508e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8005092:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8005096:	4408      	add	r0, r1
 8005098:	0112      	lsls	r2, r2, #4
 800509a:	b9e3      	cbnz	r3, 80050d6 <USB_EPStartXfer+0x652>
 800509c:	5a83      	ldrh	r3, [r0, r2]
 800509e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	5283      	strh	r3, [r0, r2]
 80050a8:	5a83      	ldrh	r3, [r0, r2]
 80050aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ae:	5283      	strh	r3, [r0, r2]
 80050b0:	e73e      	b.n	8004f30 <USB_EPStartXfer+0x4ac>
 80050b2:	2b3e      	cmp	r3, #62	; 0x3e
 80050b4:	d806      	bhi.n	80050c4 <USB_EPStartXfer+0x640>
 80050b6:	085a      	lsrs	r2, r3, #1
 80050b8:	07de      	lsls	r6, r3, #31
 80050ba:	bf48      	it	mi
 80050bc:	3201      	addmi	r2, #1
 80050be:	0292      	lsls	r2, r2, #10
 80050c0:	b292      	uxth	r2, r2
 80050c2:	e7df      	b.n	8005084 <USB_EPStartXfer+0x600>
 80050c4:	095e      	lsrs	r6, r3, #5
 80050c6:	06df      	lsls	r7, r3, #27
 80050c8:	4a14      	ldr	r2, [pc, #80]	; (800511c <USB_EPStartXfer+0x698>)
 80050ca:	bf08      	it	eq
 80050cc:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80050d0:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80050d4:	e7f4      	b.n	80050c0 <USB_EPStartXfer+0x63c>
 80050d6:	2b3e      	cmp	r3, #62	; 0x3e
 80050d8:	d807      	bhi.n	80050ea <USB_EPStartXfer+0x666>
 80050da:	0859      	lsrs	r1, r3, #1
 80050dc:	07de      	lsls	r6, r3, #31
 80050de:	bf48      	it	mi
 80050e0:	3101      	addmi	r1, #1
 80050e2:	0289      	lsls	r1, r1, #10
 80050e4:	b289      	uxth	r1, r1
 80050e6:	5281      	strh	r1, [r0, r2]
 80050e8:	e722      	b.n	8004f30 <USB_EPStartXfer+0x4ac>
 80050ea:	0959      	lsrs	r1, r3, #5
 80050ec:	06db      	lsls	r3, r3, #27
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <USB_EPStartXfer+0x698>)
 80050f0:	bf08      	it	eq
 80050f2:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80050f6:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	e7d7      	b.n	80050ae <USB_EPStartXfer+0x62a>
 80050fe:	2901      	cmp	r1, #1
 8005100:	f47f af16 	bne.w	8004f30 <USB_EPStartXfer+0x4ac>
 8005104:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8005108:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800510c:	4401      	add	r1, r0
 800510e:	0112      	lsls	r2, r2, #4
 8005110:	b29b      	uxth	r3, r3
 8005112:	528b      	strh	r3, [r1, r2]
 8005114:	e70c      	b.n	8004f30 <USB_EPStartXfer+0x4ac>
        return HAL_ERROR;
 8005116:	2001      	movs	r0, #1
 8005118:	e4e0      	b.n	8004adc <USB_EPStartXfer+0x58>
 800511a:	bf00      	nop
 800511c:	ffff8000 	.word	0xffff8000

08005120 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005120:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8005124:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800512a:	085d      	lsrs	r5, r3, #1
 800512c:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800512e:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8005130:	462e      	mov	r6, r5
 8005132:	3002      	adds	r0, #2
 8005134:	b936      	cbnz	r6, 8005144 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005136:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8005138:	bf44      	itt	mi
 800513a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800513e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8005142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8005144:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8005148:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 800514a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800514c:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005150:	0a24      	lsrs	r4, r4, #8
 8005152:	f800 4c01 	strb.w	r4, [r0, #-1]
 8005156:	e7ec      	b.n	8005132 <USB_ReadPMA+0x12>

08005158 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005158:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800515c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800515e:	b16b      	cbz	r3, 800517c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005160:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005164:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005168:	28ff      	cmp	r0, #255	; 0xff
 800516a:	d007      	beq.n	800517c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005172:	4621      	mov	r1, r4
 8005174:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005176:	23ff      	movs	r3, #255	; 0xff
 8005178:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800517c:	2000      	movs	r0, #0
 800517e:	bd10      	pop	{r4, pc}

08005180 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005180:	2343      	movs	r3, #67	; 0x43
 8005182:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005184:	4800      	ldr	r0, [pc, #0]	; (8005188 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005186:	4770      	bx	lr
 8005188:	20000068 	.word	0x20000068

0800518c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800518c:	2343      	movs	r3, #67	; 0x43
 800518e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005190:	4800      	ldr	r0, [pc, #0]	; (8005194 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005192:	4770      	bx	lr
 8005194:	200000ac 	.word	0x200000ac

08005198 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005198:	2343      	movs	r3, #67	; 0x43
 800519a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800519c:	4800      	ldr	r0, [pc, #0]	; (80051a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800519e:	4770      	bx	lr
 80051a0:	200000fc 	.word	0x200000fc

080051a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80051a4:	230a      	movs	r3, #10
 80051a6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80051a8:	4800      	ldr	r0, [pc, #0]	; (80051ac <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80051aa:	4770      	bx	lr
 80051ac:	200000f0 	.word	0x200000f0

080051b0 <USBD_CDC_DataOut>:
{
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051b4:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051b8:	f000 ff80 	bl	80060bc <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80051bc:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051c0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80051c4:	b14b      	cbz	r3, 80051da <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051c6:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 80051ca:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80051d4:	4798      	blx	r3
    return USBD_OK;
 80051d6:	2000      	movs	r0, #0
}
 80051d8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80051da:	2002      	movs	r0, #2
 80051dc:	e7fc      	b.n	80051d8 <USBD_CDC_DataOut+0x28>

080051de <USBD_CDC_DataIn>:
{
 80051de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051e0:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80051e4:	b1d6      	cbz	r6, 800521c <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80051e6:	2314      	movs	r3, #20
 80051e8:	fb03 0301 	mla	r3, r3, r1, r0
 80051ec:	69dd      	ldr	r5, [r3, #28]
 80051ee:	b18d      	cbz	r5, 8005214 <USBD_CDC_DataIn+0x36>
 80051f0:	2728      	movs	r7, #40	; 0x28
 80051f2:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80051f6:	fb07 4201 	mla	r2, r7, r1, r4
 80051fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051fc:	fbb5 f4f2 	udiv	r4, r5, r2
 8005200:	fb02 5414 	mls	r4, r2, r4, r5
 8005204:	b934      	cbnz	r4, 8005214 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8005206:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005208:	4622      	mov	r2, r4
 800520a:	4623      	mov	r3, r4
 800520c:	f000 ff3a 	bl	8006084 <USBD_LL_Transmit>
    return USBD_OK;
 8005210:	4620      	mov	r0, r4
}
 8005212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8005214:	2000      	movs	r0, #0
 8005216:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800521a:	e7fa      	b.n	8005212 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 800521c:	2002      	movs	r0, #2
 800521e:	e7f8      	b.n	8005212 <USBD_CDC_DataIn+0x34>

08005220 <USBD_CDC_Setup>:
{
 8005220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8005224:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005228:	780a      	ldrb	r2, [r1, #0]
{
 800522a:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800522c:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8005230:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005232:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8005236:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800523a:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800523e:	d028      	beq.n	8005292 <USBD_CDC_Setup+0x72>
 8005240:	2c20      	cmp	r4, #32
 8005242:	d145      	bne.n	80052d0 <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8005244:	88cc      	ldrh	r4, [r1, #6]
 8005246:	784b      	ldrb	r3, [r1, #1]
 8005248:	b1e4      	cbz	r4, 8005284 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 800524a:	0612      	lsls	r2, r2, #24
 800524c:	d511      	bpl.n	8005272 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800524e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8005252:	4639      	mov	r1, r7
 8005254:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	4622      	mov	r2, r4
 800525c:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800525e:	88f2      	ldrh	r2, [r6, #6]
 8005260:	4639      	mov	r1, r7
 8005262:	4628      	mov	r0, r5
 8005264:	f000 fc45 	bl	8005af2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005268:	4644      	mov	r4, r8
}
 800526a:	4620      	mov	r0, r4
 800526c:	b003      	add	sp, #12
 800526e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8005272:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005276:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800527a:	4622      	mov	r2, r4
 800527c:	4639      	mov	r1, r7
 800527e:	f000 fc4d 	bl	8005b1c <USBD_CtlPrepareRx>
 8005282:	e7f1      	b.n	8005268 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005284:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8005288:	4618      	mov	r0, r3
 800528a:	6895      	ldr	r5, [r2, #8]
 800528c:	4622      	mov	r2, r4
 800528e:	47a8      	blx	r5
 8005290:	e7eb      	b.n	800526a <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8005292:	784f      	ldrb	r7, [r1, #1]
 8005294:	2f0a      	cmp	r7, #10
 8005296:	d00d      	beq.n	80052b4 <USBD_CDC_Setup+0x94>
 8005298:	2f0b      	cmp	r7, #11
 800529a:	d015      	beq.n	80052c8 <USBD_CDC_Setup+0xa8>
 800529c:	b9c7      	cbnz	r7, 80052d0 <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800529e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d114      	bne.n	80052d0 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80052a6:	2202      	movs	r2, #2
 80052a8:	f10d 0106 	add.w	r1, sp, #6
 80052ac:	f000 fc21 	bl	8005af2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80052b0:	463c      	mov	r4, r7
 80052b2:	e7da      	b.n	800526a <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d109      	bne.n	80052d0 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80052bc:	2201      	movs	r2, #1
 80052be:	f10d 0105 	add.w	r1, sp, #5
 80052c2:	f000 fc16 	bl	8005af2 <USBD_CtlSendData>
 80052c6:	e7d0      	b.n	800526a <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d0cc      	beq.n	800526a <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80052d0:	4631      	mov	r1, r6
 80052d2:	4628      	mov	r0, r5
 80052d4:	f000 fbe6 	bl	8005aa4 <USBD_CtlError>
          ret = USBD_FAIL;
 80052d8:	2402      	movs	r4, #2
          break;
 80052da:	e7c6      	b.n	800526a <USBD_CDC_Setup+0x4a>

080052dc <USBD_CDC_DeInit>:
{
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80052e0:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80052e2:	2181      	movs	r1, #129	; 0x81
 80052e4:	f000 fe84 	bl	8005ff0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80052e8:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80052ea:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80052ec:	4620      	mov	r0, r4
 80052ee:	f000 fe7f 	bl	8005ff0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80052f2:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80052f6:	2182      	movs	r1, #130	; 0x82
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 fe79 	bl	8005ff0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80052fe:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005302:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005304:	b14b      	cbz	r3, 800531a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005306:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800530e:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005312:	f000 fedb 	bl	80060cc <USBD_static_free>
    pdev->pClassData = NULL;
 8005316:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800531a:	2000      	movs	r0, #0
 800531c:	bd38      	pop	{r3, r4, r5, pc}

0800531e <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800531e:	7c03      	ldrb	r3, [r0, #16]
{
 8005320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005324:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005326:	bbcb      	cbnz	r3, 800539c <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800532c:	2202      	movs	r2, #2
 800532e:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005330:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005332:	f000 fe4d 	bl	8005fd0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005336:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800533a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800533c:	4629      	mov	r1, r5
 800533e:	2202      	movs	r2, #2
 8005340:	4620      	mov	r0, r4
 8005342:	f000 fe45 	bl	8005fd0 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005346:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800534a:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800534c:	2308      	movs	r3, #8
 800534e:	2203      	movs	r2, #3
 8005350:	2182      	movs	r1, #130	; 0x82
 8005352:	4620      	mov	r0, r4
 8005354:	f000 fe3c 	bl	8005fd0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005358:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800535a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800535e:	f000 feb1 	bl	80060c4 <USBD_static_malloc>
 8005362:	4606      	mov	r6, r0
 8005364:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005368:	b350      	cbz	r0, 80053c0 <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 800536a:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800536c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005374:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8005378:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 800537c:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005380:	f1b8 0f00 	cmp.w	r8, #0
 8005384:	d113      	bne.n	80053ae <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800538a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800538e:	4629      	mov	r1, r5
 8005390:	4620      	mov	r0, r4
 8005392:	f000 fe85 	bl	80060a0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005396:	4640      	mov	r0, r8
}
 8005398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800539c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800539e:	2340      	movs	r3, #64	; 0x40
 80053a0:	2202      	movs	r2, #2
 80053a2:	2181      	movs	r1, #129	; 0x81
 80053a4:	f000 fe14 	bl	8005fd0 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053a8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053aa:	2340      	movs	r3, #64	; 0x40
 80053ac:	e7c6      	b.n	800533c <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053ae:	2340      	movs	r3, #64	; 0x40
 80053b0:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80053b4:	4629      	mov	r1, r5
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 fe72 	bl	80060a0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80053bc:	4638      	mov	r0, r7
 80053be:	e7eb      	b.n	8005398 <USBD_CDC_Init+0x7a>
    ret = 1U;
 80053c0:	4628      	mov	r0, r5
 80053c2:	e7e9      	b.n	8005398 <USBD_CDC_Init+0x7a>

080053c4 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80053c4:	b119      	cbz	r1, 80053ce <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80053c6:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80053ca:	2000      	movs	r0, #0
 80053cc:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80053ce:	2002      	movs	r0, #2
  }

  return ret;
}
 80053d0:	4770      	bx	lr

080053d2 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053d2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80053d6:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80053d8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80053dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80053e0:	4770      	bx	lr

080053e2 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80053e2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80053e6:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80053e8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80053ec:	4770      	bx	lr

080053ee <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053ee:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80053f2:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80053f4:	b182      	cbz	r2, 8005418 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80053f6:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80053fa:	2301      	movs	r3, #1
 80053fc:	b974      	cbnz	r4, 800541c <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80053fe:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005402:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005406:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005408:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800540a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800540e:	b29b      	uxth	r3, r3
 8005410:	f000 fe38 	bl	8006084 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8005414:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005416:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005418:	2002      	movs	r0, #2
 800541a:	e7fc      	b.n	8005416 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 800541c:	4618      	mov	r0, r3
 800541e:	e7fa      	b.n	8005416 <USBD_CDC_TransmitPacket+0x28>

08005420 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005420:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8005424:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005426:	b162      	cbz	r2, 8005442 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005428:	7c04      	ldrb	r4, [r0, #16]
 800542a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800542e:	b934      	cbnz	r4, 800543e <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005430:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005434:	2101      	movs	r1, #1
 8005436:	f000 fe33 	bl	80060a0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800543a:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800543c:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800543e:	2340      	movs	r3, #64	; 0x40
 8005440:	e7f8      	b.n	8005434 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8005442:	2002      	movs	r0, #2
 8005444:	e7fa      	b.n	800543c <USBD_CDC_ReceivePacket+0x1c>

08005446 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005446:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005448:	b180      	cbz	r0, 800546c <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800544a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800544e:	b113      	cbz	r3, 8005456 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005456:	b109      	cbz	r1, 800545c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005458:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800545c:	2301      	movs	r3, #1
  pdev->id = id;
 800545e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005460:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005464:	f000 fd64 	bl	8005f30 <USBD_LL_Init>

  return USBD_OK;
 8005468:	2000      	movs	r0, #0
}
 800546a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800546c:	2002      	movs	r0, #2
 800546e:	e7fc      	b.n	800546a <USBD_Init+0x24>

08005470 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005470:	b119      	cbz	r1, 800547a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005472:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8005476:	2000      	movs	r0, #0
 8005478:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800547a:	2002      	movs	r0, #2
  }

  return status;
}
 800547c:	4770      	bx	lr

0800547e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800547e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005480:	f000 fd98 	bl	8005fb4 <USBD_LL_Start>

  return USBD_OK;
}
 8005484:	2000      	movs	r0, #0
 8005486:	bd08      	pop	{r3, pc}

08005488 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005488:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800548a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800548e:	b90b      	cbnz	r3, 8005494 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005490:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005492:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4798      	blx	r3
 8005498:	2800      	cmp	r0, #0
 800549a:	d0fa      	beq.n	8005492 <USBD_SetClassConfig+0xa>
 800549c:	e7f8      	b.n	8005490 <USBD_SetClassConfig+0x8>

0800549e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800549e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80054a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4798      	blx	r3

  return USBD_OK;
}
 80054a8:	2000      	movs	r0, #0
 80054aa:	bd08      	pop	{r3, pc}

080054ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054ac:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054ae:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80054b2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 fae1 	bl	8005a7c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054ba:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80054bc:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80054c0:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80054c4:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80054c8:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80054cc:	f001 031f 	and.w	r3, r1, #31
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d00e      	beq.n	80054f2 <USBD_LL_SetupStage+0x46>
 80054d4:	d307      	bcc.n	80054e6 <USBD_LL_SetupStage+0x3a>
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d010      	beq.n	80054fc <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054da:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80054de:	4620      	mov	r0, r4
 80054e0:	f000 fd94 	bl	800600c <USBD_LL_StallEP>
      break;
 80054e4:	e003      	b.n	80054ee <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80054e6:	4629      	mov	r1, r5
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 f8f5 	bl	80056d8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80054ee:	2000      	movs	r0, #0
 80054f0:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80054f2:	4629      	mov	r1, r5
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fa13 	bl	8005920 <USBD_StdItfReq>
      break;
 80054fa:	e7f8      	b.n	80054ee <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80054fc:	4629      	mov	r1, r5
 80054fe:	4620      	mov	r0, r4
 8005500:	f000 fa33 	bl	800596a <USBD_StdEPReq>
      break;
 8005504:	e7f3      	b.n	80054ee <USBD_LL_SetupStage+0x42>

08005506 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005506:	b570      	push	{r4, r5, r6, lr}
 8005508:	4605      	mov	r5, r0
 800550a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800550c:	bb49      	cbnz	r1, 8005562 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800550e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005512:	2b03      	cmp	r3, #3
 8005514:	d11e      	bne.n	8005554 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005516:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 800551a:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 800551e:	4293      	cmp	r3, r2
 8005520:	d90b      	bls.n	800553a <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8005522:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8005524:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8005526:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800552a:	bf8c      	ite	hi
 800552c:	b29a      	uxthhi	r2, r3
 800552e:	b292      	uxthls	r2, r2
 8005530:	4631      	mov	r1, r6
 8005532:	f000 fb02 	bl	8005b3a <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005536:	2000      	movs	r0, #0
}
 8005538:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800553a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	b123      	cbz	r3, 800554c <USBD_LL_DataOutStage+0x46>
 8005542:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005546:	2a03      	cmp	r2, #3
 8005548:	d100      	bne.n	800554c <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800554a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800554c:	4628      	mov	r0, r5
 800554e:	f000 fafc 	bl	8005b4a <USBD_CtlSendStatus>
 8005552:	e7f0      	b.n	8005536 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005554:	2b05      	cmp	r3, #5
 8005556:	d1ee      	bne.n	8005536 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005558:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800555c:	f000 fd56 	bl	800600c <USBD_LL_StallEP>
 8005560:	e7e9      	b.n	8005536 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005562:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	b12b      	cbz	r3, 8005576 <USBD_LL_DataOutStage+0x70>
 800556a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800556e:	2a03      	cmp	r2, #3
 8005570:	d101      	bne.n	8005576 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8005572:	4798      	blx	r3
 8005574:	e7df      	b.n	8005536 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8005576:	2002      	movs	r0, #2
 8005578:	e7de      	b.n	8005538 <USBD_LL_DataOutStage+0x32>

0800557a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800557a:	b570      	push	{r4, r5, r6, lr}
 800557c:	4613      	mov	r3, r2
 800557e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005580:	460e      	mov	r6, r1
 8005582:	2900      	cmp	r1, #0
 8005584:	d147      	bne.n	8005616 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005586:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800558a:	2a02      	cmp	r2, #2
 800558c:	d13c      	bne.n	8005608 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800558e:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8005592:	4295      	cmp	r5, r2
 8005594:	d913      	bls.n	80055be <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8005596:	1aaa      	subs	r2, r5, r2
 8005598:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800559a:	4619      	mov	r1, r3
 800559c:	b292      	uxth	r2, r2
 800559e:	f000 fab5 	bl	8005b0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055a2:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055a4:	461a      	mov	r2, r3
 80055a6:	4619      	mov	r1, r3
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 fd79 	bl	80060a0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80055ae:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80055b2:	2000      	movs	r0, #0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80055b8:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80055bc:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80055be:	69c3      	ldr	r3, [r0, #28]
 80055c0:	fbb3 f5f2 	udiv	r5, r3, r2
 80055c4:	fb02 3515 	mls	r5, r2, r5, r3
 80055c8:	b965      	cbnz	r5, 80055e4 <USBD_LL_DataInStage+0x6a>
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d80a      	bhi.n	80055e4 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80055ce:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d206      	bcs.n	80055e4 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055d6:	462a      	mov	r2, r5
 80055d8:	f000 fa98 	bl	8005b0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055dc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055e0:	462b      	mov	r3, r5
 80055e2:	e7df      	b.n	80055a4 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055e4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	b12b      	cbz	r3, 80055f8 <USBD_LL_DataInStage+0x7e>
 80055ec:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80055f0:	2a03      	cmp	r2, #3
 80055f2:	d101      	bne.n	80055f8 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80055f4:	4620      	mov	r0, r4
 80055f6:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80055f8:	2180      	movs	r1, #128	; 0x80
 80055fa:	4620      	mov	r0, r4
 80055fc:	f000 fd06 	bl	800600c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005600:	4620      	mov	r0, r4
 8005602:	f000 faad 	bl	8005b60 <USBD_CtlReceiveStatus>
 8005606:	e7d2      	b.n	80055ae <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005608:	f032 0304 	bics.w	r3, r2, #4
 800560c:	d1cf      	bne.n	80055ae <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800560e:	2180      	movs	r1, #128	; 0x80
 8005610:	f000 fcfc 	bl	800600c <USBD_LL_StallEP>
 8005614:	e7cb      	b.n	80055ae <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005616:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	b133      	cbz	r3, 800562c <USBD_LL_DataInStage+0xb2>
 800561e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005622:	2a03      	cmp	r2, #3
 8005624:	d102      	bne.n	800562c <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8005626:	4798      	blx	r3
  return USBD_OK;
 8005628:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800562a:	e7c7      	b.n	80055bc <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 800562c:	2002      	movs	r0, #2
 800562e:	e7c5      	b.n	80055bc <USBD_LL_DataInStage+0x42>

08005630 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005630:	2200      	movs	r2, #0
{
 8005632:	b570      	push	{r4, r5, r6, lr}
 8005634:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005636:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005638:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800563a:	4611      	mov	r1, r2
 800563c:	2340      	movs	r3, #64	; 0x40
 800563e:	f000 fcc7 	bl	8005fd0 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005642:	4633      	mov	r3, r6
 8005644:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005646:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800564a:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800564e:	2200      	movs	r2, #0
 8005650:	4620      	mov	r0, r4
 8005652:	f000 fcbd 	bl	8005fd0 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8005656:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8005658:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800565c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800565e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005660:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005664:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8005668:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800566a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800566e:	b123      	cbz	r3, 800567a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005670:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005674:	4620      	mov	r0, r4
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4798      	blx	r3
  }

  return USBD_OK;
}
 800567a:	2000      	movs	r0, #0
 800567c:	bd70      	pop	{r4, r5, r6, pc}

0800567e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800567e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005680:	2000      	movs	r0, #0
 8005682:	4770      	bx	lr

08005684 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005684:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005688:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800568c:	2304      	movs	r3, #4
 800568e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8005692:	2000      	movs	r0, #0
 8005694:	4770      	bx	lr

08005696 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005696:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800569a:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800569c:	bf04      	itt	eq
 800569e:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80056a2:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80056a6:	2000      	movs	r0, #0
 80056a8:	4770      	bx	lr

080056aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056aa:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ac:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80056b0:	2a03      	cmp	r2, #3
 80056b2:	d104      	bne.n	80056be <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80056b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	b103      	cbz	r3, 80056be <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80056bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80056be:	2000      	movs	r0, #0
 80056c0:	bd08      	pop	{r3, pc}

080056c2 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80056c2:	b510      	push	{r4, lr}
 80056c4:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80056c6:	2180      	movs	r1, #128	; 0x80
 80056c8:	f000 fca0 	bl	800600c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80056cc:	4620      	mov	r0, r4
}
 80056ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80056d2:	2100      	movs	r1, #0
 80056d4:	f000 bc9a 	b.w	800600c <USBD_LL_StallEP>

080056d8 <USBD_StdDevReq>:
{
 80056d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056da:	780b      	ldrb	r3, [r1, #0]
{
 80056dc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056e2:	2b20      	cmp	r3, #32
{
 80056e4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056e6:	d012      	beq.n	800570e <USBD_StdDevReq+0x36>
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	d010      	beq.n	800570e <USBD_StdDevReq+0x36>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d15b      	bne.n	80057a8 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 80056f0:	784b      	ldrb	r3, [r1, #1]
 80056f2:	2b09      	cmp	r3, #9
 80056f4:	d858      	bhi.n	80057a8 <USBD_StdDevReq+0xd0>
 80056f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056fa:	00e9      	.short	0x00e9
 80056fc:	00570105 	.word	0x00570105
 8005700:	005700fe 	.word	0x005700fe
 8005704:	00130084 	.word	0x00130084
 8005708:	00d20057 	.word	0x00d20057
 800570c:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 800570e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005712:	4629      	mov	r1, r5
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	4620      	mov	r0, r4
 8005718:	4798      	blx	r3
}
 800571a:	2000      	movs	r0, #0
 800571c:	b003      	add	sp, #12
 800571e:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005726:	884b      	ldrh	r3, [r1, #2]
 8005728:	0a1a      	lsrs	r2, r3, #8
 800572a:	3a01      	subs	r2, #1
 800572c:	2a06      	cmp	r2, #6
 800572e:	d83b      	bhi.n	80057a8 <USBD_StdDevReq+0xd0>
 8005730:	e8df f002 	tbb	[pc, r2]
 8005734:	3a2d2004 	.word	0x3a2d2004
 8005738:	523a      	.short	0x523a
 800573a:	5c          	.byte	0x5c
 800573b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800573c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005740:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005742:	f10d 0106 	add.w	r1, sp, #6
 8005746:	7c20      	ldrb	r0, [r4, #16]
 8005748:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800574a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800574e:	b152      	cbz	r2, 8005766 <USBD_StdDevReq+0x8e>
 8005750:	88eb      	ldrh	r3, [r5, #6]
 8005752:	b143      	cbz	r3, 8005766 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8005754:	429a      	cmp	r2, r3
 8005756:	bf28      	it	cs
 8005758:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800575a:	4601      	mov	r1, r0
 800575c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800575e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005762:	f000 f9c6 	bl	8005af2 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005766:	88eb      	ldrh	r3, [r5, #6]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1d6      	bne.n	800571a <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 800576c:	4620      	mov	r0, r4
 800576e:	f000 f9ec 	bl	8005b4a <USBD_CtlSendStatus>
 8005772:	e7d2      	b.n	800571a <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005774:	7c02      	ldrb	r2, [r0, #16]
 8005776:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800577a:	b932      	cbnz	r2, 800578a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800577e:	f10d 0006 	add.w	r0, sp, #6
 8005782:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005784:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005786:	7043      	strb	r3, [r0, #1]
 8005788:	e7df      	b.n	800574a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	e7f7      	b.n	800577e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b05      	cmp	r3, #5
 8005792:	d809      	bhi.n	80057a8 <USBD_StdDevReq+0xd0>
 8005794:	e8df f003 	tbb	[pc, r3]
 8005798:	14100c03 	.word	0x14100c03
 800579c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800579e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057a2:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1cc      	bne.n	8005742 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80057a8:	4620      	mov	r0, r4
 80057aa:	f7ff ff8a 	bl	80056c2 <USBD_CtlError.constprop.1>
 80057ae:	e7b4      	b.n	800571a <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057b0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	e7f5      	b.n	80057a4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057b8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	e7f1      	b.n	80057a4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057c0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	e7ed      	b.n	80057a4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057c8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	e7e9      	b.n	80057a4 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057d0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	e7e5      	b.n	80057a4 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057d8:	7c03      	ldrb	r3, [r0, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e4      	bne.n	80057a8 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80057de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80057e2:	f10d 0006 	add.w	r0, sp, #6
 80057e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e8:	4798      	blx	r3
 80057ea:	e7ae      	b.n	800574a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ec:	7c03      	ldrb	r3, [r0, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1da      	bne.n	80057a8 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80057f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80057f6:	f10d 0006 	add.w	r0, sp, #6
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057fe:	2307      	movs	r3, #7
 8005800:	e7c1      	b.n	8005786 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005802:	888b      	ldrh	r3, [r1, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1cf      	bne.n	80057a8 <USBD_StdDevReq+0xd0>
 8005808:	88cb      	ldrh	r3, [r1, #6]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1cc      	bne.n	80057a8 <USBD_StdDevReq+0xd0>
 800580e:	884d      	ldrh	r5, [r1, #2]
 8005810:	2d7f      	cmp	r5, #127	; 0x7f
 8005812:	d8c9      	bhi.n	80057a8 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005814:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005818:	2b03      	cmp	r3, #3
 800581a:	d0c5      	beq.n	80057a8 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800581c:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800581e:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005822:	f000 fc21 	bl	8006068 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005826:	4620      	mov	r0, r4
 8005828:	f000 f98f 	bl	8005b4a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800582c:	b11d      	cbz	r5, 8005836 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800582e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005830:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005834:	e771      	b.n	800571a <USBD_StdDevReq+0x42>
 8005836:	2301      	movs	r3, #1
 8005838:	e7fa      	b.n	8005830 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 800583a:	7889      	ldrb	r1, [r1, #2]
 800583c:	4d37      	ldr	r5, [pc, #220]	; (800591c <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800583e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8005840:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005842:	d8b1      	bhi.n	80057a8 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8005844:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005848:	2b02      	cmp	r3, #2
 800584a:	d008      	beq.n	800585e <USBD_StdDevReq+0x186>
 800584c:	2b03      	cmp	r3, #3
 800584e:	d014      	beq.n	800587a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8005850:	f7ff ff37 	bl	80056c2 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005854:	7829      	ldrb	r1, [r5, #0]
 8005856:	4620      	mov	r0, r4
 8005858:	f7ff fe21 	bl	800549e <USBD_ClrClassConfig>
 800585c:	e75d      	b.n	800571a <USBD_StdDevReq+0x42>
        if (cfgidx)
 800585e:	2900      	cmp	r1, #0
 8005860:	d084      	beq.n	800576c <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8005862:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005864:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8005866:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005868:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800586c:	4620      	mov	r0, r4
 800586e:	f7ff fe0b 	bl	8005488 <USBD_SetClassConfig>
 8005872:	2802      	cmp	r0, #2
 8005874:	f47f af7a 	bne.w	800576c <USBD_StdDevReq+0x94>
 8005878:	e796      	b.n	80057a8 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800587a:	b931      	cbnz	r1, 800588a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800587c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800587e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005880:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8005884:	f7ff fe0b 	bl	800549e <USBD_ClrClassConfig>
 8005888:	e770      	b.n	800576c <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800588a:	6841      	ldr	r1, [r0, #4]
 800588c:	2901      	cmp	r1, #1
 800588e:	f43f af6d 	beq.w	800576c <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005892:	b2c9      	uxtb	r1, r1
 8005894:	f7ff fe03 	bl	800549e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005898:	7829      	ldrb	r1, [r5, #0]
 800589a:	6061      	str	r1, [r4, #4]
 800589c:	e7e6      	b.n	800586c <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800589e:	88ca      	ldrh	r2, [r1, #6]
 80058a0:	2a01      	cmp	r2, #1
 80058a2:	d181      	bne.n	80057a8 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80058a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f43f af7d 	beq.w	80057a8 <USBD_StdDevReq+0xd0>
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d904      	bls.n	80058bc <USBD_StdDevReq+0x1e4>
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	f47f af78 	bne.w	80057a8 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80058b8:	1d01      	adds	r1, r0, #4
 80058ba:	e003      	b.n	80058c4 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 80058bc:	4601      	mov	r1, r0
 80058be:	2300      	movs	r3, #0
 80058c0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 f914 	bl	8005af2 <USBD_CtlSendData>
 80058ca:	e726      	b.n	800571a <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 80058cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80058d0:	3b01      	subs	r3, #1
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	f63f af68 	bhi.w	80057a8 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 80058d8:	88cb      	ldrh	r3, [r1, #6]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	f47f af64 	bne.w	80057a8 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80058e0:	2301      	movs	r3, #1
 80058e2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80058e4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80058e8:	b10b      	cbz	r3, 80058ee <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80058ea:	2303      	movs	r3, #3
 80058ec:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80058ee:	2202      	movs	r2, #2
 80058f0:	f104 010c 	add.w	r1, r4, #12
 80058f4:	e7e6      	b.n	80058c4 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80058f6:	884b      	ldrh	r3, [r1, #2]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f47f af0e 	bne.w	800571a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80058fe:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8005902:	e733      	b.n	800576c <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8005904:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005908:	3b01      	subs	r3, #1
 800590a:	2b02      	cmp	r3, #2
 800590c:	f63f af4c 	bhi.w	80057a8 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005910:	884b      	ldrh	r3, [r1, #2]
 8005912:	2b01      	cmp	r3, #1
 8005914:	f47f af01 	bne.w	800571a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	e7f0      	b.n	80058fe <USBD_StdDevReq+0x226>
 800591c:	200003a0 	.word	0x200003a0

08005920 <USBD_StdItfReq>:
{
 8005920:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005922:	780b      	ldrb	r3, [r1, #0]
{
 8005924:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005926:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800592a:	2b20      	cmp	r3, #32
{
 800592c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800592e:	d002      	beq.n	8005936 <USBD_StdItfReq+0x16>
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d000      	beq.n	8005936 <USBD_StdItfReq+0x16>
 8005934:	b9ab      	cbnz	r3, 8005962 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8005936:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800593a:	3b01      	subs	r3, #1
 800593c:	2b02      	cmp	r3, #2
 800593e:	d810      	bhi.n	8005962 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005940:	792b      	ldrb	r3, [r5, #4]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d80d      	bhi.n	8005962 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005946:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800594a:	4629      	mov	r1, r5
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	4620      	mov	r0, r4
 8005950:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005952:	88eb      	ldrh	r3, [r5, #6]
 8005954:	b91b      	cbnz	r3, 800595e <USBD_StdItfReq+0x3e>
 8005956:	b910      	cbnz	r0, 800595e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8005958:	4620      	mov	r0, r4
 800595a:	f000 f8f6 	bl	8005b4a <USBD_CtlSendStatus>
}
 800595e:	2000      	movs	r0, #0
 8005960:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8005962:	4620      	mov	r0, r4
 8005964:	f7ff fead 	bl	80056c2 <USBD_CtlError.constprop.1>
          break;
 8005968:	e7f9      	b.n	800595e <USBD_StdItfReq+0x3e>

0800596a <USBD_StdEPReq>:
{
 800596a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800596c:	780a      	ldrb	r2, [r1, #0]
{
 800596e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005970:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8005974:	2a20      	cmp	r2, #32
{
 8005976:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005978:	d014      	beq.n	80059a4 <USBD_StdEPReq+0x3a>
 800597a:	2a40      	cmp	r2, #64	; 0x40
 800597c:	d012      	beq.n	80059a4 <USBD_StdEPReq+0x3a>
 800597e:	b96a      	cbnz	r2, 800599c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8005980:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005982:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8005984:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8005986:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8005988:	d020      	beq.n	80059cc <USBD_StdEPReq+0x62>
 800598a:	d336      	bcc.n	80059fa <USBD_StdEPReq+0x90>
 800598c:	2a03      	cmp	r2, #3
 800598e:	d105      	bne.n	800599c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8005990:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005994:	2a02      	cmp	r2, #2
 8005996:	d027      	beq.n	80059e8 <USBD_StdEPReq+0x7e>
 8005998:	2a03      	cmp	r2, #3
 800599a:	d00b      	beq.n	80059b4 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff fe90 	bl	80056c2 <USBD_CtlError.constprop.1>
              break;
 80059a2:	e005      	b.n	80059b0 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 80059a4:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80059a8:	4619      	mov	r1, r3
 80059aa:	6892      	ldr	r2, [r2, #8]
 80059ac:	4620      	mov	r0, r4
 80059ae:	4790      	blx	r2
}
 80059b0:	2000      	movs	r0, #0
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059b4:	885a      	ldrh	r2, [r3, #2]
 80059b6:	b92a      	cbnz	r2, 80059c4 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 80059b8:	064a      	lsls	r2, r1, #25
 80059ba:	d003      	beq.n	80059c4 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059bc:	88db      	ldrh	r3, [r3, #6]
 80059be:	b90b      	cbnz	r3, 80059c4 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 80059c0:	f000 fb24 	bl	800600c <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80059c4:	4620      	mov	r0, r4
 80059c6:	f000 f8c0 	bl	8005b4a <USBD_CtlSendStatus>
              break;
 80059ca:	e7f1      	b.n	80059b0 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80059cc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80059d0:	2a02      	cmp	r2, #2
 80059d2:	d009      	beq.n	80059e8 <USBD_StdEPReq+0x7e>
 80059d4:	2a03      	cmp	r2, #3
 80059d6:	d1e1      	bne.n	800599c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059d8:	885b      	ldrh	r3, [r3, #2]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e8      	bne.n	80059b0 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 80059de:	064d      	lsls	r5, r1, #25
 80059e0:	d0f0      	beq.n	80059c4 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80059e2:	f000 fb21 	bl	8006028 <USBD_LL_ClearStallEP>
 80059e6:	e7ed      	b.n	80059c4 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059e8:	064b      	lsls	r3, r1, #25
 80059ea:	d0d7      	beq.n	800599c <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80059ec:	f000 fb0e 	bl	800600c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80059f0:	2180      	movs	r1, #128	; 0x80
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fb0a 	bl	800600c <USBD_LL_StallEP>
 80059f8:	e7da      	b.n	80059b0 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80059fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d018      	beq.n	8005a34 <USBD_StdEPReq+0xca>
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d1ca      	bne.n	800599c <USBD_StdEPReq+0x32>
 8005a06:	2314      	movs	r3, #20
 8005a08:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8005a0c:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a10:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8005a14:	d01f      	beq.n	8005a56 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a16:	6992      	ldr	r2, [r2, #24]
 8005a18:	2a00      	cmp	r2, #0
 8005a1a:	d0bf      	beq.n	800599c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a1c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8005a20:	fb05 3503 	mla	r5, r5, r3, r3
 8005a24:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a26:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8005a2a:	d11f      	bne.n	8005a6c <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8005a2c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a2e:	2202      	movs	r2, #2
 8005a30:	4629      	mov	r1, r5
 8005a32:	e00c      	b.n	8005a4e <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a34:	064a      	lsls	r2, r1, #25
 8005a36:	d1b1      	bne.n	800599c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a38:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8005a3a:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a3e:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a42:	bf4c      	ite	mi
 8005a44:	f100 0114 	addmi.w	r1, r0, #20
 8005a48:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8005a4c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 f84f 	bl	8005af2 <USBD_CtlSendData>
              break;
 8005a54:	e7ac      	b.n	80059b0 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a56:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d09e      	beq.n	800599c <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a5e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a62:	fb03 0505 	mla	r5, r3, r5, r0
 8005a66:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8005a6a:	e7dc      	b.n	8005a26 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 fae9 	bl	8006044 <USBD_LL_IsStallEP>
 8005a72:	b108      	cbz	r0, 8005a78 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e7d9      	b.n	8005a2c <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8005a78:	6028      	str	r0, [r5, #0]
 8005a7a:	e7d8      	b.n	8005a2e <USBD_StdEPReq+0xc4>

08005a7c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005a7c:	780b      	ldrb	r3, [r1, #0]
 8005a7e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005a80:	784b      	ldrb	r3, [r1, #1]
 8005a82:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005a84:	78ca      	ldrb	r2, [r1, #3]
 8005a86:	788b      	ldrb	r3, [r1, #2]
 8005a88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a8c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005a8e:	794a      	ldrb	r2, [r1, #5]
 8005a90:	790b      	ldrb	r3, [r1, #4]
 8005a92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a96:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005a98:	79ca      	ldrb	r2, [r1, #7]
 8005a9a:	798b      	ldrb	r3, [r1, #6]
 8005a9c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005aa0:	80c3      	strh	r3, [r0, #6]
}
 8005aa2:	4770      	bx	lr

08005aa4 <USBD_CtlError>:
{
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	f000 faaf 	bl	800600c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005aae:	4620      	mov	r0, r4
}
 8005ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f000 baa9 	b.w	800600c <USBD_LL_StallEP>

08005aba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005aba:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8005abc:	b188      	cbz	r0, 8005ae2 <USBD_GetString+0x28>
 8005abe:	4605      	mov	r5, r0
 8005ac0:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005ac2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2c00      	cmp	r4, #0
 8005aca:	d1f9      	bne.n	8005ac0 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005acc:	3301      	adds	r3, #1
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005ad2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	704b      	strb	r3, [r1, #1]
 8005ad8:	2302      	movs	r3, #2
 8005ada:	3801      	subs	r0, #1
    while (*desc != '\0')
 8005adc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005ae0:	b905      	cbnz	r5, 8005ae4 <USBD_GetString+0x2a>
}
 8005ae2:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	54cd      	strb	r5, [r1, r3]
 8005ae8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005aea:	3302      	adds	r3, #2
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	548c      	strb	r4, [r1, r2]
 8005af0:	e7f4      	b.n	8005adc <USBD_GetString+0x22>

08005af2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005af2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005af4:	2202      	movs	r2, #2
{
 8005af6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005af8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8005afc:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b00:	460a      	mov	r2, r1
 8005b02:	2100      	movs	r1, #0
 8005b04:	f000 fabe 	bl	8006084 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b08:	2000      	movs	r0, #0
 8005b0a:	bd10      	pop	{r4, pc}

08005b0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005b0c:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b0e:	4613      	mov	r3, r2
 8005b10:	460a      	mov	r2, r1
 8005b12:	2100      	movs	r1, #0
 8005b14:	f000 fab6 	bl	8006084 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b18:	2000      	movs	r0, #0
 8005b1a:	bd08      	pop	{r3, pc}

08005b1c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005b1c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b1e:	2203      	movs	r2, #3
{
 8005b20:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b22:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005b26:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b2a:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8005b2c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b30:	2100      	movs	r1, #0
 8005b32:	f000 fab5 	bl	80060a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b36:	2000      	movs	r0, #0
 8005b38:	bd10      	pop	{r4, pc}

08005b3a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005b3a:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	460a      	mov	r2, r1
 8005b40:	2100      	movs	r1, #0
 8005b42:	f000 faad 	bl	80060a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b46:	2000      	movs	r0, #0
 8005b48:	bd08      	pop	{r3, pc}

08005b4a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b4a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b52:	2300      	movs	r3, #0
 8005b54:	461a      	mov	r2, r3
 8005b56:	4619      	mov	r1, r3
 8005b58:	f000 fa94 	bl	8006084 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	bd08      	pop	{r3, pc}

08005b60 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005b60:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b62:	2305      	movs	r3, #5
 8005b64:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f000 fa97 	bl	80060a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b72:	2000      	movs	r0, #0
 8005b74:	bd08      	pop	{r3, pc}
	...

08005b78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005b78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	490e      	ldr	r1, [pc, #56]	; (8005bb8 <MX_USB_DEVICE_Init+0x40>)
 8005b7e:	480f      	ldr	r0, [pc, #60]	; (8005bbc <MX_USB_DEVICE_Init+0x44>)
 8005b80:	f7ff fc61 	bl	8005446 <USBD_Init>
 8005b84:	b108      	cbz	r0, 8005b8a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8005b86:	f7fb ffab 	bl	8001ae0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005b8a:	490d      	ldr	r1, [pc, #52]	; (8005bc0 <MX_USB_DEVICE_Init+0x48>)
 8005b8c:	480b      	ldr	r0, [pc, #44]	; (8005bbc <MX_USB_DEVICE_Init+0x44>)
 8005b8e:	f7ff fc6f 	bl	8005470 <USBD_RegisterClass>
 8005b92:	b108      	cbz	r0, 8005b98 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8005b94:	f7fb ffa4 	bl	8001ae0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005b98:	490a      	ldr	r1, [pc, #40]	; (8005bc4 <MX_USB_DEVICE_Init+0x4c>)
 8005b9a:	4808      	ldr	r0, [pc, #32]	; (8005bbc <MX_USB_DEVICE_Init+0x44>)
 8005b9c:	f7ff fc12 	bl	80053c4 <USBD_CDC_RegisterInterface>
 8005ba0:	b108      	cbz	r0, 8005ba6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8005ba2:	f7fb ff9d 	bl	8001ae0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005ba6:	4805      	ldr	r0, [pc, #20]	; (8005bbc <MX_USB_DEVICE_Init+0x44>)
 8005ba8:	f7ff fc69 	bl	800547e <USBD_Start>
 8005bac:	b118      	cbz	r0, 8005bb6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005bb2:	f7fb bf95 	b.w	8001ae0 <Error_Handler>
}
 8005bb6:	bd08      	pop	{r3, pc}
 8005bb8:	20000150 	.word	0x20000150
 8005bbc:	20000c08 	.word	0x20000c08
 8005bc0:	20000030 	.word	0x20000030
 8005bc4:	20000140 	.word	0x20000140

08005bc8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005bc8:	2000      	movs	r0, #0
 8005bca:	4770      	bx	lr

08005bcc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005bcc:	2000      	movs	r0, #0
 8005bce:	4770      	bx	lr

08005bd0 <CDC_Init_FS>:
{
 8005bd0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005bd2:	4c07      	ldr	r4, [pc, #28]	; (8005bf0 <CDC_Init_FS+0x20>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	4907      	ldr	r1, [pc, #28]	; (8005bf4 <CDC_Init_FS+0x24>)
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f7ff fbfa 	bl	80053d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005bde:	4906      	ldr	r1, [pc, #24]	; (8005bf8 <CDC_Init_FS+0x28>)
 8005be0:	4620      	mov	r0, r4
 8005be2:	f7ff fbfe 	bl	80053e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005be6:	4620      	mov	r0, r4
 8005be8:	f7ff fc1a 	bl	8005420 <USBD_CDC_ReceivePacket>
}
 8005bec:	2000      	movs	r0, #0
 8005bee:	bd10      	pop	{r4, pc}
 8005bf0:	20000c08 	.word	0x20000c08
 8005bf4:	200012b8 	.word	0x200012b8
 8005bf8:	20000ed0 	.word	0x20000ed0

08005bfc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005bfc:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005bfe:	4c09      	ldr	r4, [pc, #36]	; (8005c24 <CDC_Transmit_FS+0x28>)
{
 8005c00:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005c02:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8005c06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c0a:	b943      	cbnz	r3, 8005c1e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005c0c:	4601      	mov	r1, r0
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f7ff fbdf 	bl	80053d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005c14:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8005c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005c1a:	f7ff bbe8 	b.w	80053ee <USBD_CDC_TransmitPacket>
}
 8005c1e:	2001      	movs	r0, #1
 8005c20:	bd10      	pop	{r4, pc}
 8005c22:	bf00      	nop
 8005c24:	20000c08 	.word	0x20000c08

08005c28 <CDC_Receive_FS>:
{
 8005c28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(strstr((char*)Buf, "TOGGLE") != NULL){HAL_GPIO_TogglePin(Test_LED_GPIO_Port, Test_LED_Pin);}
 8005c2a:	4940      	ldr	r1, [pc, #256]	; (8005d2c <CDC_Receive_FS+0x104>)
{
 8005c2c:	4604      	mov	r4, r0
	if(strstr((char*)Buf, "TOGGLE") != NULL){HAL_GPIO_TogglePin(Test_LED_GPIO_Port, Test_LED_Pin);}
 8005c2e:	f001 f8e5 	bl	8006dfc <strstr>
 8005c32:	4606      	mov	r6, r0
 8005c34:	b170      	cbz	r0, 8005c54 <CDC_Receive_FS+0x2c>
 8005c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c3a:	483d      	ldr	r0, [pc, #244]	; (8005d30 <CDC_Receive_FS+0x108>)
 8005c3c:	f7fc fb1f 	bl	800227e <HAL_GPIO_TogglePin>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005c40:	4621      	mov	r1, r4
 8005c42:	483c      	ldr	r0, [pc, #240]	; (8005d34 <CDC_Receive_FS+0x10c>)
 8005c44:	f7ff fbcd 	bl	80053e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005c48:	483a      	ldr	r0, [pc, #232]	; (8005d34 <CDC_Receive_FS+0x10c>)
 8005c4a:	f7ff fbe9 	bl	8005420 <USBD_CDC_ReceivePacket>
}
 8005c4e:	2000      	movs	r0, #0
 8005c50:	b004      	add	sp, #16
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
	else if(strstr((char*)Buf, "SET_ANGLES ") != NULL){
 8005c54:	4938      	ldr	r1, [pc, #224]	; (8005d38 <CDC_Receive_FS+0x110>)
 8005c56:	4620      	mov	r0, r4
 8005c58:	f001 f8d0 	bl	8006dfc <strstr>
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	b1d0      	cbz	r0, 8005c96 <CDC_Receive_FS+0x6e>
		num = strtok ((char*)Buf," ");
 8005c60:	4936      	ldr	r1, [pc, #216]	; (8005d3c <CDC_Receive_FS+0x114>)
 8005c62:	4620      	mov	r0, r4
 8005c64:	f001 ff2a 	bl	8007abc <strtok>
		if(num!=NULL){num = strtok(NULL, " "); da=atoi(num);}
 8005c68:	b188      	cbz	r0, 8005c8e <CDC_Receive_FS+0x66>
 8005c6a:	4934      	ldr	r1, [pc, #208]	; (8005d3c <CDC_Receive_FS+0x114>)
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f001 ff25 	bl	8007abc <strtok>
 8005c72:	4605      	mov	r5, r0
 8005c74:	f000 fa2f 	bl	80060d6 <atoi>
 8005c78:	4b31      	ldr	r3, [pc, #196]	; (8005d40 <CDC_Receive_FS+0x118>)
 8005c7a:	6018      	str	r0, [r3, #0]
		if(num!=NULL){num = strtok(NULL, " "); ha=atoi(num);}
 8005c7c:	b13d      	cbz	r5, 8005c8e <CDC_Receive_FS+0x66>
 8005c7e:	492f      	ldr	r1, [pc, #188]	; (8005d3c <CDC_Receive_FS+0x114>)
 8005c80:	4630      	mov	r0, r6
 8005c82:	f001 ff1b 	bl	8007abc <strtok>
 8005c86:	f000 fa26 	bl	80060d6 <atoi>
 8005c8a:	4b2e      	ldr	r3, [pc, #184]	; (8005d44 <CDC_Receive_FS+0x11c>)
 8005c8c:	6018      	str	r0, [r3, #0]
		change = 1;
 8005c8e:	4b2e      	ldr	r3, [pc, #184]	; (8005d48 <CDC_Receive_FS+0x120>)
		change_t = 1;
 8005c90:	2201      	movs	r2, #1
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e7d4      	b.n	8005c40 <CDC_Receive_FS+0x18>
	else if(strstr((char*)Buf, "SET_TARGET ") != NULL){
 8005c96:	492d      	ldr	r1, [pc, #180]	; (8005d4c <CDC_Receive_FS+0x124>)
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f001 f8af 	bl	8006dfc <strstr>
 8005c9e:	b328      	cbz	r0, 8005cec <CDC_Receive_FS+0xc4>
		num = strtok ((char*)Buf," ");
 8005ca0:	4926      	ldr	r1, [pc, #152]	; (8005d3c <CDC_Receive_FS+0x114>)
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f001 ff0a 	bl	8007abc <strtok>
		if(num!=NULL){num = strtok(NULL, " "); target_latitude = atof(num);}
 8005ca8:	b1f0      	cbz	r0, 8005ce8 <CDC_Receive_FS+0xc0>
 8005caa:	4924      	ldr	r1, [pc, #144]	; (8005d3c <CDC_Receive_FS+0x114>)
 8005cac:	4628      	mov	r0, r5
 8005cae:	f001 ff05 	bl	8007abc <strtok>
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	f000 fa0c 	bl	80060d0 <atof>
 8005cb8:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <CDC_Receive_FS+0x128>)
 8005cba:	e9c3 0100 	strd	r0, r1, [r3]
		if(num!=NULL){num = strtok(NULL, " "); target_longitude = atof(num);}
 8005cbe:	b19e      	cbz	r6, 8005ce8 <CDC_Receive_FS+0xc0>
 8005cc0:	491e      	ldr	r1, [pc, #120]	; (8005d3c <CDC_Receive_FS+0x114>)
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f001 fefa 	bl	8007abc <strtok>
 8005cc8:	4606      	mov	r6, r0
 8005cca:	f000 fa01 	bl	80060d0 <atof>
 8005cce:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <CDC_Receive_FS+0x12c>)
 8005cd0:	e9c3 0100 	strd	r0, r1, [r3]
		if(num!=NULL){num = strtok(NULL, " "); target_height = atof(num);}
 8005cd4:	b146      	cbz	r6, 8005ce8 <CDC_Receive_FS+0xc0>
 8005cd6:	4919      	ldr	r1, [pc, #100]	; (8005d3c <CDC_Receive_FS+0x114>)
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f001 feef 	bl	8007abc <strtok>
 8005cde:	f000 f9f7 	bl	80060d0 <atof>
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <CDC_Receive_FS+0x130>)
 8005ce4:	e9c3 0100 	strd	r0, r1, [r3]
		change_t = 1;
 8005ce8:	4b1c      	ldr	r3, [pc, #112]	; (8005d5c <CDC_Receive_FS+0x134>)
 8005cea:	e7d1      	b.n	8005c90 <CDC_Receive_FS+0x68>
	else if(strstr((char*)Buf, "GET_POSITION ") != NULL){
 8005cec:	491c      	ldr	r1, [pc, #112]	; (8005d60 <CDC_Receive_FS+0x138>)
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f001 f884 	bl	8006dfc <strstr>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d0a3      	beq.n	8005c40 <CDC_Receive_FS+0x18>
		sprintf((char*)TxData, "SEND_POSITION latitude %f longitude %f height %f", latitude,
 8005cf8:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <CDC_Receive_FS+0x13c>)
 8005cfa:	491b      	ldr	r1, [pc, #108]	; (8005d68 <CDC_Receive_FS+0x140>)
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d04:	4b19      	ldr	r3, [pc, #100]	; (8005d6c <CDC_Receive_FS+0x144>)
 8005d06:	481a      	ldr	r0, [pc, #104]	; (8005d70 <CDC_Receive_FS+0x148>)
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	e9cd 2300 	strd	r2, r3, [sp]
 8005d10:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <CDC_Receive_FS+0x14c>)
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	f001 f849 	bl	8006dac <siprintf>
		CDC_Transmit_FS(TxData, strlen((char*)TxData));
 8005d1a:	4815      	ldr	r0, [pc, #84]	; (8005d70 <CDC_Receive_FS+0x148>)
 8005d1c:	f7fa fa18 	bl	8000150 <strlen>
 8005d20:	b281      	uxth	r1, r0
 8005d22:	4813      	ldr	r0, [pc, #76]	; (8005d70 <CDC_Receive_FS+0x148>)
 8005d24:	f7ff ff6a 	bl	8005bfc <CDC_Transmit_FS>
 8005d28:	e78a      	b.n	8005c40 <CDC_Receive_FS+0x18>
 8005d2a:	bf00      	nop
 8005d2c:	0800b83e 	.word	0x0800b83e
 8005d30:	40011000 	.word	0x40011000
 8005d34:	20000c08 	.word	0x20000c08
 8005d38:	0800b845 	.word	0x0800b845
 8005d3c:	0800ba88 	.word	0x0800ba88
 8005d40:	200005f0 	.word	0x200005f0
 8005d44:	200005d0 	.word	0x200005d0
 8005d48:	20000397 	.word	0x20000397
 8005d4c:	0800b851 	.word	0x0800b851
 8005d50:	200005d8 	.word	0x200005d8
 8005d54:	200005e0 	.word	0x200005e0
 8005d58:	20000608 	.word	0x20000608
 8005d5c:	20000398 	.word	0x20000398
 8005d60:	0800b85d 	.word	0x0800b85d
 8005d64:	200016a0 	.word	0x200016a0
 8005d68:	0800b86b 	.word	0x0800b86b
 8005d6c:	200005f8 	.word	0x200005f8
 8005d70:	20000819 	.word	0x20000819
 8005d74:	20000600 	.word	0x20000600

08005d78 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d78:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005d7a:	4801      	ldr	r0, [pc, #4]	; (8005d80 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d7c:	800b      	strh	r3, [r1, #0]
}
 8005d7e:	4770      	bx	lr
 8005d80:	2000016c 	.word	0x2000016c

08005d84 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d84:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005d86:	4801      	ldr	r0, [pc, #4]	; (8005d8c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005d88:	800b      	strh	r3, [r1, #0]
}
 8005d8a:	4770      	bx	lr
 8005d8c:	20000180 	.word	0x20000180

08005d90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005d90:	2300      	movs	r3, #0
 8005d92:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005d94:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8005d96:	0f05      	lsrs	r5, r0, #28
 8005d98:	b2ec      	uxtb	r4, r5
 8005d9a:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8005d9c:	bf94      	ite	ls
 8005d9e:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005da0:	3437      	addhi	r4, #55	; 0x37
 8005da2:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8005da6:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8005daa:	3301      	adds	r3, #1
 8005dac:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 8005dae:	b2dc      	uxtb	r4, r3
 8005db0:	42a2      	cmp	r2, r4
    value = value << 4;
 8005db2:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8005db6:	d8ee      	bhi.n	8005d96 <IntToUnicode+0x6>
  }
}
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005dbc <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005dbc:	231a      	movs	r3, #26
{
 8005dbe:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005dc0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005dc2:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <USBD_FS_SerialStrDescriptor+0x2c>)
 8005dc4:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005dc6:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8005dc8:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8005dca:	18c0      	adds	r0, r0, r3
 8005dcc:	d00a      	beq.n	8005de4 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005dd0:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005dd2:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005dd4:	4906      	ldr	r1, [pc, #24]	; (8005df0 <USBD_FS_SerialStrDescriptor+0x34>)
 8005dd6:	f7ff ffdb 	bl	8005d90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005dda:	2204      	movs	r2, #4
 8005ddc:	4905      	ldr	r1, [pc, #20]	; (8005df4 <USBD_FS_SerialStrDescriptor+0x38>)
 8005dde:	4620      	mov	r0, r4
 8005de0:	f7ff ffd6 	bl	8005d90 <IntToUnicode>
}
 8005de4:	4804      	ldr	r0, [pc, #16]	; (8005df8 <USBD_FS_SerialStrDescriptor+0x3c>)
 8005de6:	bd10      	pop	{r4, pc}
 8005de8:	1ffff7e8 	.word	0x1ffff7e8
 8005dec:	1ffff7ec 	.word	0x1ffff7ec
 8005df0:	20000186 	.word	0x20000186
 8005df4:	20000196 	.word	0x20000196
 8005df8:	20000184 	.word	0x20000184

08005dfc <USBD_FS_ManufacturerStrDescriptor>:
{
 8005dfc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005dfe:	4c04      	ldr	r4, [pc, #16]	; (8005e10 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005e00:	460a      	mov	r2, r1
 8005e02:	4804      	ldr	r0, [pc, #16]	; (8005e14 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005e04:	4621      	mov	r1, r4
 8005e06:	f7ff fe58 	bl	8005aba <USBD_GetString>
}
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	bf00      	nop
 8005e10:	200016a8 	.word	0x200016a8
 8005e14:	0800b8b5 	.word	0x0800b8b5

08005e18 <USBD_FS_ProductStrDescriptor>:
{
 8005e18:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e1a:	4c04      	ldr	r4, [pc, #16]	; (8005e2c <USBD_FS_ProductStrDescriptor+0x14>)
 8005e1c:	460a      	mov	r2, r1
 8005e1e:	4804      	ldr	r0, [pc, #16]	; (8005e30 <USBD_FS_ProductStrDescriptor+0x18>)
 8005e20:	4621      	mov	r1, r4
 8005e22:	f7ff fe4a 	bl	8005aba <USBD_GetString>
}
 8005e26:	4620      	mov	r0, r4
 8005e28:	bd10      	pop	{r4, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200016a8 	.word	0x200016a8
 8005e30:	0800b8c8 	.word	0x0800b8c8

08005e34 <USBD_FS_ConfigStrDescriptor>:
{
 8005e34:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e36:	4c04      	ldr	r4, [pc, #16]	; (8005e48 <USBD_FS_ConfigStrDescriptor+0x14>)
 8005e38:	460a      	mov	r2, r1
 8005e3a:	4804      	ldr	r0, [pc, #16]	; (8005e4c <USBD_FS_ConfigStrDescriptor+0x18>)
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	f7ff fe3c 	bl	8005aba <USBD_GetString>
}
 8005e42:	4620      	mov	r0, r4
 8005e44:	bd10      	pop	{r4, pc}
 8005e46:	bf00      	nop
 8005e48:	200016a8 	.word	0x200016a8
 8005e4c:	0800b89c 	.word	0x0800b89c

08005e50 <USBD_FS_InterfaceStrDescriptor>:
{
 8005e50:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e52:	4c04      	ldr	r4, [pc, #16]	; (8005e64 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8005e54:	460a      	mov	r2, r1
 8005e56:	4804      	ldr	r0, [pc, #16]	; (8005e68 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005e58:	4621      	mov	r1, r4
 8005e5a:	f7ff fe2e 	bl	8005aba <USBD_GetString>
}
 8005e5e:	4620      	mov	r0, r4
 8005e60:	bd10      	pop	{r4, pc}
 8005e62:	bf00      	nop
 8005e64:	200016a8 	.word	0x200016a8
 8005e68:	0800b8a7 	.word	0x0800b8a7

08005e6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005e6c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <HAL_PCD_MspInit+0x3c>)
 8005e70:	6802      	ldr	r2, [r0, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d115      	bne.n	8005ea2 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005e76:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8005e7a:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005e7c:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8005e7e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005e82:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005e84:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8005e86:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005e88:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8005e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005e92:	f7fc f847 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005e96:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005e98:	b003      	add	sp, #12
 8005e9a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005e9e:	f7fc b875 	b.w	8001f8c <HAL_NVIC_EnableIRQ>
}
 8005ea2:	b003      	add	sp, #12
 8005ea4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ea8:	40005c00 	.word	0x40005c00

08005eac <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005eac:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8005eb0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005eb4:	f7ff bafa 	b.w	80054ac <USBD_LL_SetupStage>

08005eb8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005eb8:	2328      	movs	r3, #40	; 0x28
 8005eba:	fb03 0301 	mla	r3, r3, r1, r0
 8005ebe:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005ec2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005ec6:	f7ff bb1e 	b.w	8005506 <USBD_LL_DataOutStage>

08005eca <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005eca:	2328      	movs	r3, #40	; 0x28
 8005ecc:	fb03 0301 	mla	r3, r3, r1, r0
 8005ed0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed6:	f7ff bb50 	b.w	800557a <USBD_LL_DataInStage>

08005eda <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005eda:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005ede:	f7ff bbe4 	b.w	80056aa <USBD_LL_SOF>

08005ee2 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005ee2:	6883      	ldr	r3, [r0, #8]
{
 8005ee4:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005ee6:	2b02      	cmp	r3, #2
{
 8005ee8:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005eea:	d001      	beq.n	8005ef0 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8005eec:	f7fb fdf8 	bl	8001ae0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005ef0:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	f7ff fbc2 	bl	800567e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005efa:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8005efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f02:	f7ff bb95 	b.w	8005630 <USBD_LL_Reset>
	...

08005f08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f0c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005f10:	f7ff fbb8 	bl	8005684 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005f14:	69a3      	ldr	r3, [r4, #24]
 8005f16:	b123      	cbz	r3, 8005f22 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f18:	4a02      	ldr	r2, [pc, #8]	; (8005f24 <HAL_PCD_SuspendCallback+0x1c>)
 8005f1a:	6913      	ldr	r3, [r2, #16]
 8005f1c:	f043 0306 	orr.w	r3, r3, #6
 8005f20:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005f22:	bd10      	pop	{r4, pc}
 8005f24:	e000ed00 	.word	0xe000ed00

08005f28 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f28:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005f2c:	f7ff bbb3 	b.w	8005696 <USBD_LL_Resume>

08005f30 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005f30:	2308      	movs	r3, #8
{
 8005f32:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005f34:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <USBD_LL_Init+0x7c>)
{
 8005f36:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8005f38:	481d      	ldr	r0, [pc, #116]	; (8005fb0 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005f3a:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005f42:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8005f44:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8005f48:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005f4c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005f50:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005f52:	f7fc fc9d 	bl	8002890 <HAL_PCD_Init>
 8005f56:	b108      	cbz	r0, 8005f5c <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8005f58:	f7fb fdc2 	bl	8001ae0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2318      	movs	r3, #24
 8005f60:	4611      	mov	r1, r2
 8005f62:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005f66:	f7fd faeb 	bl	8003540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005f6a:	2358      	movs	r3, #88	; 0x58
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2180      	movs	r1, #128	; 0x80
 8005f70:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005f74:	f7fd fae4 	bl	8003540 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005f78:	23c0      	movs	r3, #192	; 0xc0
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2181      	movs	r1, #129	; 0x81
 8005f7e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005f82:	f7fd fadd 	bl	8003540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005f86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005f92:	f7fd fad5 	bl	8003540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2182      	movs	r1, #130	; 0x82
 8005f9e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005fa2:	f7fd facd 	bl	8003540 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	bd10      	pop	{r4, pc}
 8005faa:	bf00      	nop
 8005fac:	40005c00 	.word	0x40005c00
 8005fb0:	200018a8 	.word	0x200018a8

08005fb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005fb4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8005fb6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005fba:	f7fc fce1 	bl	8002980 <HAL_PCD_Start>
 8005fbe:	2803      	cmp	r0, #3
 8005fc0:	bf96      	itet	ls
 8005fc2:	4b02      	ldrls	r3, [pc, #8]	; (8005fcc <USBD_LL_Start+0x18>)
 8005fc4:	2002      	movhi	r0, #2
 8005fc6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8005fc8:	bd08      	pop	{r3, pc}
 8005fca:	bf00      	nop
 8005fcc:	0800b8de 	.word	0x0800b8de

08005fd0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005fd4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005fd8:	4613      	mov	r3, r2
 8005fda:	4622      	mov	r2, r4
 8005fdc:	f7fd f9b4 	bl	8003348 <HAL_PCD_EP_Open>
 8005fe0:	2803      	cmp	r0, #3
 8005fe2:	bf96      	itet	ls
 8005fe4:	4b01      	ldrls	r3, [pc, #4]	; (8005fec <USBD_LL_OpenEP+0x1c>)
 8005fe6:	2002      	movhi	r0, #2
 8005fe8:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8005fea:	bd10      	pop	{r4, pc}
 8005fec:	0800b8de 	.word	0x0800b8de

08005ff0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ff0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ff2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005ff6:	f7fd f9d9 	bl	80033ac <HAL_PCD_EP_Close>
 8005ffa:	2803      	cmp	r0, #3
 8005ffc:	bf96      	itet	ls
 8005ffe:	4b02      	ldrls	r3, [pc, #8]	; (8006008 <USBD_LL_CloseEP+0x18>)
 8006000:	2002      	movhi	r0, #2
 8006002:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8006004:	bd08      	pop	{r3, pc}
 8006006:	bf00      	nop
 8006008:	0800b8de 	.word	0x0800b8de

0800600c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800600c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800600e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006012:	f7fd fa2f 	bl	8003474 <HAL_PCD_EP_SetStall>
 8006016:	2803      	cmp	r0, #3
 8006018:	bf96      	itet	ls
 800601a:	4b02      	ldrls	r3, [pc, #8]	; (8006024 <USBD_LL_StallEP+0x18>)
 800601c:	2002      	movhi	r0, #2
 800601e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8006020:	bd08      	pop	{r3, pc}
 8006022:	bf00      	nop
 8006024:	0800b8de 	.word	0x0800b8de

08006028 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006028:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800602a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800602e:	f7fd fa55 	bl	80034dc <HAL_PCD_EP_ClrStall>
 8006032:	2803      	cmp	r0, #3
 8006034:	bf96      	itet	ls
 8006036:	4b02      	ldrls	r3, [pc, #8]	; (8006040 <USBD_LL_ClearStallEP+0x18>)
 8006038:	2002      	movhi	r0, #2
 800603a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800603c:	bd08      	pop	{r3, pc}
 800603e:	bf00      	nop
 8006040:	0800b8de 	.word	0x0800b8de

08006044 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006044:	2228      	movs	r2, #40	; 0x28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8006046:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800604a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800604e:	bf1b      	ittet	ne
 8006050:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8006054:	fb03 2102 	mlane	r1, r3, r2, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006058:	fb02 0101 	mlaeq	r1, r2, r1, r0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800605c:	1809      	addne	r1, r1, r0
 800605e:	bf14      	ite	ne
 8006060:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006062:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
  }
}
 8006066:	4770      	bx	lr

08006068 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006068:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800606a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800606e:	f7fc fca0 	bl	80029b2 <HAL_PCD_SetAddress>
 8006072:	2803      	cmp	r0, #3
 8006074:	bf96      	itet	ls
 8006076:	4b02      	ldrls	r3, [pc, #8]	; (8006080 <USBD_LL_SetUSBAddress+0x18>)
 8006078:	2002      	movhi	r0, #2
 800607a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800607c:	bd08      	pop	{r3, pc}
 800607e:	bf00      	nop
 8006080:	0800b8de 	.word	0x0800b8de

08006084 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006084:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006086:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800608a:	f7fd f9d9 	bl	8003440 <HAL_PCD_EP_Transmit>
 800608e:	2803      	cmp	r0, #3
 8006090:	bf96      	itet	ls
 8006092:	4b02      	ldrls	r3, [pc, #8]	; (800609c <USBD_LL_Transmit+0x18>)
 8006094:	2002      	movhi	r0, #2
 8006096:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8006098:	bd08      	pop	{r3, pc}
 800609a:	bf00      	nop
 800609c:	0800b8de 	.word	0x0800b8de

080060a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80060a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80060a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060a6:	f7fd f9aa 	bl	80033fe <HAL_PCD_EP_Receive>
 80060aa:	2803      	cmp	r0, #3
 80060ac:	bf96      	itet	ls
 80060ae:	4b02      	ldrls	r3, [pc, #8]	; (80060b8 <USBD_LL_PrepareReceive+0x18>)
 80060b0:	2002      	movhi	r0, #2
 80060b2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80060b4:	bd08      	pop	{r3, pc}
 80060b6:	bf00      	nop
 80060b8:	0800b8de 	.word	0x0800b8de

080060bc <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80060bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060c0:	f7fd b9b6 	b.w	8003430 <HAL_PCD_EP_GetRxCount>

080060c4 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80060c4:	4800      	ldr	r0, [pc, #0]	; (80060c8 <USBD_static_malloc+0x4>)
 80060c6:	4770      	bx	lr
 80060c8:	200003a4 	.word	0x200003a4

080060cc <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 80060cc:	4770      	bx	lr

080060ce <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80060ce:	4770      	bx	lr

080060d0 <atof>:
 80060d0:	2100      	movs	r1, #0
 80060d2:	f001 bce1 	b.w	8007a98 <strtod>

080060d6 <atoi>:
 80060d6:	220a      	movs	r2, #10
 80060d8:	2100      	movs	r1, #0
 80060da:	f001 bdd1 	b.w	8007c80 <strtol>
	...

080060e0 <__errno>:
 80060e0:	4b01      	ldr	r3, [pc, #4]	; (80060e8 <__errno+0x8>)
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	200001a0 	.word	0x200001a0

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	2500      	movs	r5, #0
 80060f0:	4e0c      	ldr	r6, [pc, #48]	; (8006124 <__libc_init_array+0x38>)
 80060f2:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f4:	1ba4      	subs	r4, r4, r6
 80060f6:	10a4      	asrs	r4, r4, #2
 80060f8:	42a5      	cmp	r5, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	f005 fb54 	bl	800b7a8 <_init>
 8006100:	2500      	movs	r5, #0
 8006102:	4e0a      	ldr	r6, [pc, #40]	; (800612c <__libc_init_array+0x40>)
 8006104:	4c0a      	ldr	r4, [pc, #40]	; (8006130 <__libc_init_array+0x44>)
 8006106:	1ba4      	subs	r4, r4, r6
 8006108:	10a4      	asrs	r4, r4, #2
 800610a:	42a5      	cmp	r5, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006114:	4798      	blx	r3
 8006116:	3501      	adds	r5, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800611e:	4798      	blx	r3
 8006120:	3501      	adds	r5, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	0800bdc0 	.word	0x0800bdc0
 8006128:	0800bdc0 	.word	0x0800bdc0
 800612c:	0800bdc0 	.word	0x0800bdc0
 8006130:	0800bdc4 	.word	0x0800bdc4

08006134 <memset>:
 8006134:	4603      	mov	r3, r0
 8006136:	4402      	add	r2, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <__cvt>:
 8006144:	2b00      	cmp	r3, #0
 8006146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800614a:	461e      	mov	r6, r3
 800614c:	bfbb      	ittet	lt
 800614e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006152:	461e      	movlt	r6, r3
 8006154:	2300      	movge	r3, #0
 8006156:	232d      	movlt	r3, #45	; 0x2d
 8006158:	b088      	sub	sp, #32
 800615a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800615c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006160:	f027 0720 	bic.w	r7, r7, #32
 8006164:	2f46      	cmp	r7, #70	; 0x46
 8006166:	4614      	mov	r4, r2
 8006168:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800616a:	700b      	strb	r3, [r1, #0]
 800616c:	d004      	beq.n	8006178 <__cvt+0x34>
 800616e:	2f45      	cmp	r7, #69	; 0x45
 8006170:	d100      	bne.n	8006174 <__cvt+0x30>
 8006172:	3501      	adds	r5, #1
 8006174:	2302      	movs	r3, #2
 8006176:	e000      	b.n	800617a <__cvt+0x36>
 8006178:	2303      	movs	r3, #3
 800617a:	aa07      	add	r2, sp, #28
 800617c:	9204      	str	r2, [sp, #16]
 800617e:	aa06      	add	r2, sp, #24
 8006180:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006184:	e9cd 3500 	strd	r3, r5, [sp]
 8006188:	4622      	mov	r2, r4
 800618a:	4633      	mov	r3, r6
 800618c:	f001 fe1c 	bl	8007dc8 <_dtoa_r>
 8006190:	2f47      	cmp	r7, #71	; 0x47
 8006192:	4680      	mov	r8, r0
 8006194:	d102      	bne.n	800619c <__cvt+0x58>
 8006196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006198:	07db      	lsls	r3, r3, #31
 800619a:	d526      	bpl.n	80061ea <__cvt+0xa6>
 800619c:	2f46      	cmp	r7, #70	; 0x46
 800619e:	eb08 0905 	add.w	r9, r8, r5
 80061a2:	d111      	bne.n	80061c8 <__cvt+0x84>
 80061a4:	f898 3000 	ldrb.w	r3, [r8]
 80061a8:	2b30      	cmp	r3, #48	; 0x30
 80061aa:	d10a      	bne.n	80061c2 <__cvt+0x7e>
 80061ac:	2200      	movs	r2, #0
 80061ae:	2300      	movs	r3, #0
 80061b0:	4620      	mov	r0, r4
 80061b2:	4631      	mov	r1, r6
 80061b4:	f7fa fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80061b8:	b918      	cbnz	r0, 80061c2 <__cvt+0x7e>
 80061ba:	f1c5 0501 	rsb	r5, r5, #1
 80061be:	f8ca 5000 	str.w	r5, [sl]
 80061c2:	f8da 3000 	ldr.w	r3, [sl]
 80061c6:	4499      	add	r9, r3
 80061c8:	2200      	movs	r2, #0
 80061ca:	2300      	movs	r3, #0
 80061cc:	4620      	mov	r0, r4
 80061ce:	4631      	mov	r1, r6
 80061d0:	f7fa fbea 	bl	80009a8 <__aeabi_dcmpeq>
 80061d4:	b938      	cbnz	r0, 80061e6 <__cvt+0xa2>
 80061d6:	2230      	movs	r2, #48	; 0x30
 80061d8:	9b07      	ldr	r3, [sp, #28]
 80061da:	454b      	cmp	r3, r9
 80061dc:	d205      	bcs.n	80061ea <__cvt+0xa6>
 80061de:	1c59      	adds	r1, r3, #1
 80061e0:	9107      	str	r1, [sp, #28]
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	e7f8      	b.n	80061d8 <__cvt+0x94>
 80061e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80061ea:	4640      	mov	r0, r8
 80061ec:	9b07      	ldr	r3, [sp, #28]
 80061ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061f0:	eba3 0308 	sub.w	r3, r3, r8
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	b008      	add	sp, #32
 80061f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080061fc <__exponent>:
 80061fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061fe:	2900      	cmp	r1, #0
 8006200:	bfb4      	ite	lt
 8006202:	232d      	movlt	r3, #45	; 0x2d
 8006204:	232b      	movge	r3, #43	; 0x2b
 8006206:	4604      	mov	r4, r0
 8006208:	bfb8      	it	lt
 800620a:	4249      	neglt	r1, r1
 800620c:	2909      	cmp	r1, #9
 800620e:	f804 2b02 	strb.w	r2, [r4], #2
 8006212:	7043      	strb	r3, [r0, #1]
 8006214:	dd21      	ble.n	800625a <__exponent+0x5e>
 8006216:	f10d 0307 	add.w	r3, sp, #7
 800621a:	461f      	mov	r7, r3
 800621c:	260a      	movs	r6, #10
 800621e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006222:	fb06 1115 	mls	r1, r6, r5, r1
 8006226:	2d09      	cmp	r5, #9
 8006228:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800622c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006230:	f103 32ff 	add.w	r2, r3, #4294967295
 8006234:	4629      	mov	r1, r5
 8006236:	dc09      	bgt.n	800624c <__exponent+0x50>
 8006238:	3130      	adds	r1, #48	; 0x30
 800623a:	3b02      	subs	r3, #2
 800623c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006240:	42bb      	cmp	r3, r7
 8006242:	4622      	mov	r2, r4
 8006244:	d304      	bcc.n	8006250 <__exponent+0x54>
 8006246:	1a10      	subs	r0, r2, r0
 8006248:	b003      	add	sp, #12
 800624a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800624c:	4613      	mov	r3, r2
 800624e:	e7e6      	b.n	800621e <__exponent+0x22>
 8006250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006254:	f804 2b01 	strb.w	r2, [r4], #1
 8006258:	e7f2      	b.n	8006240 <__exponent+0x44>
 800625a:	2330      	movs	r3, #48	; 0x30
 800625c:	4419      	add	r1, r3
 800625e:	7083      	strb	r3, [r0, #2]
 8006260:	1d02      	adds	r2, r0, #4
 8006262:	70c1      	strb	r1, [r0, #3]
 8006264:	e7ef      	b.n	8006246 <__exponent+0x4a>
	...

08006268 <_printf_float>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	b091      	sub	sp, #68	; 0x44
 800626e:	460c      	mov	r4, r1
 8006270:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006272:	4693      	mov	fp, r2
 8006274:	461e      	mov	r6, r3
 8006276:	4605      	mov	r5, r0
 8006278:	f002 fe88 	bl	8008f8c <_localeconv_r>
 800627c:	6803      	ldr	r3, [r0, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	9309      	str	r3, [sp, #36]	; 0x24
 8006282:	f7f9 ff65 	bl	8000150 <strlen>
 8006286:	2300      	movs	r3, #0
 8006288:	930e      	str	r3, [sp, #56]	; 0x38
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	900a      	str	r0, [sp, #40]	; 0x28
 800628e:	3307      	adds	r3, #7
 8006290:	f023 0307 	bic.w	r3, r3, #7
 8006294:	f103 0208 	add.w	r2, r3, #8
 8006298:	f894 8018 	ldrb.w	r8, [r4, #24]
 800629c:	f8d4 a000 	ldr.w	sl, [r4]
 80062a0:	603a      	str	r2, [r7, #0]
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062aa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80062ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80062b4:	f04f 32ff 	mov.w	r2, #4294967295
 80062b8:	4ba6      	ldr	r3, [pc, #664]	; (8006554 <_printf_float+0x2ec>)
 80062ba:	4638      	mov	r0, r7
 80062bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062be:	f7fa fba5 	bl	8000a0c <__aeabi_dcmpun>
 80062c2:	bb68      	cbnz	r0, 8006320 <_printf_float+0xb8>
 80062c4:	f04f 32ff 	mov.w	r2, #4294967295
 80062c8:	4ba2      	ldr	r3, [pc, #648]	; (8006554 <_printf_float+0x2ec>)
 80062ca:	4638      	mov	r0, r7
 80062cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062ce:	f7fa fb7f 	bl	80009d0 <__aeabi_dcmple>
 80062d2:	bb28      	cbnz	r0, 8006320 <_printf_float+0xb8>
 80062d4:	2200      	movs	r2, #0
 80062d6:	2300      	movs	r3, #0
 80062d8:	4638      	mov	r0, r7
 80062da:	4649      	mov	r1, r9
 80062dc:	f7fa fb6e 	bl	80009bc <__aeabi_dcmplt>
 80062e0:	b110      	cbz	r0, 80062e8 <_printf_float+0x80>
 80062e2:	232d      	movs	r3, #45	; 0x2d
 80062e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e8:	4f9b      	ldr	r7, [pc, #620]	; (8006558 <_printf_float+0x2f0>)
 80062ea:	4b9c      	ldr	r3, [pc, #624]	; (800655c <_printf_float+0x2f4>)
 80062ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062f0:	bf98      	it	ls
 80062f2:	461f      	movls	r7, r3
 80062f4:	2303      	movs	r3, #3
 80062f6:	f04f 0900 	mov.w	r9, #0
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	f02a 0304 	bic.w	r3, sl, #4
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	9600      	str	r6, [sp, #0]
 8006304:	465b      	mov	r3, fp
 8006306:	aa0f      	add	r2, sp, #60	; 0x3c
 8006308:	4621      	mov	r1, r4
 800630a:	4628      	mov	r0, r5
 800630c:	f000 f9e2 	bl	80066d4 <_printf_common>
 8006310:	3001      	adds	r0, #1
 8006312:	f040 8090 	bne.w	8006436 <_printf_float+0x1ce>
 8006316:	f04f 30ff 	mov.w	r0, #4294967295
 800631a:	b011      	add	sp, #68	; 0x44
 800631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006320:	463a      	mov	r2, r7
 8006322:	464b      	mov	r3, r9
 8006324:	4638      	mov	r0, r7
 8006326:	4649      	mov	r1, r9
 8006328:	f7fa fb70 	bl	8000a0c <__aeabi_dcmpun>
 800632c:	b110      	cbz	r0, 8006334 <_printf_float+0xcc>
 800632e:	4f8c      	ldr	r7, [pc, #560]	; (8006560 <_printf_float+0x2f8>)
 8006330:	4b8c      	ldr	r3, [pc, #560]	; (8006564 <_printf_float+0x2fc>)
 8006332:	e7db      	b.n	80062ec <_printf_float+0x84>
 8006334:	6863      	ldr	r3, [r4, #4]
 8006336:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800633a:	1c59      	adds	r1, r3, #1
 800633c:	a80d      	add	r0, sp, #52	; 0x34
 800633e:	a90e      	add	r1, sp, #56	; 0x38
 8006340:	d140      	bne.n	80063c4 <_printf_float+0x15c>
 8006342:	2306      	movs	r3, #6
 8006344:	6063      	str	r3, [r4, #4]
 8006346:	f04f 0c00 	mov.w	ip, #0
 800634a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800634e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8006352:	6863      	ldr	r3, [r4, #4]
 8006354:	6022      	str	r2, [r4, #0]
 8006356:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	463a      	mov	r2, r7
 800635e:	464b      	mov	r3, r9
 8006360:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006364:	4628      	mov	r0, r5
 8006366:	f7ff feed 	bl	8006144 <__cvt>
 800636a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800636e:	2b47      	cmp	r3, #71	; 0x47
 8006370:	4607      	mov	r7, r0
 8006372:	d109      	bne.n	8006388 <_printf_float+0x120>
 8006374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006376:	1cd8      	adds	r0, r3, #3
 8006378:	db02      	blt.n	8006380 <_printf_float+0x118>
 800637a:	6862      	ldr	r2, [r4, #4]
 800637c:	4293      	cmp	r3, r2
 800637e:	dd47      	ble.n	8006410 <_printf_float+0x1a8>
 8006380:	f1a8 0802 	sub.w	r8, r8, #2
 8006384:	fa5f f888 	uxtb.w	r8, r8
 8006388:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800638c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800638e:	d824      	bhi.n	80063da <_printf_float+0x172>
 8006390:	3901      	subs	r1, #1
 8006392:	4642      	mov	r2, r8
 8006394:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006398:	910d      	str	r1, [sp, #52]	; 0x34
 800639a:	f7ff ff2f 	bl	80061fc <__exponent>
 800639e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063a0:	4681      	mov	r9, r0
 80063a2:	1813      	adds	r3, r2, r0
 80063a4:	2a01      	cmp	r2, #1
 80063a6:	6123      	str	r3, [r4, #16]
 80063a8:	dc02      	bgt.n	80063b0 <_printf_float+0x148>
 80063aa:	6822      	ldr	r2, [r4, #0]
 80063ac:	07d1      	lsls	r1, r2, #31
 80063ae:	d501      	bpl.n	80063b4 <_printf_float+0x14c>
 80063b0:	3301      	adds	r3, #1
 80063b2:	6123      	str	r3, [r4, #16]
 80063b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0a2      	beq.n	8006302 <_printf_float+0x9a>
 80063bc:	232d      	movs	r3, #45	; 0x2d
 80063be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c2:	e79e      	b.n	8006302 <_printf_float+0x9a>
 80063c4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80063c8:	f000 816e 	beq.w	80066a8 <_printf_float+0x440>
 80063cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063d0:	d1b9      	bne.n	8006346 <_printf_float+0xde>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1b7      	bne.n	8006346 <_printf_float+0xde>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e7b4      	b.n	8006344 <_printf_float+0xdc>
 80063da:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80063de:	d119      	bne.n	8006414 <_printf_float+0x1ac>
 80063e0:	2900      	cmp	r1, #0
 80063e2:	6863      	ldr	r3, [r4, #4]
 80063e4:	dd0c      	ble.n	8006400 <_printf_float+0x198>
 80063e6:	6121      	str	r1, [r4, #16]
 80063e8:	b913      	cbnz	r3, 80063f0 <_printf_float+0x188>
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	07d2      	lsls	r2, r2, #31
 80063ee:	d502      	bpl.n	80063f6 <_printf_float+0x18e>
 80063f0:	3301      	adds	r3, #1
 80063f2:	440b      	add	r3, r1
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f8:	f04f 0900 	mov.w	r9, #0
 80063fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80063fe:	e7d9      	b.n	80063b4 <_printf_float+0x14c>
 8006400:	b913      	cbnz	r3, 8006408 <_printf_float+0x1a0>
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	07d0      	lsls	r0, r2, #31
 8006406:	d501      	bpl.n	800640c <_printf_float+0x1a4>
 8006408:	3302      	adds	r3, #2
 800640a:	e7f3      	b.n	80063f4 <_printf_float+0x18c>
 800640c:	2301      	movs	r3, #1
 800640e:	e7f1      	b.n	80063f4 <_printf_float+0x18c>
 8006410:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006414:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006418:	4293      	cmp	r3, r2
 800641a:	db05      	blt.n	8006428 <_printf_float+0x1c0>
 800641c:	6822      	ldr	r2, [r4, #0]
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	07d1      	lsls	r1, r2, #31
 8006422:	d5e8      	bpl.n	80063f6 <_printf_float+0x18e>
 8006424:	3301      	adds	r3, #1
 8006426:	e7e5      	b.n	80063f4 <_printf_float+0x18c>
 8006428:	2b00      	cmp	r3, #0
 800642a:	bfcc      	ite	gt
 800642c:	2301      	movgt	r3, #1
 800642e:	f1c3 0302 	rsble	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	e7de      	b.n	80063f4 <_printf_float+0x18c>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	055a      	lsls	r2, r3, #21
 800643a:	d407      	bmi.n	800644c <_printf_float+0x1e4>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	463a      	mov	r2, r7
 8006440:	4659      	mov	r1, fp
 8006442:	4628      	mov	r0, r5
 8006444:	47b0      	blx	r6
 8006446:	3001      	adds	r0, #1
 8006448:	d129      	bne.n	800649e <_printf_float+0x236>
 800644a:	e764      	b.n	8006316 <_printf_float+0xae>
 800644c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006450:	f240 80d7 	bls.w	8006602 <_printf_float+0x39a>
 8006454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006458:	2200      	movs	r2, #0
 800645a:	2300      	movs	r3, #0
 800645c:	f7fa faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8006460:	b388      	cbz	r0, 80064c6 <_printf_float+0x25e>
 8006462:	2301      	movs	r3, #1
 8006464:	4a40      	ldr	r2, [pc, #256]	; (8006568 <_printf_float+0x300>)
 8006466:	4659      	mov	r1, fp
 8006468:	4628      	mov	r0, r5
 800646a:	47b0      	blx	r6
 800646c:	3001      	adds	r0, #1
 800646e:	f43f af52 	beq.w	8006316 <_printf_float+0xae>
 8006472:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006476:	429a      	cmp	r2, r3
 8006478:	db02      	blt.n	8006480 <_printf_float+0x218>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	07d8      	lsls	r0, r3, #31
 800647e:	d50e      	bpl.n	800649e <_printf_float+0x236>
 8006480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006484:	4659      	mov	r1, fp
 8006486:	4628      	mov	r0, r5
 8006488:	47b0      	blx	r6
 800648a:	3001      	adds	r0, #1
 800648c:	f43f af43 	beq.w	8006316 <_printf_float+0xae>
 8006490:	2700      	movs	r7, #0
 8006492:	f104 081a 	add.w	r8, r4, #26
 8006496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006498:	3b01      	subs	r3, #1
 800649a:	42bb      	cmp	r3, r7
 800649c:	dc09      	bgt.n	80064b2 <_printf_float+0x24a>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	079f      	lsls	r7, r3, #30
 80064a2:	f100 80fd 	bmi.w	80066a0 <_printf_float+0x438>
 80064a6:	68e0      	ldr	r0, [r4, #12]
 80064a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064aa:	4298      	cmp	r0, r3
 80064ac:	bfb8      	it	lt
 80064ae:	4618      	movlt	r0, r3
 80064b0:	e733      	b.n	800631a <_printf_float+0xb2>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4642      	mov	r2, r8
 80064b6:	4659      	mov	r1, fp
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b0      	blx	r6
 80064bc:	3001      	adds	r0, #1
 80064be:	f43f af2a 	beq.w	8006316 <_printf_float+0xae>
 80064c2:	3701      	adds	r7, #1
 80064c4:	e7e7      	b.n	8006496 <_printf_float+0x22e>
 80064c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	dc2b      	bgt.n	8006524 <_printf_float+0x2bc>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4a26      	ldr	r2, [pc, #152]	; (8006568 <_printf_float+0x300>)
 80064d0:	4659      	mov	r1, fp
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b0      	blx	r6
 80064d6:	3001      	adds	r0, #1
 80064d8:	f43f af1d 	beq.w	8006316 <_printf_float+0xae>
 80064dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064de:	b923      	cbnz	r3, 80064ea <_printf_float+0x282>
 80064e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064e2:	b913      	cbnz	r3, 80064ea <_printf_float+0x282>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	07d9      	lsls	r1, r3, #31
 80064e8:	d5d9      	bpl.n	800649e <_printf_float+0x236>
 80064ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064ee:	4659      	mov	r1, fp
 80064f0:	4628      	mov	r0, r5
 80064f2:	47b0      	blx	r6
 80064f4:	3001      	adds	r0, #1
 80064f6:	f43f af0e 	beq.w	8006316 <_printf_float+0xae>
 80064fa:	f04f 0800 	mov.w	r8, #0
 80064fe:	f104 091a 	add.w	r9, r4, #26
 8006502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006504:	425b      	negs	r3, r3
 8006506:	4543      	cmp	r3, r8
 8006508:	dc01      	bgt.n	800650e <_printf_float+0x2a6>
 800650a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800650c:	e797      	b.n	800643e <_printf_float+0x1d6>
 800650e:	2301      	movs	r3, #1
 8006510:	464a      	mov	r2, r9
 8006512:	4659      	mov	r1, fp
 8006514:	4628      	mov	r0, r5
 8006516:	47b0      	blx	r6
 8006518:	3001      	adds	r0, #1
 800651a:	f43f aefc 	beq.w	8006316 <_printf_float+0xae>
 800651e:	f108 0801 	add.w	r8, r8, #1
 8006522:	e7ee      	b.n	8006502 <_printf_float+0x29a>
 8006524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006526:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006528:	429a      	cmp	r2, r3
 800652a:	bfa8      	it	ge
 800652c:	461a      	movge	r2, r3
 800652e:	2a00      	cmp	r2, #0
 8006530:	4690      	mov	r8, r2
 8006532:	dd07      	ble.n	8006544 <_printf_float+0x2dc>
 8006534:	4613      	mov	r3, r2
 8006536:	4659      	mov	r1, fp
 8006538:	463a      	mov	r2, r7
 800653a:	4628      	mov	r0, r5
 800653c:	47b0      	blx	r6
 800653e:	3001      	adds	r0, #1
 8006540:	f43f aee9 	beq.w	8006316 <_printf_float+0xae>
 8006544:	f104 031a 	add.w	r3, r4, #26
 8006548:	f04f 0a00 	mov.w	sl, #0
 800654c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006550:	930b      	str	r3, [sp, #44]	; 0x2c
 8006552:	e015      	b.n	8006580 <_printf_float+0x318>
 8006554:	7fefffff 	.word	0x7fefffff
 8006558:	0800b8e6 	.word	0x0800b8e6
 800655c:	0800b8e2 	.word	0x0800b8e2
 8006560:	0800b8ee 	.word	0x0800b8ee
 8006564:	0800b8ea 	.word	0x0800b8ea
 8006568:	0800b8f2 	.word	0x0800b8f2
 800656c:	2301      	movs	r3, #1
 800656e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006570:	4659      	mov	r1, fp
 8006572:	4628      	mov	r0, r5
 8006574:	47b0      	blx	r6
 8006576:	3001      	adds	r0, #1
 8006578:	f43f aecd 	beq.w	8006316 <_printf_float+0xae>
 800657c:	f10a 0a01 	add.w	sl, sl, #1
 8006580:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006584:	eba9 0308 	sub.w	r3, r9, r8
 8006588:	4553      	cmp	r3, sl
 800658a:	dcef      	bgt.n	800656c <_printf_float+0x304>
 800658c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006590:	429a      	cmp	r2, r3
 8006592:	444f      	add	r7, r9
 8006594:	db14      	blt.n	80065c0 <_printf_float+0x358>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	07da      	lsls	r2, r3, #31
 800659a:	d411      	bmi.n	80065c0 <_printf_float+0x358>
 800659c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800659e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065a0:	eba3 0209 	sub.w	r2, r3, r9
 80065a4:	eba3 0901 	sub.w	r9, r3, r1
 80065a8:	4591      	cmp	r9, r2
 80065aa:	bfa8      	it	ge
 80065ac:	4691      	movge	r9, r2
 80065ae:	f1b9 0f00 	cmp.w	r9, #0
 80065b2:	dc0d      	bgt.n	80065d0 <_printf_float+0x368>
 80065b4:	2700      	movs	r7, #0
 80065b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ba:	f104 081a 	add.w	r8, r4, #26
 80065be:	e018      	b.n	80065f2 <_printf_float+0x38a>
 80065c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065c4:	4659      	mov	r1, fp
 80065c6:	4628      	mov	r0, r5
 80065c8:	47b0      	blx	r6
 80065ca:	3001      	adds	r0, #1
 80065cc:	d1e6      	bne.n	800659c <_printf_float+0x334>
 80065ce:	e6a2      	b.n	8006316 <_printf_float+0xae>
 80065d0:	464b      	mov	r3, r9
 80065d2:	463a      	mov	r2, r7
 80065d4:	4659      	mov	r1, fp
 80065d6:	4628      	mov	r0, r5
 80065d8:	47b0      	blx	r6
 80065da:	3001      	adds	r0, #1
 80065dc:	d1ea      	bne.n	80065b4 <_printf_float+0x34c>
 80065de:	e69a      	b.n	8006316 <_printf_float+0xae>
 80065e0:	2301      	movs	r3, #1
 80065e2:	4642      	mov	r2, r8
 80065e4:	4659      	mov	r1, fp
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b0      	blx	r6
 80065ea:	3001      	adds	r0, #1
 80065ec:	f43f ae93 	beq.w	8006316 <_printf_float+0xae>
 80065f0:	3701      	adds	r7, #1
 80065f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	eba3 0309 	sub.w	r3, r3, r9
 80065fc:	42bb      	cmp	r3, r7
 80065fe:	dcef      	bgt.n	80065e0 <_printf_float+0x378>
 8006600:	e74d      	b.n	800649e <_printf_float+0x236>
 8006602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006604:	2a01      	cmp	r2, #1
 8006606:	dc01      	bgt.n	800660c <_printf_float+0x3a4>
 8006608:	07db      	lsls	r3, r3, #31
 800660a:	d538      	bpl.n	800667e <_printf_float+0x416>
 800660c:	2301      	movs	r3, #1
 800660e:	463a      	mov	r2, r7
 8006610:	4659      	mov	r1, fp
 8006612:	4628      	mov	r0, r5
 8006614:	47b0      	blx	r6
 8006616:	3001      	adds	r0, #1
 8006618:	f43f ae7d 	beq.w	8006316 <_printf_float+0xae>
 800661c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006620:	4659      	mov	r1, fp
 8006622:	4628      	mov	r0, r5
 8006624:	47b0      	blx	r6
 8006626:	3001      	adds	r0, #1
 8006628:	f107 0701 	add.w	r7, r7, #1
 800662c:	f43f ae73 	beq.w	8006316 <_printf_float+0xae>
 8006630:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006636:	2200      	movs	r2, #0
 8006638:	f103 38ff 	add.w	r8, r3, #4294967295
 800663c:	2300      	movs	r3, #0
 800663e:	f7fa f9b3 	bl	80009a8 <__aeabi_dcmpeq>
 8006642:	b9c0      	cbnz	r0, 8006676 <_printf_float+0x40e>
 8006644:	4643      	mov	r3, r8
 8006646:	463a      	mov	r2, r7
 8006648:	4659      	mov	r1, fp
 800664a:	4628      	mov	r0, r5
 800664c:	47b0      	blx	r6
 800664e:	3001      	adds	r0, #1
 8006650:	d10d      	bne.n	800666e <_printf_float+0x406>
 8006652:	e660      	b.n	8006316 <_printf_float+0xae>
 8006654:	2301      	movs	r3, #1
 8006656:	4642      	mov	r2, r8
 8006658:	4659      	mov	r1, fp
 800665a:	4628      	mov	r0, r5
 800665c:	47b0      	blx	r6
 800665e:	3001      	adds	r0, #1
 8006660:	f43f ae59 	beq.w	8006316 <_printf_float+0xae>
 8006664:	3701      	adds	r7, #1
 8006666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006668:	3b01      	subs	r3, #1
 800666a:	42bb      	cmp	r3, r7
 800666c:	dcf2      	bgt.n	8006654 <_printf_float+0x3ec>
 800666e:	464b      	mov	r3, r9
 8006670:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006674:	e6e4      	b.n	8006440 <_printf_float+0x1d8>
 8006676:	2700      	movs	r7, #0
 8006678:	f104 081a 	add.w	r8, r4, #26
 800667c:	e7f3      	b.n	8006666 <_printf_float+0x3fe>
 800667e:	2301      	movs	r3, #1
 8006680:	e7e1      	b.n	8006646 <_printf_float+0x3de>
 8006682:	2301      	movs	r3, #1
 8006684:	4642      	mov	r2, r8
 8006686:	4659      	mov	r1, fp
 8006688:	4628      	mov	r0, r5
 800668a:	47b0      	blx	r6
 800668c:	3001      	adds	r0, #1
 800668e:	f43f ae42 	beq.w	8006316 <_printf_float+0xae>
 8006692:	3701      	adds	r7, #1
 8006694:	68e3      	ldr	r3, [r4, #12]
 8006696:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006698:	1a9b      	subs	r3, r3, r2
 800669a:	42bb      	cmp	r3, r7
 800669c:	dcf1      	bgt.n	8006682 <_printf_float+0x41a>
 800669e:	e702      	b.n	80064a6 <_printf_float+0x23e>
 80066a0:	2700      	movs	r7, #0
 80066a2:	f104 0819 	add.w	r8, r4, #25
 80066a6:	e7f5      	b.n	8006694 <_printf_float+0x42c>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f43f ae94 	beq.w	80063d6 <_printf_float+0x16e>
 80066ae:	f04f 0c00 	mov.w	ip, #0
 80066b2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80066b6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80066ba:	6022      	str	r2, [r4, #0]
 80066bc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80066c0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	463a      	mov	r2, r7
 80066c8:	464b      	mov	r3, r9
 80066ca:	4628      	mov	r0, r5
 80066cc:	f7ff fd3a 	bl	8006144 <__cvt>
 80066d0:	4607      	mov	r7, r0
 80066d2:	e64f      	b.n	8006374 <_printf_float+0x10c>

080066d4 <_printf_common>:
 80066d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	4691      	mov	r9, r2
 80066da:	461f      	mov	r7, r3
 80066dc:	688a      	ldr	r2, [r1, #8]
 80066de:	690b      	ldr	r3, [r1, #16]
 80066e0:	4606      	mov	r6, r0
 80066e2:	4293      	cmp	r3, r2
 80066e4:	bfb8      	it	lt
 80066e6:	4613      	movlt	r3, r2
 80066e8:	f8c9 3000 	str.w	r3, [r9]
 80066ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066f0:	460c      	mov	r4, r1
 80066f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066f6:	b112      	cbz	r2, 80066fe <_printf_common+0x2a>
 80066f8:	3301      	adds	r3, #1
 80066fa:	f8c9 3000 	str.w	r3, [r9]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	0699      	lsls	r1, r3, #26
 8006702:	bf42      	ittt	mi
 8006704:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006708:	3302      	addmi	r3, #2
 800670a:	f8c9 3000 	strmi.w	r3, [r9]
 800670e:	6825      	ldr	r5, [r4, #0]
 8006710:	f015 0506 	ands.w	r5, r5, #6
 8006714:	d107      	bne.n	8006726 <_printf_common+0x52>
 8006716:	f104 0a19 	add.w	sl, r4, #25
 800671a:	68e3      	ldr	r3, [r4, #12]
 800671c:	f8d9 2000 	ldr.w	r2, [r9]
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	42ab      	cmp	r3, r5
 8006724:	dc29      	bgt.n	800677a <_printf_common+0xa6>
 8006726:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	3300      	adds	r3, #0
 800672e:	bf18      	it	ne
 8006730:	2301      	movne	r3, #1
 8006732:	0692      	lsls	r2, r2, #26
 8006734:	d42e      	bmi.n	8006794 <_printf_common+0xc0>
 8006736:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800673a:	4639      	mov	r1, r7
 800673c:	4630      	mov	r0, r6
 800673e:	47c0      	blx	r8
 8006740:	3001      	adds	r0, #1
 8006742:	d021      	beq.n	8006788 <_printf_common+0xb4>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	68e5      	ldr	r5, [r4, #12]
 8006748:	f003 0306 	and.w	r3, r3, #6
 800674c:	2b04      	cmp	r3, #4
 800674e:	bf18      	it	ne
 8006750:	2500      	movne	r5, #0
 8006752:	f8d9 2000 	ldr.w	r2, [r9]
 8006756:	f04f 0900 	mov.w	r9, #0
 800675a:	bf08      	it	eq
 800675c:	1aad      	subeq	r5, r5, r2
 800675e:	68a3      	ldr	r3, [r4, #8]
 8006760:	6922      	ldr	r2, [r4, #16]
 8006762:	bf08      	it	eq
 8006764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006768:	4293      	cmp	r3, r2
 800676a:	bfc4      	itt	gt
 800676c:	1a9b      	subgt	r3, r3, r2
 800676e:	18ed      	addgt	r5, r5, r3
 8006770:	341a      	adds	r4, #26
 8006772:	454d      	cmp	r5, r9
 8006774:	d11a      	bne.n	80067ac <_printf_common+0xd8>
 8006776:	2000      	movs	r0, #0
 8006778:	e008      	b.n	800678c <_printf_common+0xb8>
 800677a:	2301      	movs	r3, #1
 800677c:	4652      	mov	r2, sl
 800677e:	4639      	mov	r1, r7
 8006780:	4630      	mov	r0, r6
 8006782:	47c0      	blx	r8
 8006784:	3001      	adds	r0, #1
 8006786:	d103      	bne.n	8006790 <_printf_common+0xbc>
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006790:	3501      	adds	r5, #1
 8006792:	e7c2      	b.n	800671a <_printf_common+0x46>
 8006794:	2030      	movs	r0, #48	; 0x30
 8006796:	18e1      	adds	r1, r4, r3
 8006798:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067a2:	4422      	add	r2, r4
 80067a4:	3302      	adds	r3, #2
 80067a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067aa:	e7c4      	b.n	8006736 <_printf_common+0x62>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4622      	mov	r2, r4
 80067b0:	4639      	mov	r1, r7
 80067b2:	4630      	mov	r0, r6
 80067b4:	47c0      	blx	r8
 80067b6:	3001      	adds	r0, #1
 80067b8:	d0e6      	beq.n	8006788 <_printf_common+0xb4>
 80067ba:	f109 0901 	add.w	r9, r9, #1
 80067be:	e7d8      	b.n	8006772 <_printf_common+0x9e>

080067c0 <_printf_i>:
 80067c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067c8:	460c      	mov	r4, r1
 80067ca:	7e09      	ldrb	r1, [r1, #24]
 80067cc:	b085      	sub	sp, #20
 80067ce:	296e      	cmp	r1, #110	; 0x6e
 80067d0:	4617      	mov	r7, r2
 80067d2:	4606      	mov	r6, r0
 80067d4:	4698      	mov	r8, r3
 80067d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067d8:	f000 80b3 	beq.w	8006942 <_printf_i+0x182>
 80067dc:	d822      	bhi.n	8006824 <_printf_i+0x64>
 80067de:	2963      	cmp	r1, #99	; 0x63
 80067e0:	d036      	beq.n	8006850 <_printf_i+0x90>
 80067e2:	d80a      	bhi.n	80067fa <_printf_i+0x3a>
 80067e4:	2900      	cmp	r1, #0
 80067e6:	f000 80b9 	beq.w	800695c <_printf_i+0x19c>
 80067ea:	2958      	cmp	r1, #88	; 0x58
 80067ec:	f000 8083 	beq.w	80068f6 <_printf_i+0x136>
 80067f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067f8:	e032      	b.n	8006860 <_printf_i+0xa0>
 80067fa:	2964      	cmp	r1, #100	; 0x64
 80067fc:	d001      	beq.n	8006802 <_printf_i+0x42>
 80067fe:	2969      	cmp	r1, #105	; 0x69
 8006800:	d1f6      	bne.n	80067f0 <_printf_i+0x30>
 8006802:	6820      	ldr	r0, [r4, #0]
 8006804:	6813      	ldr	r3, [r2, #0]
 8006806:	0605      	lsls	r5, r0, #24
 8006808:	f103 0104 	add.w	r1, r3, #4
 800680c:	d52a      	bpl.n	8006864 <_printf_i+0xa4>
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6011      	str	r1, [r2, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	da03      	bge.n	800681e <_printf_i+0x5e>
 8006816:	222d      	movs	r2, #45	; 0x2d
 8006818:	425b      	negs	r3, r3
 800681a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800681e:	486f      	ldr	r0, [pc, #444]	; (80069dc <_printf_i+0x21c>)
 8006820:	220a      	movs	r2, #10
 8006822:	e039      	b.n	8006898 <_printf_i+0xd8>
 8006824:	2973      	cmp	r1, #115	; 0x73
 8006826:	f000 809d 	beq.w	8006964 <_printf_i+0x1a4>
 800682a:	d808      	bhi.n	800683e <_printf_i+0x7e>
 800682c:	296f      	cmp	r1, #111	; 0x6f
 800682e:	d020      	beq.n	8006872 <_printf_i+0xb2>
 8006830:	2970      	cmp	r1, #112	; 0x70
 8006832:	d1dd      	bne.n	80067f0 <_printf_i+0x30>
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	f043 0320 	orr.w	r3, r3, #32
 800683a:	6023      	str	r3, [r4, #0]
 800683c:	e003      	b.n	8006846 <_printf_i+0x86>
 800683e:	2975      	cmp	r1, #117	; 0x75
 8006840:	d017      	beq.n	8006872 <_printf_i+0xb2>
 8006842:	2978      	cmp	r1, #120	; 0x78
 8006844:	d1d4      	bne.n	80067f0 <_printf_i+0x30>
 8006846:	2378      	movs	r3, #120	; 0x78
 8006848:	4865      	ldr	r0, [pc, #404]	; (80069e0 <_printf_i+0x220>)
 800684a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800684e:	e055      	b.n	80068fc <_printf_i+0x13c>
 8006850:	6813      	ldr	r3, [r2, #0]
 8006852:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006856:	1d19      	adds	r1, r3, #4
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6011      	str	r1, [r2, #0]
 800685c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006860:	2301      	movs	r3, #1
 8006862:	e08c      	b.n	800697e <_printf_i+0x1be>
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f010 0f40 	tst.w	r0, #64	; 0x40
 800686a:	6011      	str	r1, [r2, #0]
 800686c:	bf18      	it	ne
 800686e:	b21b      	sxthne	r3, r3
 8006870:	e7cf      	b.n	8006812 <_printf_i+0x52>
 8006872:	6813      	ldr	r3, [r2, #0]
 8006874:	6825      	ldr	r5, [r4, #0]
 8006876:	1d18      	adds	r0, r3, #4
 8006878:	6010      	str	r0, [r2, #0]
 800687a:	0628      	lsls	r0, r5, #24
 800687c:	d501      	bpl.n	8006882 <_printf_i+0xc2>
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	e002      	b.n	8006888 <_printf_i+0xc8>
 8006882:	0668      	lsls	r0, r5, #25
 8006884:	d5fb      	bpl.n	800687e <_printf_i+0xbe>
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	296f      	cmp	r1, #111	; 0x6f
 800688a:	bf14      	ite	ne
 800688c:	220a      	movne	r2, #10
 800688e:	2208      	moveq	r2, #8
 8006890:	4852      	ldr	r0, [pc, #328]	; (80069dc <_printf_i+0x21c>)
 8006892:	2100      	movs	r1, #0
 8006894:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006898:	6865      	ldr	r5, [r4, #4]
 800689a:	2d00      	cmp	r5, #0
 800689c:	60a5      	str	r5, [r4, #8]
 800689e:	f2c0 8095 	blt.w	80069cc <_printf_i+0x20c>
 80068a2:	6821      	ldr	r1, [r4, #0]
 80068a4:	f021 0104 	bic.w	r1, r1, #4
 80068a8:	6021      	str	r1, [r4, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d13d      	bne.n	800692a <_printf_i+0x16a>
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	f040 808e 	bne.w	80069d0 <_printf_i+0x210>
 80068b4:	4665      	mov	r5, ip
 80068b6:	2a08      	cmp	r2, #8
 80068b8:	d10b      	bne.n	80068d2 <_printf_i+0x112>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	07db      	lsls	r3, r3, #31
 80068be:	d508      	bpl.n	80068d2 <_printf_i+0x112>
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	6862      	ldr	r2, [r4, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	bfde      	ittt	le
 80068c8:	2330      	movle	r3, #48	; 0x30
 80068ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068d2:	ebac 0305 	sub.w	r3, ip, r5
 80068d6:	6123      	str	r3, [r4, #16]
 80068d8:	f8cd 8000 	str.w	r8, [sp]
 80068dc:	463b      	mov	r3, r7
 80068de:	aa03      	add	r2, sp, #12
 80068e0:	4621      	mov	r1, r4
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7ff fef6 	bl	80066d4 <_printf_common>
 80068e8:	3001      	adds	r0, #1
 80068ea:	d14d      	bne.n	8006988 <_printf_i+0x1c8>
 80068ec:	f04f 30ff 	mov.w	r0, #4294967295
 80068f0:	b005      	add	sp, #20
 80068f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068f6:	4839      	ldr	r0, [pc, #228]	; (80069dc <_printf_i+0x21c>)
 80068f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068fc:	6813      	ldr	r3, [r2, #0]
 80068fe:	6821      	ldr	r1, [r4, #0]
 8006900:	1d1d      	adds	r5, r3, #4
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6015      	str	r5, [r2, #0]
 8006906:	060a      	lsls	r2, r1, #24
 8006908:	d50b      	bpl.n	8006922 <_printf_i+0x162>
 800690a:	07ca      	lsls	r2, r1, #31
 800690c:	bf44      	itt	mi
 800690e:	f041 0120 	orrmi.w	r1, r1, #32
 8006912:	6021      	strmi	r1, [r4, #0]
 8006914:	b91b      	cbnz	r3, 800691e <_printf_i+0x15e>
 8006916:	6822      	ldr	r2, [r4, #0]
 8006918:	f022 0220 	bic.w	r2, r2, #32
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	2210      	movs	r2, #16
 8006920:	e7b7      	b.n	8006892 <_printf_i+0xd2>
 8006922:	064d      	lsls	r5, r1, #25
 8006924:	bf48      	it	mi
 8006926:	b29b      	uxthmi	r3, r3
 8006928:	e7ef      	b.n	800690a <_printf_i+0x14a>
 800692a:	4665      	mov	r5, ip
 800692c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006930:	fb02 3311 	mls	r3, r2, r1, r3
 8006934:	5cc3      	ldrb	r3, [r0, r3]
 8006936:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800693a:	460b      	mov	r3, r1
 800693c:	2900      	cmp	r1, #0
 800693e:	d1f5      	bne.n	800692c <_printf_i+0x16c>
 8006940:	e7b9      	b.n	80068b6 <_printf_i+0xf6>
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	6825      	ldr	r5, [r4, #0]
 8006946:	1d18      	adds	r0, r3, #4
 8006948:	6961      	ldr	r1, [r4, #20]
 800694a:	6010      	str	r0, [r2, #0]
 800694c:	0628      	lsls	r0, r5, #24
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	d501      	bpl.n	8006956 <_printf_i+0x196>
 8006952:	6019      	str	r1, [r3, #0]
 8006954:	e002      	b.n	800695c <_printf_i+0x19c>
 8006956:	066a      	lsls	r2, r5, #25
 8006958:	d5fb      	bpl.n	8006952 <_printf_i+0x192>
 800695a:	8019      	strh	r1, [r3, #0]
 800695c:	2300      	movs	r3, #0
 800695e:	4665      	mov	r5, ip
 8006960:	6123      	str	r3, [r4, #16]
 8006962:	e7b9      	b.n	80068d8 <_printf_i+0x118>
 8006964:	6813      	ldr	r3, [r2, #0]
 8006966:	1d19      	adds	r1, r3, #4
 8006968:	6011      	str	r1, [r2, #0]
 800696a:	681d      	ldr	r5, [r3, #0]
 800696c:	6862      	ldr	r2, [r4, #4]
 800696e:	2100      	movs	r1, #0
 8006970:	4628      	mov	r0, r5
 8006972:	f002 fb33 	bl	8008fdc <memchr>
 8006976:	b108      	cbz	r0, 800697c <_printf_i+0x1bc>
 8006978:	1b40      	subs	r0, r0, r5
 800697a:	6060      	str	r0, [r4, #4]
 800697c:	6863      	ldr	r3, [r4, #4]
 800697e:	6123      	str	r3, [r4, #16]
 8006980:	2300      	movs	r3, #0
 8006982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006986:	e7a7      	b.n	80068d8 <_printf_i+0x118>
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	462a      	mov	r2, r5
 800698c:	4639      	mov	r1, r7
 800698e:	4630      	mov	r0, r6
 8006990:	47c0      	blx	r8
 8006992:	3001      	adds	r0, #1
 8006994:	d0aa      	beq.n	80068ec <_printf_i+0x12c>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	079b      	lsls	r3, r3, #30
 800699a:	d413      	bmi.n	80069c4 <_printf_i+0x204>
 800699c:	68e0      	ldr	r0, [r4, #12]
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	4298      	cmp	r0, r3
 80069a2:	bfb8      	it	lt
 80069a4:	4618      	movlt	r0, r3
 80069a6:	e7a3      	b.n	80068f0 <_printf_i+0x130>
 80069a8:	2301      	movs	r3, #1
 80069aa:	464a      	mov	r2, r9
 80069ac:	4639      	mov	r1, r7
 80069ae:	4630      	mov	r0, r6
 80069b0:	47c0      	blx	r8
 80069b2:	3001      	adds	r0, #1
 80069b4:	d09a      	beq.n	80068ec <_printf_i+0x12c>
 80069b6:	3501      	adds	r5, #1
 80069b8:	68e3      	ldr	r3, [r4, #12]
 80069ba:	9a03      	ldr	r2, [sp, #12]
 80069bc:	1a9b      	subs	r3, r3, r2
 80069be:	42ab      	cmp	r3, r5
 80069c0:	dcf2      	bgt.n	80069a8 <_printf_i+0x1e8>
 80069c2:	e7eb      	b.n	800699c <_printf_i+0x1dc>
 80069c4:	2500      	movs	r5, #0
 80069c6:	f104 0919 	add.w	r9, r4, #25
 80069ca:	e7f5      	b.n	80069b8 <_printf_i+0x1f8>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1ac      	bne.n	800692a <_printf_i+0x16a>
 80069d0:	7803      	ldrb	r3, [r0, #0]
 80069d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069da:	e76c      	b.n	80068b6 <_printf_i+0xf6>
 80069dc:	0800b8f4 	.word	0x0800b8f4
 80069e0:	0800b905 	.word	0x0800b905

080069e4 <_scanf_float>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	469a      	mov	sl, r3
 80069ea:	688b      	ldr	r3, [r1, #8]
 80069ec:	4616      	mov	r6, r2
 80069ee:	1e5a      	subs	r2, r3, #1
 80069f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80069f4:	bf88      	it	hi
 80069f6:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80069fa:	b087      	sub	sp, #28
 80069fc:	bf85      	ittet	hi
 80069fe:	189b      	addhi	r3, r3, r2
 8006a00:	9301      	strhi	r3, [sp, #4]
 8006a02:	2300      	movls	r3, #0
 8006a04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a08:	4688      	mov	r8, r1
 8006a0a:	f04f 0b00 	mov.w	fp, #0
 8006a0e:	bf8c      	ite	hi
 8006a10:	608b      	strhi	r3, [r1, #8]
 8006a12:	9301      	strls	r3, [sp, #4]
 8006a14:	680b      	ldr	r3, [r1, #0]
 8006a16:	4607      	mov	r7, r0
 8006a18:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a1c:	f848 3b1c 	str.w	r3, [r8], #28
 8006a20:	460c      	mov	r4, r1
 8006a22:	4645      	mov	r5, r8
 8006a24:	465a      	mov	r2, fp
 8006a26:	46d9      	mov	r9, fp
 8006a28:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006a2c:	f8cd b008 	str.w	fp, [sp, #8]
 8006a30:	68a1      	ldr	r1, [r4, #8]
 8006a32:	b181      	cbz	r1, 8006a56 <_scanf_float+0x72>
 8006a34:	6833      	ldr	r3, [r6, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b49      	cmp	r3, #73	; 0x49
 8006a3a:	d071      	beq.n	8006b20 <_scanf_float+0x13c>
 8006a3c:	d84d      	bhi.n	8006ada <_scanf_float+0xf6>
 8006a3e:	2b39      	cmp	r3, #57	; 0x39
 8006a40:	d840      	bhi.n	8006ac4 <_scanf_float+0xe0>
 8006a42:	2b31      	cmp	r3, #49	; 0x31
 8006a44:	f080 8088 	bcs.w	8006b58 <_scanf_float+0x174>
 8006a48:	2b2d      	cmp	r3, #45	; 0x2d
 8006a4a:	f000 8090 	beq.w	8006b6e <_scanf_float+0x18a>
 8006a4e:	d815      	bhi.n	8006a7c <_scanf_float+0x98>
 8006a50:	2b2b      	cmp	r3, #43	; 0x2b
 8006a52:	f000 808c 	beq.w	8006b6e <_scanf_float+0x18a>
 8006a56:	f1b9 0f00 	cmp.w	r9, #0
 8006a5a:	d003      	beq.n	8006a64 <_scanf_float+0x80>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a62:	6023      	str	r3, [r4, #0]
 8006a64:	3a01      	subs	r2, #1
 8006a66:	2a01      	cmp	r2, #1
 8006a68:	f200 80ea 	bhi.w	8006c40 <_scanf_float+0x25c>
 8006a6c:	4545      	cmp	r5, r8
 8006a6e:	f200 80dc 	bhi.w	8006c2a <_scanf_float+0x246>
 8006a72:	2601      	movs	r6, #1
 8006a74:	4630      	mov	r0, r6
 8006a76:	b007      	add	sp, #28
 8006a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a7e:	f000 809f 	beq.w	8006bc0 <_scanf_float+0x1dc>
 8006a82:	2b30      	cmp	r3, #48	; 0x30
 8006a84:	d1e7      	bne.n	8006a56 <_scanf_float+0x72>
 8006a86:	6820      	ldr	r0, [r4, #0]
 8006a88:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006a8c:	d064      	beq.n	8006b58 <_scanf_float+0x174>
 8006a8e:	9b01      	ldr	r3, [sp, #4]
 8006a90:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006a94:	6020      	str	r0, [r4, #0]
 8006a96:	f109 0901 	add.w	r9, r9, #1
 8006a9a:	b11b      	cbz	r3, 8006aa4 <_scanf_float+0xc0>
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	3101      	adds	r1, #1
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	60a1      	str	r1, [r4, #8]
 8006aa4:	68a3      	ldr	r3, [r4, #8]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	60a3      	str	r3, [r4, #8]
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	3301      	adds	r3, #1
 8006aae:	6123      	str	r3, [r4, #16]
 8006ab0:	6873      	ldr	r3, [r6, #4]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	6073      	str	r3, [r6, #4]
 8006ab8:	f340 80ac 	ble.w	8006c14 <_scanf_float+0x230>
 8006abc:	6833      	ldr	r3, [r6, #0]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	6033      	str	r3, [r6, #0]
 8006ac2:	e7b5      	b.n	8006a30 <_scanf_float+0x4c>
 8006ac4:	2b45      	cmp	r3, #69	; 0x45
 8006ac6:	f000 8085 	beq.w	8006bd4 <_scanf_float+0x1f0>
 8006aca:	2b46      	cmp	r3, #70	; 0x46
 8006acc:	d06a      	beq.n	8006ba4 <_scanf_float+0x1c0>
 8006ace:	2b41      	cmp	r3, #65	; 0x41
 8006ad0:	d1c1      	bne.n	8006a56 <_scanf_float+0x72>
 8006ad2:	2a01      	cmp	r2, #1
 8006ad4:	d1bf      	bne.n	8006a56 <_scanf_float+0x72>
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	e046      	b.n	8006b68 <_scanf_float+0x184>
 8006ada:	2b65      	cmp	r3, #101	; 0x65
 8006adc:	d07a      	beq.n	8006bd4 <_scanf_float+0x1f0>
 8006ade:	d818      	bhi.n	8006b12 <_scanf_float+0x12e>
 8006ae0:	2b54      	cmp	r3, #84	; 0x54
 8006ae2:	d066      	beq.n	8006bb2 <_scanf_float+0x1ce>
 8006ae4:	d811      	bhi.n	8006b0a <_scanf_float+0x126>
 8006ae6:	2b4e      	cmp	r3, #78	; 0x4e
 8006ae8:	d1b5      	bne.n	8006a56 <_scanf_float+0x72>
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	d146      	bne.n	8006b7c <_scanf_float+0x198>
 8006aee:	f1b9 0f00 	cmp.w	r9, #0
 8006af2:	d145      	bne.n	8006b80 <_scanf_float+0x19c>
 8006af4:	6821      	ldr	r1, [r4, #0]
 8006af6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006afa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006afe:	d13f      	bne.n	8006b80 <_scanf_float+0x19c>
 8006b00:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006b04:	6021      	str	r1, [r4, #0]
 8006b06:	2201      	movs	r2, #1
 8006b08:	e02e      	b.n	8006b68 <_scanf_float+0x184>
 8006b0a:	2b59      	cmp	r3, #89	; 0x59
 8006b0c:	d01e      	beq.n	8006b4c <_scanf_float+0x168>
 8006b0e:	2b61      	cmp	r3, #97	; 0x61
 8006b10:	e7de      	b.n	8006ad0 <_scanf_float+0xec>
 8006b12:	2b6e      	cmp	r3, #110	; 0x6e
 8006b14:	d0e9      	beq.n	8006aea <_scanf_float+0x106>
 8006b16:	d815      	bhi.n	8006b44 <_scanf_float+0x160>
 8006b18:	2b66      	cmp	r3, #102	; 0x66
 8006b1a:	d043      	beq.n	8006ba4 <_scanf_float+0x1c0>
 8006b1c:	2b69      	cmp	r3, #105	; 0x69
 8006b1e:	d19a      	bne.n	8006a56 <_scanf_float+0x72>
 8006b20:	f1bb 0f00 	cmp.w	fp, #0
 8006b24:	d138      	bne.n	8006b98 <_scanf_float+0x1b4>
 8006b26:	f1b9 0f00 	cmp.w	r9, #0
 8006b2a:	d197      	bne.n	8006a5c <_scanf_float+0x78>
 8006b2c:	6821      	ldr	r1, [r4, #0]
 8006b2e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006b32:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006b36:	d195      	bne.n	8006a64 <_scanf_float+0x80>
 8006b38:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006b3c:	6021      	str	r1, [r4, #0]
 8006b3e:	f04f 0b01 	mov.w	fp, #1
 8006b42:	e011      	b.n	8006b68 <_scanf_float+0x184>
 8006b44:	2b74      	cmp	r3, #116	; 0x74
 8006b46:	d034      	beq.n	8006bb2 <_scanf_float+0x1ce>
 8006b48:	2b79      	cmp	r3, #121	; 0x79
 8006b4a:	d184      	bne.n	8006a56 <_scanf_float+0x72>
 8006b4c:	f1bb 0f07 	cmp.w	fp, #7
 8006b50:	d181      	bne.n	8006a56 <_scanf_float+0x72>
 8006b52:	f04f 0b08 	mov.w	fp, #8
 8006b56:	e007      	b.n	8006b68 <_scanf_float+0x184>
 8006b58:	eb12 0f0b 	cmn.w	r2, fp
 8006b5c:	f47f af7b 	bne.w	8006a56 <_scanf_float+0x72>
 8006b60:	6821      	ldr	r1, [r4, #0]
 8006b62:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006b66:	6021      	str	r1, [r4, #0]
 8006b68:	702b      	strb	r3, [r5, #0]
 8006b6a:	3501      	adds	r5, #1
 8006b6c:	e79a      	b.n	8006aa4 <_scanf_float+0xc0>
 8006b6e:	6821      	ldr	r1, [r4, #0]
 8006b70:	0608      	lsls	r0, r1, #24
 8006b72:	f57f af70 	bpl.w	8006a56 <_scanf_float+0x72>
 8006b76:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b7a:	e7f4      	b.n	8006b66 <_scanf_float+0x182>
 8006b7c:	2a02      	cmp	r2, #2
 8006b7e:	d047      	beq.n	8006c10 <_scanf_float+0x22c>
 8006b80:	f1bb 0f01 	cmp.w	fp, #1
 8006b84:	d003      	beq.n	8006b8e <_scanf_float+0x1aa>
 8006b86:	f1bb 0f04 	cmp.w	fp, #4
 8006b8a:	f47f af64 	bne.w	8006a56 <_scanf_float+0x72>
 8006b8e:	f10b 0b01 	add.w	fp, fp, #1
 8006b92:	fa5f fb8b 	uxtb.w	fp, fp
 8006b96:	e7e7      	b.n	8006b68 <_scanf_float+0x184>
 8006b98:	f1bb 0f03 	cmp.w	fp, #3
 8006b9c:	d0f7      	beq.n	8006b8e <_scanf_float+0x1aa>
 8006b9e:	f1bb 0f05 	cmp.w	fp, #5
 8006ba2:	e7f2      	b.n	8006b8a <_scanf_float+0x1a6>
 8006ba4:	f1bb 0f02 	cmp.w	fp, #2
 8006ba8:	f47f af55 	bne.w	8006a56 <_scanf_float+0x72>
 8006bac:	f04f 0b03 	mov.w	fp, #3
 8006bb0:	e7da      	b.n	8006b68 <_scanf_float+0x184>
 8006bb2:	f1bb 0f06 	cmp.w	fp, #6
 8006bb6:	f47f af4e 	bne.w	8006a56 <_scanf_float+0x72>
 8006bba:	f04f 0b07 	mov.w	fp, #7
 8006bbe:	e7d3      	b.n	8006b68 <_scanf_float+0x184>
 8006bc0:	6821      	ldr	r1, [r4, #0]
 8006bc2:	0588      	lsls	r0, r1, #22
 8006bc4:	f57f af47 	bpl.w	8006a56 <_scanf_float+0x72>
 8006bc8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006bcc:	6021      	str	r1, [r4, #0]
 8006bce:	f8cd 9008 	str.w	r9, [sp, #8]
 8006bd2:	e7c9      	b.n	8006b68 <_scanf_float+0x184>
 8006bd4:	6821      	ldr	r1, [r4, #0]
 8006bd6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006bda:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006bde:	d006      	beq.n	8006bee <_scanf_float+0x20a>
 8006be0:	0548      	lsls	r0, r1, #21
 8006be2:	f57f af38 	bpl.w	8006a56 <_scanf_float+0x72>
 8006be6:	f1b9 0f00 	cmp.w	r9, #0
 8006bea:	f43f af3b 	beq.w	8006a64 <_scanf_float+0x80>
 8006bee:	0588      	lsls	r0, r1, #22
 8006bf0:	bf58      	it	pl
 8006bf2:	9802      	ldrpl	r0, [sp, #8]
 8006bf4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006bf8:	bf58      	it	pl
 8006bfa:	eba9 0000 	subpl.w	r0, r9, r0
 8006bfe:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006c02:	bf58      	it	pl
 8006c04:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006c08:	6021      	str	r1, [r4, #0]
 8006c0a:	f04f 0900 	mov.w	r9, #0
 8006c0e:	e7ab      	b.n	8006b68 <_scanf_float+0x184>
 8006c10:	2203      	movs	r2, #3
 8006c12:	e7a9      	b.n	8006b68 <_scanf_float+0x184>
 8006c14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	9205      	str	r2, [sp, #20]
 8006c1e:	4798      	blx	r3
 8006c20:	9a05      	ldr	r2, [sp, #20]
 8006c22:	2800      	cmp	r0, #0
 8006c24:	f43f af04 	beq.w	8006a30 <_scanf_float+0x4c>
 8006c28:	e715      	b.n	8006a56 <_scanf_float+0x72>
 8006c2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c2e:	4632      	mov	r2, r6
 8006c30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006c34:	4638      	mov	r0, r7
 8006c36:	4798      	blx	r3
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	e715      	b.n	8006a6c <_scanf_float+0x88>
 8006c40:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006c44:	2b06      	cmp	r3, #6
 8006c46:	d80a      	bhi.n	8006c5e <_scanf_float+0x27a>
 8006c48:	f1bb 0f02 	cmp.w	fp, #2
 8006c4c:	d967      	bls.n	8006d1e <_scanf_float+0x33a>
 8006c4e:	f1ab 0b03 	sub.w	fp, fp, #3
 8006c52:	fa5f fb8b 	uxtb.w	fp, fp
 8006c56:	eba5 0b0b 	sub.w	fp, r5, fp
 8006c5a:	455d      	cmp	r5, fp
 8006c5c:	d14a      	bne.n	8006cf4 <_scanf_float+0x310>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	05da      	lsls	r2, r3, #23
 8006c62:	d51f      	bpl.n	8006ca4 <_scanf_float+0x2c0>
 8006c64:	055b      	lsls	r3, r3, #21
 8006c66:	d467      	bmi.n	8006d38 <_scanf_float+0x354>
 8006c68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	2965      	cmp	r1, #101	; 0x65
 8006c70:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c74:	f105 3bff 	add.w	fp, r5, #4294967295
 8006c78:	6123      	str	r3, [r4, #16]
 8006c7a:	d00d      	beq.n	8006c98 <_scanf_float+0x2b4>
 8006c7c:	2945      	cmp	r1, #69	; 0x45
 8006c7e:	d00b      	beq.n	8006c98 <_scanf_float+0x2b4>
 8006c80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c84:	4632      	mov	r2, r6
 8006c86:	4638      	mov	r0, r7
 8006c88:	4798      	blx	r3
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	f1a5 0b02 	sub.w	fp, r5, #2
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	4798      	blx	r3
 8006ca2:	465d      	mov	r5, fp
 8006ca4:	6826      	ldr	r6, [r4, #0]
 8006ca6:	f016 0610 	ands.w	r6, r6, #16
 8006caa:	d176      	bne.n	8006d9a <_scanf_float+0x3b6>
 8006cac:	702e      	strb	r6, [r5, #0]
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb8:	d141      	bne.n	8006d3e <_scanf_float+0x35a>
 8006cba:	9b02      	ldr	r3, [sp, #8]
 8006cbc:	eba9 0303 	sub.w	r3, r9, r3
 8006cc0:	425a      	negs	r2, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d148      	bne.n	8006d58 <_scanf_float+0x374>
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4638      	mov	r0, r7
 8006ccc:	f000 fed4 	bl	8007a78 <_strtod_r>
 8006cd0:	6825      	ldr	r5, [r4, #0]
 8006cd2:	4680      	mov	r8, r0
 8006cd4:	f015 0f02 	tst.w	r5, #2
 8006cd8:	4689      	mov	r9, r1
 8006cda:	f8da 3000 	ldr.w	r3, [sl]
 8006cde:	d046      	beq.n	8006d6e <_scanf_float+0x38a>
 8006ce0:	1d1a      	adds	r2, r3, #4
 8006ce2:	f8ca 2000 	str.w	r2, [sl]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	e9c3 8900 	strd	r8, r9, [r3]
 8006cec:	68e3      	ldr	r3, [r4, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60e3      	str	r3, [r4, #12]
 8006cf2:	e6bf      	b.n	8006a74 <_scanf_float+0x90>
 8006cf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006cfe:	4638      	mov	r0, r7
 8006d00:	4798      	blx	r3
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	6123      	str	r3, [r4, #16]
 8006d08:	e7a7      	b.n	8006c5a <_scanf_float+0x276>
 8006d0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d0e:	4632      	mov	r2, r6
 8006d10:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006d14:	4638      	mov	r0, r7
 8006d16:	4798      	blx	r3
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	4545      	cmp	r5, r8
 8006d20:	d8f3      	bhi.n	8006d0a <_scanf_float+0x326>
 8006d22:	e6a6      	b.n	8006a72 <_scanf_float+0x8e>
 8006d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d28:	4632      	mov	r2, r6
 8006d2a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006d2e:	4638      	mov	r0, r7
 8006d30:	4798      	blx	r3
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	6123      	str	r3, [r4, #16]
 8006d38:	4545      	cmp	r5, r8
 8006d3a:	d8f3      	bhi.n	8006d24 <_scanf_float+0x340>
 8006d3c:	e699      	b.n	8006a72 <_scanf_float+0x8e>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0c0      	beq.n	8006cc6 <_scanf_float+0x2e2>
 8006d44:	9904      	ldr	r1, [sp, #16]
 8006d46:	230a      	movs	r3, #10
 8006d48:	4632      	mov	r2, r6
 8006d4a:	3101      	adds	r1, #1
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	f000 ff85 	bl	8007c5c <_strtol_r>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	9d04      	ldr	r5, [sp, #16]
 8006d56:	1ac2      	subs	r2, r0, r3
 8006d58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d5c:	429d      	cmp	r5, r3
 8006d5e:	bf28      	it	cs
 8006d60:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006d64:	490e      	ldr	r1, [pc, #56]	; (8006da0 <_scanf_float+0x3bc>)
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 f820 	bl	8006dac <siprintf>
 8006d6c:	e7ab      	b.n	8006cc6 <_scanf_float+0x2e2>
 8006d6e:	1d1f      	adds	r7, r3, #4
 8006d70:	f015 0504 	ands.w	r5, r5, #4
 8006d74:	f8ca 7000 	str.w	r7, [sl]
 8006d78:	d1b5      	bne.n	8006ce6 <_scanf_float+0x302>
 8006d7a:	681f      	ldr	r7, [r3, #0]
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	f7f9 fe44 	bl	8000a0c <__aeabi_dcmpun>
 8006d84:	b120      	cbz	r0, 8006d90 <_scanf_float+0x3ac>
 8006d86:	4628      	mov	r0, r5
 8006d88:	f000 f80c 	bl	8006da4 <nanf>
 8006d8c:	6038      	str	r0, [r7, #0]
 8006d8e:	e7ad      	b.n	8006cec <_scanf_float+0x308>
 8006d90:	4640      	mov	r0, r8
 8006d92:	4649      	mov	r1, r9
 8006d94:	f7f9 fe98 	bl	8000ac8 <__aeabi_d2f>
 8006d98:	e7f8      	b.n	8006d8c <_scanf_float+0x3a8>
 8006d9a:	2600      	movs	r6, #0
 8006d9c:	e66a      	b.n	8006a74 <_scanf_float+0x90>
 8006d9e:	bf00      	nop
 8006da0:	0800b916 	.word	0x0800b916

08006da4 <nanf>:
 8006da4:	4800      	ldr	r0, [pc, #0]	; (8006da8 <nanf+0x4>)
 8006da6:	4770      	bx	lr
 8006da8:	7fc00000 	.word	0x7fc00000

08006dac <siprintf>:
 8006dac:	b40e      	push	{r1, r2, r3}
 8006dae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006db2:	b500      	push	{lr}
 8006db4:	b09c      	sub	sp, #112	; 0x70
 8006db6:	ab1d      	add	r3, sp, #116	; 0x74
 8006db8:	9002      	str	r0, [sp, #8]
 8006dba:	9006      	str	r0, [sp, #24]
 8006dbc:	9107      	str	r1, [sp, #28]
 8006dbe:	9104      	str	r1, [sp, #16]
 8006dc0:	4808      	ldr	r0, [pc, #32]	; (8006de4 <siprintf+0x38>)
 8006dc2:	4909      	ldr	r1, [pc, #36]	; (8006de8 <siprintf+0x3c>)
 8006dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc8:	9105      	str	r1, [sp, #20]
 8006dca:	6800      	ldr	r0, [r0, #0]
 8006dcc:	a902      	add	r1, sp, #8
 8006dce:	9301      	str	r3, [sp, #4]
 8006dd0:	f002 fe24 	bl	8009a1c <_svfiprintf_r>
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	9b02      	ldr	r3, [sp, #8]
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	b01c      	add	sp, #112	; 0x70
 8006ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006de0:	b003      	add	sp, #12
 8006de2:	4770      	bx	lr
 8006de4:	200001a0 	.word	0x200001a0
 8006de8:	ffff0208 	.word	0xffff0208

08006dec <strcpy>:
 8006dec:	4603      	mov	r3, r0
 8006dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006df2:	f803 2b01 	strb.w	r2, [r3], #1
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	d1f9      	bne.n	8006dee <strcpy+0x2>
 8006dfa:	4770      	bx	lr

08006dfc <strstr>:
 8006dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfe:	7803      	ldrb	r3, [r0, #0]
 8006e00:	b17b      	cbz	r3, 8006e22 <strstr+0x26>
 8006e02:	4604      	mov	r4, r0
 8006e04:	7823      	ldrb	r3, [r4, #0]
 8006e06:	4620      	mov	r0, r4
 8006e08:	1c66      	adds	r6, r4, #1
 8006e0a:	b17b      	cbz	r3, 8006e2c <strstr+0x30>
 8006e0c:	1e4a      	subs	r2, r1, #1
 8006e0e:	1e63      	subs	r3, r4, #1
 8006e10:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006e14:	b14d      	cbz	r5, 8006e2a <strstr+0x2e>
 8006e16:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006e1a:	4634      	mov	r4, r6
 8006e1c:	42af      	cmp	r7, r5
 8006e1e:	d0f7      	beq.n	8006e10 <strstr+0x14>
 8006e20:	e7f0      	b.n	8006e04 <strstr+0x8>
 8006e22:	780b      	ldrb	r3, [r1, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf18      	it	ne
 8006e28:	2000      	movne	r0, #0
 8006e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	e7fc      	b.n	8006e2a <strstr+0x2e>

08006e30 <sulp>:
 8006e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e34:	460f      	mov	r7, r1
 8006e36:	4690      	mov	r8, r2
 8006e38:	f002 fbb4 	bl	80095a4 <__ulp>
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	460d      	mov	r5, r1
 8006e40:	f1b8 0f00 	cmp.w	r8, #0
 8006e44:	d011      	beq.n	8006e6a <sulp+0x3a>
 8006e46:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006e4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	dd0b      	ble.n	8006e6a <sulp+0x3a>
 8006e52:	2400      	movs	r4, #0
 8006e54:	051b      	lsls	r3, r3, #20
 8006e56:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e5a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e5e:	4622      	mov	r2, r4
 8006e60:	462b      	mov	r3, r5
 8006e62:	f7f9 fb39 	bl	80004d8 <__aeabi_dmul>
 8006e66:	4604      	mov	r4, r0
 8006e68:	460d      	mov	r5, r1
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e72:	0000      	movs	r0, r0
 8006e74:	0000      	movs	r0, r0
	...

08006e78 <_strtod_l>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	461f      	mov	r7, r3
 8006e7e:	2300      	movs	r3, #0
 8006e80:	b0a1      	sub	sp, #132	; 0x84
 8006e82:	4683      	mov	fp, r0
 8006e84:	4638      	mov	r0, r7
 8006e86:	460e      	mov	r6, r1
 8006e88:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e8a:	931c      	str	r3, [sp, #112]	; 0x70
 8006e8c:	f002 f87b 	bl	8008f86 <__localeconv_l>
 8006e90:	4680      	mov	r8, r0
 8006e92:	6800      	ldr	r0, [r0, #0]
 8006e94:	f7f9 f95c 	bl	8000150 <strlen>
 8006e98:	f04f 0900 	mov.w	r9, #0
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	f04f 0a00 	mov.w	sl, #0
 8006ea2:	961b      	str	r6, [sp, #108]	; 0x6c
 8006ea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ea6:	781a      	ldrb	r2, [r3, #0]
 8006ea8:	2a0d      	cmp	r2, #13
 8006eaa:	d832      	bhi.n	8006f12 <_strtod_l+0x9a>
 8006eac:	2a09      	cmp	r2, #9
 8006eae:	d236      	bcs.n	8006f1e <_strtod_l+0xa6>
 8006eb0:	2a00      	cmp	r2, #0
 8006eb2:	d03e      	beq.n	8006f32 <_strtod_l+0xba>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8006eb8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006eba:	782b      	ldrb	r3, [r5, #0]
 8006ebc:	2b30      	cmp	r3, #48	; 0x30
 8006ebe:	f040 80ac 	bne.w	800701a <_strtod_l+0x1a2>
 8006ec2:	786b      	ldrb	r3, [r5, #1]
 8006ec4:	2b58      	cmp	r3, #88	; 0x58
 8006ec6:	d001      	beq.n	8006ecc <_strtod_l+0x54>
 8006ec8:	2b78      	cmp	r3, #120	; 0x78
 8006eca:	d167      	bne.n	8006f9c <_strtod_l+0x124>
 8006ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ece:	9702      	str	r7, [sp, #8]
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	ab1c      	add	r3, sp, #112	; 0x70
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	4a89      	ldr	r2, [pc, #548]	; (80070fc <_strtod_l+0x284>)
 8006ed8:	ab1d      	add	r3, sp, #116	; 0x74
 8006eda:	a91b      	add	r1, sp, #108	; 0x6c
 8006edc:	4658      	mov	r0, fp
 8006ede:	f001 fd77 	bl	80089d0 <__gethex>
 8006ee2:	f010 0407 	ands.w	r4, r0, #7
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	d005      	beq.n	8006ef6 <_strtod_l+0x7e>
 8006eea:	2c06      	cmp	r4, #6
 8006eec:	d12b      	bne.n	8006f46 <_strtod_l+0xce>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	951b      	str	r5, [sp, #108]	; 0x6c
 8006ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8006ef6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f040 85a6 	bne.w	8007a4a <_strtod_l+0xbd2>
 8006efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f00:	b1e3      	cbz	r3, 8006f3c <_strtod_l+0xc4>
 8006f02:	464a      	mov	r2, r9
 8006f04:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	b021      	add	sp, #132	; 0x84
 8006f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f12:	2a2b      	cmp	r2, #43	; 0x2b
 8006f14:	d015      	beq.n	8006f42 <_strtod_l+0xca>
 8006f16:	2a2d      	cmp	r2, #45	; 0x2d
 8006f18:	d004      	beq.n	8006f24 <_strtod_l+0xac>
 8006f1a:	2a20      	cmp	r2, #32
 8006f1c:	d1ca      	bne.n	8006eb4 <_strtod_l+0x3c>
 8006f1e:	3301      	adds	r3, #1
 8006f20:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f22:	e7bf      	b.n	8006ea4 <_strtod_l+0x2c>
 8006f24:	2201      	movs	r2, #1
 8006f26:	920d      	str	r2, [sp, #52]	; 0x34
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1c2      	bne.n	8006eb8 <_strtod_l+0x40>
 8006f32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f34:	961b      	str	r6, [sp, #108]	; 0x6c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f040 8585 	bne.w	8007a46 <_strtod_l+0xbce>
 8006f3c:	464a      	mov	r2, r9
 8006f3e:	4653      	mov	r3, sl
 8006f40:	e7e2      	b.n	8006f08 <_strtod_l+0x90>
 8006f42:	2200      	movs	r2, #0
 8006f44:	e7ef      	b.n	8006f26 <_strtod_l+0xae>
 8006f46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f48:	b13a      	cbz	r2, 8006f5a <_strtod_l+0xe2>
 8006f4a:	2135      	movs	r1, #53	; 0x35
 8006f4c:	a81e      	add	r0, sp, #120	; 0x78
 8006f4e:	f002 fc1c 	bl	800978a <__copybits>
 8006f52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f54:	4658      	mov	r0, fp
 8006f56:	f002 f88e 	bl	8009076 <_Bfree>
 8006f5a:	3c01      	subs	r4, #1
 8006f5c:	2c04      	cmp	r4, #4
 8006f5e:	d806      	bhi.n	8006f6e <_strtod_l+0xf6>
 8006f60:	e8df f004 	tbb	[pc, r4]
 8006f64:	1714030a 	.word	0x1714030a
 8006f68:	0a          	.byte	0x0a
 8006f69:	00          	.byte	0x00
 8006f6a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8006f6e:	0731      	lsls	r1, r6, #28
 8006f70:	d5c1      	bpl.n	8006ef6 <_strtod_l+0x7e>
 8006f72:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006f76:	e7be      	b.n	8006ef6 <_strtod_l+0x7e>
 8006f78:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006f7a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8006f7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f86:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8006f8a:	e7f0      	b.n	8006f6e <_strtod_l+0xf6>
 8006f8c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007100 <_strtod_l+0x288>
 8006f90:	e7ed      	b.n	8006f6e <_strtod_l+0xf6>
 8006f92:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006f96:	f04f 39ff 	mov.w	r9, #4294967295
 8006f9a:	e7e8      	b.n	8006f6e <_strtod_l+0xf6>
 8006f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	921b      	str	r2, [sp, #108]	; 0x6c
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b30      	cmp	r3, #48	; 0x30
 8006fa6:	d0f9      	beq.n	8006f9c <_strtod_l+0x124>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0a4      	beq.n	8006ef6 <_strtod_l+0x7e>
 8006fac:	2301      	movs	r3, #1
 8006fae:	2500      	movs	r5, #0
 8006fb0:	220a      	movs	r2, #10
 8006fb2:	9307      	str	r3, [sp, #28]
 8006fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fb6:	9506      	str	r5, [sp, #24]
 8006fb8:	9308      	str	r3, [sp, #32]
 8006fba:	9504      	str	r5, [sp, #16]
 8006fbc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006fbe:	7807      	ldrb	r7, [r0, #0]
 8006fc0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006fc4:	b2d9      	uxtb	r1, r3
 8006fc6:	2909      	cmp	r1, #9
 8006fc8:	d929      	bls.n	800701e <_strtod_l+0x1a6>
 8006fca:	4622      	mov	r2, r4
 8006fcc:	f8d8 1000 	ldr.w	r1, [r8]
 8006fd0:	f002 fe2c 	bl	8009c2c <strncmp>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d031      	beq.n	800703c <_strtod_l+0x1c4>
 8006fd8:	2000      	movs	r0, #0
 8006fda:	463b      	mov	r3, r7
 8006fdc:	4602      	mov	r2, r0
 8006fde:	9c04      	ldr	r4, [sp, #16]
 8006fe0:	9005      	str	r0, [sp, #20]
 8006fe2:	2b65      	cmp	r3, #101	; 0x65
 8006fe4:	d001      	beq.n	8006fea <_strtod_l+0x172>
 8006fe6:	2b45      	cmp	r3, #69	; 0x45
 8006fe8:	d114      	bne.n	8007014 <_strtod_l+0x19c>
 8006fea:	b924      	cbnz	r4, 8006ff6 <_strtod_l+0x17e>
 8006fec:	b910      	cbnz	r0, 8006ff4 <_strtod_l+0x17c>
 8006fee:	9b07      	ldr	r3, [sp, #28]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d09e      	beq.n	8006f32 <_strtod_l+0xba>
 8006ff4:	2400      	movs	r4, #0
 8006ff6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006ff8:	1c73      	adds	r3, r6, #1
 8006ffa:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ffc:	7873      	ldrb	r3, [r6, #1]
 8006ffe:	2b2b      	cmp	r3, #43	; 0x2b
 8007000:	d078      	beq.n	80070f4 <_strtod_l+0x27c>
 8007002:	2b2d      	cmp	r3, #45	; 0x2d
 8007004:	d070      	beq.n	80070e8 <_strtod_l+0x270>
 8007006:	f04f 0c00 	mov.w	ip, #0
 800700a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800700e:	2f09      	cmp	r7, #9
 8007010:	d97c      	bls.n	800710c <_strtod_l+0x294>
 8007012:	961b      	str	r6, [sp, #108]	; 0x6c
 8007014:	f04f 0e00 	mov.w	lr, #0
 8007018:	e09a      	b.n	8007150 <_strtod_l+0x2d8>
 800701a:	2300      	movs	r3, #0
 800701c:	e7c7      	b.n	8006fae <_strtod_l+0x136>
 800701e:	9904      	ldr	r1, [sp, #16]
 8007020:	3001      	adds	r0, #1
 8007022:	2908      	cmp	r1, #8
 8007024:	bfd7      	itett	le
 8007026:	9906      	ldrle	r1, [sp, #24]
 8007028:	fb02 3505 	mlagt	r5, r2, r5, r3
 800702c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007030:	9306      	strle	r3, [sp, #24]
 8007032:	9b04      	ldr	r3, [sp, #16]
 8007034:	901b      	str	r0, [sp, #108]	; 0x6c
 8007036:	3301      	adds	r3, #1
 8007038:	9304      	str	r3, [sp, #16]
 800703a:	e7bf      	b.n	8006fbc <_strtod_l+0x144>
 800703c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800703e:	191a      	adds	r2, r3, r4
 8007040:	921b      	str	r2, [sp, #108]	; 0x6c
 8007042:	9a04      	ldr	r2, [sp, #16]
 8007044:	5d1b      	ldrb	r3, [r3, r4]
 8007046:	2a00      	cmp	r2, #0
 8007048:	d037      	beq.n	80070ba <_strtod_l+0x242>
 800704a:	4602      	mov	r2, r0
 800704c:	9c04      	ldr	r4, [sp, #16]
 800704e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007052:	2909      	cmp	r1, #9
 8007054:	d913      	bls.n	800707e <_strtod_l+0x206>
 8007056:	2101      	movs	r1, #1
 8007058:	9105      	str	r1, [sp, #20]
 800705a:	e7c2      	b.n	8006fe2 <_strtod_l+0x16a>
 800705c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800705e:	3001      	adds	r0, #1
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	921b      	str	r2, [sp, #108]	; 0x6c
 8007064:	785b      	ldrb	r3, [r3, #1]
 8007066:	2b30      	cmp	r3, #48	; 0x30
 8007068:	d0f8      	beq.n	800705c <_strtod_l+0x1e4>
 800706a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800706e:	2a08      	cmp	r2, #8
 8007070:	f200 84f0 	bhi.w	8007a54 <_strtod_l+0xbdc>
 8007074:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007076:	9208      	str	r2, [sp, #32]
 8007078:	4602      	mov	r2, r0
 800707a:	2000      	movs	r0, #0
 800707c:	4604      	mov	r4, r0
 800707e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007082:	f100 0101 	add.w	r1, r0, #1
 8007086:	d012      	beq.n	80070ae <_strtod_l+0x236>
 8007088:	440a      	add	r2, r1
 800708a:	270a      	movs	r7, #10
 800708c:	4621      	mov	r1, r4
 800708e:	eb00 0c04 	add.w	ip, r0, r4
 8007092:	458c      	cmp	ip, r1
 8007094:	d113      	bne.n	80070be <_strtod_l+0x246>
 8007096:	1821      	adds	r1, r4, r0
 8007098:	2908      	cmp	r1, #8
 800709a:	f104 0401 	add.w	r4, r4, #1
 800709e:	4404      	add	r4, r0
 80070a0:	dc19      	bgt.n	80070d6 <_strtod_l+0x25e>
 80070a2:	210a      	movs	r1, #10
 80070a4:	9b06      	ldr	r3, [sp, #24]
 80070a6:	fb01 e303 	mla	r3, r1, r3, lr
 80070aa:	9306      	str	r3, [sp, #24]
 80070ac:	2100      	movs	r1, #0
 80070ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070b0:	1c58      	adds	r0, r3, #1
 80070b2:	901b      	str	r0, [sp, #108]	; 0x6c
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	4608      	mov	r0, r1
 80070b8:	e7c9      	b.n	800704e <_strtod_l+0x1d6>
 80070ba:	9804      	ldr	r0, [sp, #16]
 80070bc:	e7d3      	b.n	8007066 <_strtod_l+0x1ee>
 80070be:	2908      	cmp	r1, #8
 80070c0:	f101 0101 	add.w	r1, r1, #1
 80070c4:	dc03      	bgt.n	80070ce <_strtod_l+0x256>
 80070c6:	9b06      	ldr	r3, [sp, #24]
 80070c8:	437b      	muls	r3, r7
 80070ca:	9306      	str	r3, [sp, #24]
 80070cc:	e7e1      	b.n	8007092 <_strtod_l+0x21a>
 80070ce:	2910      	cmp	r1, #16
 80070d0:	bfd8      	it	le
 80070d2:	437d      	mulle	r5, r7
 80070d4:	e7dd      	b.n	8007092 <_strtod_l+0x21a>
 80070d6:	2c10      	cmp	r4, #16
 80070d8:	bfdc      	itt	le
 80070da:	210a      	movle	r1, #10
 80070dc:	fb01 e505 	mlale	r5, r1, r5, lr
 80070e0:	e7e4      	b.n	80070ac <_strtod_l+0x234>
 80070e2:	2301      	movs	r3, #1
 80070e4:	9305      	str	r3, [sp, #20]
 80070e6:	e781      	b.n	8006fec <_strtod_l+0x174>
 80070e8:	f04f 0c01 	mov.w	ip, #1
 80070ec:	1cb3      	adds	r3, r6, #2
 80070ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80070f0:	78b3      	ldrb	r3, [r6, #2]
 80070f2:	e78a      	b.n	800700a <_strtod_l+0x192>
 80070f4:	f04f 0c00 	mov.w	ip, #0
 80070f8:	e7f8      	b.n	80070ec <_strtod_l+0x274>
 80070fa:	bf00      	nop
 80070fc:	0800b91c 	.word	0x0800b91c
 8007100:	7ff00000 	.word	0x7ff00000
 8007104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007106:	1c5f      	adds	r7, r3, #1
 8007108:	971b      	str	r7, [sp, #108]	; 0x6c
 800710a:	785b      	ldrb	r3, [r3, #1]
 800710c:	2b30      	cmp	r3, #48	; 0x30
 800710e:	d0f9      	beq.n	8007104 <_strtod_l+0x28c>
 8007110:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007114:	2f08      	cmp	r7, #8
 8007116:	f63f af7d 	bhi.w	8007014 <_strtod_l+0x19c>
 800711a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800711e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007120:	9309      	str	r3, [sp, #36]	; 0x24
 8007122:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007124:	1c5f      	adds	r7, r3, #1
 8007126:	971b      	str	r7, [sp, #108]	; 0x6c
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800712e:	f1b8 0f09 	cmp.w	r8, #9
 8007132:	d937      	bls.n	80071a4 <_strtod_l+0x32c>
 8007134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007136:	1a7f      	subs	r7, r7, r1
 8007138:	2f08      	cmp	r7, #8
 800713a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800713e:	dc37      	bgt.n	80071b0 <_strtod_l+0x338>
 8007140:	45be      	cmp	lr, r7
 8007142:	bfa8      	it	ge
 8007144:	46be      	movge	lr, r7
 8007146:	f1bc 0f00 	cmp.w	ip, #0
 800714a:	d001      	beq.n	8007150 <_strtod_l+0x2d8>
 800714c:	f1ce 0e00 	rsb	lr, lr, #0
 8007150:	2c00      	cmp	r4, #0
 8007152:	d151      	bne.n	80071f8 <_strtod_l+0x380>
 8007154:	2800      	cmp	r0, #0
 8007156:	f47f aece 	bne.w	8006ef6 <_strtod_l+0x7e>
 800715a:	9a07      	ldr	r2, [sp, #28]
 800715c:	2a00      	cmp	r2, #0
 800715e:	f47f aeca 	bne.w	8006ef6 <_strtod_l+0x7e>
 8007162:	9a05      	ldr	r2, [sp, #20]
 8007164:	2a00      	cmp	r2, #0
 8007166:	f47f aee4 	bne.w	8006f32 <_strtod_l+0xba>
 800716a:	2b4e      	cmp	r3, #78	; 0x4e
 800716c:	d027      	beq.n	80071be <_strtod_l+0x346>
 800716e:	dc21      	bgt.n	80071b4 <_strtod_l+0x33c>
 8007170:	2b49      	cmp	r3, #73	; 0x49
 8007172:	f47f aede 	bne.w	8006f32 <_strtod_l+0xba>
 8007176:	49a4      	ldr	r1, [pc, #656]	; (8007408 <_strtod_l+0x590>)
 8007178:	a81b      	add	r0, sp, #108	; 0x6c
 800717a:	f001 fe5d 	bl	8008e38 <__match>
 800717e:	2800      	cmp	r0, #0
 8007180:	f43f aed7 	beq.w	8006f32 <_strtod_l+0xba>
 8007184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007186:	49a1      	ldr	r1, [pc, #644]	; (800740c <_strtod_l+0x594>)
 8007188:	3b01      	subs	r3, #1
 800718a:	a81b      	add	r0, sp, #108	; 0x6c
 800718c:	931b      	str	r3, [sp, #108]	; 0x6c
 800718e:	f001 fe53 	bl	8008e38 <__match>
 8007192:	b910      	cbnz	r0, 800719a <_strtod_l+0x322>
 8007194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007196:	3301      	adds	r3, #1
 8007198:	931b      	str	r3, [sp, #108]	; 0x6c
 800719a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007420 <_strtod_l+0x5a8>
 800719e:	f04f 0900 	mov.w	r9, #0
 80071a2:	e6a8      	b.n	8006ef6 <_strtod_l+0x7e>
 80071a4:	210a      	movs	r1, #10
 80071a6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80071aa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80071ae:	e7b8      	b.n	8007122 <_strtod_l+0x2aa>
 80071b0:	46be      	mov	lr, r7
 80071b2:	e7c8      	b.n	8007146 <_strtod_l+0x2ce>
 80071b4:	2b69      	cmp	r3, #105	; 0x69
 80071b6:	d0de      	beq.n	8007176 <_strtod_l+0x2fe>
 80071b8:	2b6e      	cmp	r3, #110	; 0x6e
 80071ba:	f47f aeba 	bne.w	8006f32 <_strtod_l+0xba>
 80071be:	4994      	ldr	r1, [pc, #592]	; (8007410 <_strtod_l+0x598>)
 80071c0:	a81b      	add	r0, sp, #108	; 0x6c
 80071c2:	f001 fe39 	bl	8008e38 <__match>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f43f aeb3 	beq.w	8006f32 <_strtod_l+0xba>
 80071cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b28      	cmp	r3, #40	; 0x28
 80071d2:	d10e      	bne.n	80071f2 <_strtod_l+0x37a>
 80071d4:	aa1e      	add	r2, sp, #120	; 0x78
 80071d6:	498f      	ldr	r1, [pc, #572]	; (8007414 <_strtod_l+0x59c>)
 80071d8:	a81b      	add	r0, sp, #108	; 0x6c
 80071da:	f001 fe41 	bl	8008e60 <__hexnan>
 80071de:	2805      	cmp	r0, #5
 80071e0:	d107      	bne.n	80071f2 <_strtod_l+0x37a>
 80071e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071e4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80071e8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80071ec:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80071f0:	e681      	b.n	8006ef6 <_strtod_l+0x7e>
 80071f2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007428 <_strtod_l+0x5b0>
 80071f6:	e7d2      	b.n	800719e <_strtod_l+0x326>
 80071f8:	ebae 0302 	sub.w	r3, lr, r2
 80071fc:	9307      	str	r3, [sp, #28]
 80071fe:	9b04      	ldr	r3, [sp, #16]
 8007200:	9806      	ldr	r0, [sp, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	bf08      	it	eq
 8007206:	4623      	moveq	r3, r4
 8007208:	2c10      	cmp	r4, #16
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	46a0      	mov	r8, r4
 800720e:	bfa8      	it	ge
 8007210:	f04f 0810 	movge.w	r8, #16
 8007214:	f7f9 f8e6 	bl	80003e4 <__aeabi_ui2d>
 8007218:	2c09      	cmp	r4, #9
 800721a:	4681      	mov	r9, r0
 800721c:	468a      	mov	sl, r1
 800721e:	dc13      	bgt.n	8007248 <_strtod_l+0x3d0>
 8007220:	9b07      	ldr	r3, [sp, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f43f ae67 	beq.w	8006ef6 <_strtod_l+0x7e>
 8007228:	9b07      	ldr	r3, [sp, #28]
 800722a:	dd7e      	ble.n	800732a <_strtod_l+0x4b2>
 800722c:	2b16      	cmp	r3, #22
 800722e:	dc65      	bgt.n	80072fc <_strtod_l+0x484>
 8007230:	4a79      	ldr	r2, [pc, #484]	; (8007418 <_strtod_l+0x5a0>)
 8007232:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007236:	464a      	mov	r2, r9
 8007238:	e9de 0100 	ldrd	r0, r1, [lr]
 800723c:	4653      	mov	r3, sl
 800723e:	f7f9 f94b 	bl	80004d8 <__aeabi_dmul>
 8007242:	4681      	mov	r9, r0
 8007244:	468a      	mov	sl, r1
 8007246:	e656      	b.n	8006ef6 <_strtod_l+0x7e>
 8007248:	4b73      	ldr	r3, [pc, #460]	; (8007418 <_strtod_l+0x5a0>)
 800724a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800724e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007252:	f7f9 f941 	bl	80004d8 <__aeabi_dmul>
 8007256:	4606      	mov	r6, r0
 8007258:	4628      	mov	r0, r5
 800725a:	460f      	mov	r7, r1
 800725c:	f7f9 f8c2 	bl	80003e4 <__aeabi_ui2d>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4630      	mov	r0, r6
 8007266:	4639      	mov	r1, r7
 8007268:	f7f8 ff80 	bl	800016c <__adddf3>
 800726c:	2c0f      	cmp	r4, #15
 800726e:	4681      	mov	r9, r0
 8007270:	468a      	mov	sl, r1
 8007272:	ddd5      	ble.n	8007220 <_strtod_l+0x3a8>
 8007274:	9b07      	ldr	r3, [sp, #28]
 8007276:	eba4 0808 	sub.w	r8, r4, r8
 800727a:	4498      	add	r8, r3
 800727c:	f1b8 0f00 	cmp.w	r8, #0
 8007280:	f340 809a 	ble.w	80073b8 <_strtod_l+0x540>
 8007284:	f018 030f 	ands.w	r3, r8, #15
 8007288:	d00a      	beq.n	80072a0 <_strtod_l+0x428>
 800728a:	4963      	ldr	r1, [pc, #396]	; (8007418 <_strtod_l+0x5a0>)
 800728c:	464a      	mov	r2, r9
 800728e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007292:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007296:	4653      	mov	r3, sl
 8007298:	f7f9 f91e 	bl	80004d8 <__aeabi_dmul>
 800729c:	4681      	mov	r9, r0
 800729e:	468a      	mov	sl, r1
 80072a0:	f038 080f 	bics.w	r8, r8, #15
 80072a4:	d077      	beq.n	8007396 <_strtod_l+0x51e>
 80072a6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80072aa:	dd4b      	ble.n	8007344 <_strtod_l+0x4cc>
 80072ac:	f04f 0800 	mov.w	r8, #0
 80072b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80072b4:	f8cd 8020 	str.w	r8, [sp, #32]
 80072b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80072bc:	2322      	movs	r3, #34	; 0x22
 80072be:	f04f 0900 	mov.w	r9, #0
 80072c2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007420 <_strtod_l+0x5a8>
 80072c6:	f8cb 3000 	str.w	r3, [fp]
 80072ca:	9b08      	ldr	r3, [sp, #32]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f43f ae12 	beq.w	8006ef6 <_strtod_l+0x7e>
 80072d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80072d4:	4658      	mov	r0, fp
 80072d6:	f001 fece 	bl	8009076 <_Bfree>
 80072da:	9906      	ldr	r1, [sp, #24]
 80072dc:	4658      	mov	r0, fp
 80072de:	f001 feca 	bl	8009076 <_Bfree>
 80072e2:	9904      	ldr	r1, [sp, #16]
 80072e4:	4658      	mov	r0, fp
 80072e6:	f001 fec6 	bl	8009076 <_Bfree>
 80072ea:	9908      	ldr	r1, [sp, #32]
 80072ec:	4658      	mov	r0, fp
 80072ee:	f001 fec2 	bl	8009076 <_Bfree>
 80072f2:	4641      	mov	r1, r8
 80072f4:	4658      	mov	r0, fp
 80072f6:	f001 febe 	bl	8009076 <_Bfree>
 80072fa:	e5fc      	b.n	8006ef6 <_strtod_l+0x7e>
 80072fc:	9a07      	ldr	r2, [sp, #28]
 80072fe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007302:	4293      	cmp	r3, r2
 8007304:	dbb6      	blt.n	8007274 <_strtod_l+0x3fc>
 8007306:	4d44      	ldr	r5, [pc, #272]	; (8007418 <_strtod_l+0x5a0>)
 8007308:	f1c4 040f 	rsb	r4, r4, #15
 800730c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007310:	464a      	mov	r2, r9
 8007312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007316:	4653      	mov	r3, sl
 8007318:	f7f9 f8de 	bl	80004d8 <__aeabi_dmul>
 800731c:	9b07      	ldr	r3, [sp, #28]
 800731e:	1b1c      	subs	r4, r3, r4
 8007320:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007324:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007328:	e789      	b.n	800723e <_strtod_l+0x3c6>
 800732a:	f113 0f16 	cmn.w	r3, #22
 800732e:	dba1      	blt.n	8007274 <_strtod_l+0x3fc>
 8007330:	4a39      	ldr	r2, [pc, #228]	; (8007418 <_strtod_l+0x5a0>)
 8007332:	4648      	mov	r0, r9
 8007334:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007338:	e9d2 2300 	ldrd	r2, r3, [r2]
 800733c:	4651      	mov	r1, sl
 800733e:	f7f9 f9f5 	bl	800072c <__aeabi_ddiv>
 8007342:	e77e      	b.n	8007242 <_strtod_l+0x3ca>
 8007344:	2300      	movs	r3, #0
 8007346:	4648      	mov	r0, r9
 8007348:	4651      	mov	r1, sl
 800734a:	461d      	mov	r5, r3
 800734c:	4e33      	ldr	r6, [pc, #204]	; (800741c <_strtod_l+0x5a4>)
 800734e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007352:	f1b8 0f01 	cmp.w	r8, #1
 8007356:	dc21      	bgt.n	800739c <_strtod_l+0x524>
 8007358:	b10b      	cbz	r3, 800735e <_strtod_l+0x4e6>
 800735a:	4681      	mov	r9, r0
 800735c:	468a      	mov	sl, r1
 800735e:	4b2f      	ldr	r3, [pc, #188]	; (800741c <_strtod_l+0x5a4>)
 8007360:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8007364:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007368:	464a      	mov	r2, r9
 800736a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800736e:	4653      	mov	r3, sl
 8007370:	f7f9 f8b2 	bl	80004d8 <__aeabi_dmul>
 8007374:	4b2a      	ldr	r3, [pc, #168]	; (8007420 <_strtod_l+0x5a8>)
 8007376:	460a      	mov	r2, r1
 8007378:	400b      	ands	r3, r1
 800737a:	492a      	ldr	r1, [pc, #168]	; (8007424 <_strtod_l+0x5ac>)
 800737c:	4681      	mov	r9, r0
 800737e:	428b      	cmp	r3, r1
 8007380:	d894      	bhi.n	80072ac <_strtod_l+0x434>
 8007382:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007386:	428b      	cmp	r3, r1
 8007388:	bf86      	itte	hi
 800738a:	f04f 39ff 	movhi.w	r9, #4294967295
 800738e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800742c <_strtod_l+0x5b4>
 8007392:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8007396:	2300      	movs	r3, #0
 8007398:	9305      	str	r3, [sp, #20]
 800739a:	e07b      	b.n	8007494 <_strtod_l+0x61c>
 800739c:	f018 0f01 	tst.w	r8, #1
 80073a0:	d006      	beq.n	80073b0 <_strtod_l+0x538>
 80073a2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	f7f9 f895 	bl	80004d8 <__aeabi_dmul>
 80073ae:	2301      	movs	r3, #1
 80073b0:	3501      	adds	r5, #1
 80073b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80073b6:	e7cc      	b.n	8007352 <_strtod_l+0x4da>
 80073b8:	d0ed      	beq.n	8007396 <_strtod_l+0x51e>
 80073ba:	f1c8 0800 	rsb	r8, r8, #0
 80073be:	f018 020f 	ands.w	r2, r8, #15
 80073c2:	d00a      	beq.n	80073da <_strtod_l+0x562>
 80073c4:	4b14      	ldr	r3, [pc, #80]	; (8007418 <_strtod_l+0x5a0>)
 80073c6:	4648      	mov	r0, r9
 80073c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073cc:	4651      	mov	r1, sl
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f9 f9ab 	bl	800072c <__aeabi_ddiv>
 80073d6:	4681      	mov	r9, r0
 80073d8:	468a      	mov	sl, r1
 80073da:	ea5f 1828 	movs.w	r8, r8, asr #4
 80073de:	d0da      	beq.n	8007396 <_strtod_l+0x51e>
 80073e0:	f1b8 0f1f 	cmp.w	r8, #31
 80073e4:	dd24      	ble.n	8007430 <_strtod_l+0x5b8>
 80073e6:	f04f 0800 	mov.w	r8, #0
 80073ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80073ee:	f8cd 8020 	str.w	r8, [sp, #32]
 80073f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80073f6:	2322      	movs	r3, #34	; 0x22
 80073f8:	f04f 0900 	mov.w	r9, #0
 80073fc:	f04f 0a00 	mov.w	sl, #0
 8007400:	f8cb 3000 	str.w	r3, [fp]
 8007404:	e761      	b.n	80072ca <_strtod_l+0x452>
 8007406:	bf00      	nop
 8007408:	0800b8e7 	.word	0x0800b8e7
 800740c:	0800b973 	.word	0x0800b973
 8007410:	0800b8ef 	.word	0x0800b8ef
 8007414:	0800b930 	.word	0x0800b930
 8007418:	0800b9b0 	.word	0x0800b9b0
 800741c:	0800b988 	.word	0x0800b988
 8007420:	7ff00000 	.word	0x7ff00000
 8007424:	7ca00000 	.word	0x7ca00000
 8007428:	fff80000 	.word	0xfff80000
 800742c:	7fefffff 	.word	0x7fefffff
 8007430:	f018 0310 	ands.w	r3, r8, #16
 8007434:	bf18      	it	ne
 8007436:	236a      	movne	r3, #106	; 0x6a
 8007438:	4648      	mov	r0, r9
 800743a:	9305      	str	r3, [sp, #20]
 800743c:	4651      	mov	r1, sl
 800743e:	2300      	movs	r3, #0
 8007440:	4da1      	ldr	r5, [pc, #644]	; (80076c8 <_strtod_l+0x850>)
 8007442:	f1b8 0f00 	cmp.w	r8, #0
 8007446:	f300 8113 	bgt.w	8007670 <_strtod_l+0x7f8>
 800744a:	b10b      	cbz	r3, 8007450 <_strtod_l+0x5d8>
 800744c:	4681      	mov	r9, r0
 800744e:	468a      	mov	sl, r1
 8007450:	9b05      	ldr	r3, [sp, #20]
 8007452:	b1bb      	cbz	r3, 8007484 <_strtod_l+0x60c>
 8007454:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007458:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800745c:	2b00      	cmp	r3, #0
 800745e:	4651      	mov	r1, sl
 8007460:	dd10      	ble.n	8007484 <_strtod_l+0x60c>
 8007462:	2b1f      	cmp	r3, #31
 8007464:	f340 8110 	ble.w	8007688 <_strtod_l+0x810>
 8007468:	2b34      	cmp	r3, #52	; 0x34
 800746a:	bfd8      	it	le
 800746c:	f04f 32ff 	movle.w	r2, #4294967295
 8007470:	f04f 0900 	mov.w	r9, #0
 8007474:	bfcf      	iteee	gt
 8007476:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800747a:	3b20      	suble	r3, #32
 800747c:	fa02 f303 	lslle.w	r3, r2, r3
 8007480:	ea03 0a01 	andle.w	sl, r3, r1
 8007484:	2200      	movs	r2, #0
 8007486:	2300      	movs	r3, #0
 8007488:	4648      	mov	r0, r9
 800748a:	4651      	mov	r1, sl
 800748c:	f7f9 fa8c 	bl	80009a8 <__aeabi_dcmpeq>
 8007490:	2800      	cmp	r0, #0
 8007492:	d1a8      	bne.n	80073e6 <_strtod_l+0x56e>
 8007494:	9b06      	ldr	r3, [sp, #24]
 8007496:	9a04      	ldr	r2, [sp, #16]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	9908      	ldr	r1, [sp, #32]
 800749c:	4623      	mov	r3, r4
 800749e:	4658      	mov	r0, fp
 80074a0:	f001 fe3b 	bl	800911a <__s2b>
 80074a4:	9008      	str	r0, [sp, #32]
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f43f af00 	beq.w	80072ac <_strtod_l+0x434>
 80074ac:	9a07      	ldr	r2, [sp, #28]
 80074ae:	9b07      	ldr	r3, [sp, #28]
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	f1c3 0300 	rsb	r3, r3, #0
 80074b6:	bfa8      	it	ge
 80074b8:	2300      	movge	r3, #0
 80074ba:	f04f 0800 	mov.w	r8, #0
 80074be:	930e      	str	r3, [sp, #56]	; 0x38
 80074c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80074c4:	9316      	str	r3, [sp, #88]	; 0x58
 80074c6:	f8cd 8010 	str.w	r8, [sp, #16]
 80074ca:	9b08      	ldr	r3, [sp, #32]
 80074cc:	4658      	mov	r0, fp
 80074ce:	6859      	ldr	r1, [r3, #4]
 80074d0:	f001 fd9d 	bl	800900e <_Balloc>
 80074d4:	9006      	str	r0, [sp, #24]
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f43f aef0 	beq.w	80072bc <_strtod_l+0x444>
 80074dc:	9b08      	ldr	r3, [sp, #32]
 80074de:	300c      	adds	r0, #12
 80074e0:	691a      	ldr	r2, [r3, #16]
 80074e2:	f103 010c 	add.w	r1, r3, #12
 80074e6:	3202      	adds	r2, #2
 80074e8:	0092      	lsls	r2, r2, #2
 80074ea:	f001 fd85 	bl	8008ff8 <memcpy>
 80074ee:	ab1e      	add	r3, sp, #120	; 0x78
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	ab1d      	add	r3, sp, #116	; 0x74
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	464a      	mov	r2, r9
 80074f8:	4653      	mov	r3, sl
 80074fa:	4658      	mov	r0, fp
 80074fc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8007500:	f002 f8c6 	bl	8009690 <__d2b>
 8007504:	901c      	str	r0, [sp, #112]	; 0x70
 8007506:	2800      	cmp	r0, #0
 8007508:	f43f aed8 	beq.w	80072bc <_strtod_l+0x444>
 800750c:	2101      	movs	r1, #1
 800750e:	4658      	mov	r0, fp
 8007510:	f001 fe8f 	bl	8009232 <__i2b>
 8007514:	9004      	str	r0, [sp, #16]
 8007516:	4603      	mov	r3, r0
 8007518:	2800      	cmp	r0, #0
 800751a:	f43f aecf 	beq.w	80072bc <_strtod_l+0x444>
 800751e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007520:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007522:	2d00      	cmp	r5, #0
 8007524:	bfab      	itete	ge
 8007526:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007528:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800752a:	18ee      	addge	r6, r5, r3
 800752c:	1b5c      	sublt	r4, r3, r5
 800752e:	9b05      	ldr	r3, [sp, #20]
 8007530:	bfa8      	it	ge
 8007532:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007534:	eba5 0503 	sub.w	r5, r5, r3
 8007538:	4415      	add	r5, r2
 800753a:	4b64      	ldr	r3, [pc, #400]	; (80076cc <_strtod_l+0x854>)
 800753c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007540:	bfb8      	it	lt
 8007542:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007544:	429d      	cmp	r5, r3
 8007546:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800754a:	f280 80af 	bge.w	80076ac <_strtod_l+0x834>
 800754e:	1b5b      	subs	r3, r3, r5
 8007550:	2b1f      	cmp	r3, #31
 8007552:	eba2 0203 	sub.w	r2, r2, r3
 8007556:	f04f 0701 	mov.w	r7, #1
 800755a:	f300 809c 	bgt.w	8007696 <_strtod_l+0x81e>
 800755e:	2500      	movs	r5, #0
 8007560:	fa07 f303 	lsl.w	r3, r7, r3
 8007564:	930f      	str	r3, [sp, #60]	; 0x3c
 8007566:	18b7      	adds	r7, r6, r2
 8007568:	9b05      	ldr	r3, [sp, #20]
 800756a:	42be      	cmp	r6, r7
 800756c:	4414      	add	r4, r2
 800756e:	441c      	add	r4, r3
 8007570:	4633      	mov	r3, r6
 8007572:	bfa8      	it	ge
 8007574:	463b      	movge	r3, r7
 8007576:	42a3      	cmp	r3, r4
 8007578:	bfa8      	it	ge
 800757a:	4623      	movge	r3, r4
 800757c:	2b00      	cmp	r3, #0
 800757e:	bfc2      	ittt	gt
 8007580:	1aff      	subgt	r7, r7, r3
 8007582:	1ae4      	subgt	r4, r4, r3
 8007584:	1af6      	subgt	r6, r6, r3
 8007586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007588:	b1bb      	cbz	r3, 80075ba <_strtod_l+0x742>
 800758a:	461a      	mov	r2, r3
 800758c:	9904      	ldr	r1, [sp, #16]
 800758e:	4658      	mov	r0, fp
 8007590:	f001 feee 	bl	8009370 <__pow5mult>
 8007594:	9004      	str	r0, [sp, #16]
 8007596:	2800      	cmp	r0, #0
 8007598:	f43f ae90 	beq.w	80072bc <_strtod_l+0x444>
 800759c:	4601      	mov	r1, r0
 800759e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80075a0:	4658      	mov	r0, fp
 80075a2:	f001 fe4f 	bl	8009244 <__multiply>
 80075a6:	9009      	str	r0, [sp, #36]	; 0x24
 80075a8:	2800      	cmp	r0, #0
 80075aa:	f43f ae87 	beq.w	80072bc <_strtod_l+0x444>
 80075ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80075b0:	4658      	mov	r0, fp
 80075b2:	f001 fd60 	bl	8009076 <_Bfree>
 80075b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b8:	931c      	str	r3, [sp, #112]	; 0x70
 80075ba:	2f00      	cmp	r7, #0
 80075bc:	dc7a      	bgt.n	80076b4 <_strtod_l+0x83c>
 80075be:	9b07      	ldr	r3, [sp, #28]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	dd08      	ble.n	80075d6 <_strtod_l+0x75e>
 80075c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80075c6:	9906      	ldr	r1, [sp, #24]
 80075c8:	4658      	mov	r0, fp
 80075ca:	f001 fed1 	bl	8009370 <__pow5mult>
 80075ce:	9006      	str	r0, [sp, #24]
 80075d0:	2800      	cmp	r0, #0
 80075d2:	f43f ae73 	beq.w	80072bc <_strtod_l+0x444>
 80075d6:	2c00      	cmp	r4, #0
 80075d8:	dd08      	ble.n	80075ec <_strtod_l+0x774>
 80075da:	4622      	mov	r2, r4
 80075dc:	9906      	ldr	r1, [sp, #24]
 80075de:	4658      	mov	r0, fp
 80075e0:	f001 ff14 	bl	800940c <__lshift>
 80075e4:	9006      	str	r0, [sp, #24]
 80075e6:	2800      	cmp	r0, #0
 80075e8:	f43f ae68 	beq.w	80072bc <_strtod_l+0x444>
 80075ec:	2e00      	cmp	r6, #0
 80075ee:	dd08      	ble.n	8007602 <_strtod_l+0x78a>
 80075f0:	4632      	mov	r2, r6
 80075f2:	9904      	ldr	r1, [sp, #16]
 80075f4:	4658      	mov	r0, fp
 80075f6:	f001 ff09 	bl	800940c <__lshift>
 80075fa:	9004      	str	r0, [sp, #16]
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f43f ae5d 	beq.w	80072bc <_strtod_l+0x444>
 8007602:	9a06      	ldr	r2, [sp, #24]
 8007604:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007606:	4658      	mov	r0, fp
 8007608:	f001 ff6e 	bl	80094e8 <__mdiff>
 800760c:	4680      	mov	r8, r0
 800760e:	2800      	cmp	r0, #0
 8007610:	f43f ae54 	beq.w	80072bc <_strtod_l+0x444>
 8007614:	2400      	movs	r4, #0
 8007616:	68c3      	ldr	r3, [r0, #12]
 8007618:	9904      	ldr	r1, [sp, #16]
 800761a:	60c4      	str	r4, [r0, #12]
 800761c:	930c      	str	r3, [sp, #48]	; 0x30
 800761e:	f001 ff49 	bl	80094b4 <__mcmp>
 8007622:	42a0      	cmp	r0, r4
 8007624:	da54      	bge.n	80076d0 <_strtod_l+0x858>
 8007626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007628:	b9f3      	cbnz	r3, 8007668 <_strtod_l+0x7f0>
 800762a:	f1b9 0f00 	cmp.w	r9, #0
 800762e:	d11b      	bne.n	8007668 <_strtod_l+0x7f0>
 8007630:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007634:	b9c3      	cbnz	r3, 8007668 <_strtod_l+0x7f0>
 8007636:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800763a:	0d1b      	lsrs	r3, r3, #20
 800763c:	051b      	lsls	r3, r3, #20
 800763e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007642:	d911      	bls.n	8007668 <_strtod_l+0x7f0>
 8007644:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007648:	b91b      	cbnz	r3, 8007652 <_strtod_l+0x7da>
 800764a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800764e:	2b01      	cmp	r3, #1
 8007650:	dd0a      	ble.n	8007668 <_strtod_l+0x7f0>
 8007652:	4641      	mov	r1, r8
 8007654:	2201      	movs	r2, #1
 8007656:	4658      	mov	r0, fp
 8007658:	f001 fed8 	bl	800940c <__lshift>
 800765c:	9904      	ldr	r1, [sp, #16]
 800765e:	4680      	mov	r8, r0
 8007660:	f001 ff28 	bl	80094b4 <__mcmp>
 8007664:	2800      	cmp	r0, #0
 8007666:	dc68      	bgt.n	800773a <_strtod_l+0x8c2>
 8007668:	9b05      	ldr	r3, [sp, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d172      	bne.n	8007754 <_strtod_l+0x8dc>
 800766e:	e630      	b.n	80072d2 <_strtod_l+0x45a>
 8007670:	f018 0f01 	tst.w	r8, #1
 8007674:	d004      	beq.n	8007680 <_strtod_l+0x808>
 8007676:	e9d5 2300 	ldrd	r2, r3, [r5]
 800767a:	f7f8 ff2d 	bl	80004d8 <__aeabi_dmul>
 800767e:	2301      	movs	r3, #1
 8007680:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007684:	3508      	adds	r5, #8
 8007686:	e6dc      	b.n	8007442 <_strtod_l+0x5ca>
 8007688:	f04f 32ff 	mov.w	r2, #4294967295
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	ea03 0909 	and.w	r9, r3, r9
 8007694:	e6f6      	b.n	8007484 <_strtod_l+0x60c>
 8007696:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800769a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800769e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80076a2:	35e2      	adds	r5, #226	; 0xe2
 80076a4:	fa07 f505 	lsl.w	r5, r7, r5
 80076a8:	970f      	str	r7, [sp, #60]	; 0x3c
 80076aa:	e75c      	b.n	8007566 <_strtod_l+0x6ee>
 80076ac:	2301      	movs	r3, #1
 80076ae:	2500      	movs	r5, #0
 80076b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80076b2:	e758      	b.n	8007566 <_strtod_l+0x6ee>
 80076b4:	463a      	mov	r2, r7
 80076b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076b8:	4658      	mov	r0, fp
 80076ba:	f001 fea7 	bl	800940c <__lshift>
 80076be:	901c      	str	r0, [sp, #112]	; 0x70
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f47f af7c 	bne.w	80075be <_strtod_l+0x746>
 80076c6:	e5f9      	b.n	80072bc <_strtod_l+0x444>
 80076c8:	0800b948 	.word	0x0800b948
 80076cc:	fffffc02 	.word	0xfffffc02
 80076d0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80076d4:	f040 8089 	bne.w	80077ea <_strtod_l+0x972>
 80076d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076da:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80076de:	b342      	cbz	r2, 8007732 <_strtod_l+0x8ba>
 80076e0:	4aaf      	ldr	r2, [pc, #700]	; (80079a0 <_strtod_l+0xb28>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d156      	bne.n	8007794 <_strtod_l+0x91c>
 80076e6:	9b05      	ldr	r3, [sp, #20]
 80076e8:	4648      	mov	r0, r9
 80076ea:	b1eb      	cbz	r3, 8007728 <_strtod_l+0x8b0>
 80076ec:	4653      	mov	r3, sl
 80076ee:	4aad      	ldr	r2, [pc, #692]	; (80079a4 <_strtod_l+0xb2c>)
 80076f0:	f04f 31ff 	mov.w	r1, #4294967295
 80076f4:	401a      	ands	r2, r3
 80076f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80076fa:	d818      	bhi.n	800772e <_strtod_l+0x8b6>
 80076fc:	0d12      	lsrs	r2, r2, #20
 80076fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007702:	fa01 f303 	lsl.w	r3, r1, r3
 8007706:	4298      	cmp	r0, r3
 8007708:	d144      	bne.n	8007794 <_strtod_l+0x91c>
 800770a:	4ba7      	ldr	r3, [pc, #668]	; (80079a8 <_strtod_l+0xb30>)
 800770c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800770e:	429a      	cmp	r2, r3
 8007710:	d102      	bne.n	8007718 <_strtod_l+0x8a0>
 8007712:	3001      	adds	r0, #1
 8007714:	f43f add2 	beq.w	80072bc <_strtod_l+0x444>
 8007718:	4ba2      	ldr	r3, [pc, #648]	; (80079a4 <_strtod_l+0xb2c>)
 800771a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800771c:	f04f 0900 	mov.w	r9, #0
 8007720:	401a      	ands	r2, r3
 8007722:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8007726:	e79f      	b.n	8007668 <_strtod_l+0x7f0>
 8007728:	f04f 33ff 	mov.w	r3, #4294967295
 800772c:	e7eb      	b.n	8007706 <_strtod_l+0x88e>
 800772e:	460b      	mov	r3, r1
 8007730:	e7e9      	b.n	8007706 <_strtod_l+0x88e>
 8007732:	bb7b      	cbnz	r3, 8007794 <_strtod_l+0x91c>
 8007734:	f1b9 0f00 	cmp.w	r9, #0
 8007738:	d12c      	bne.n	8007794 <_strtod_l+0x91c>
 800773a:	9905      	ldr	r1, [sp, #20]
 800773c:	4653      	mov	r3, sl
 800773e:	4a99      	ldr	r2, [pc, #612]	; (80079a4 <_strtod_l+0xb2c>)
 8007740:	b1f1      	cbz	r1, 8007780 <_strtod_l+0x908>
 8007742:	ea02 010a 	and.w	r1, r2, sl
 8007746:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800774a:	dc19      	bgt.n	8007780 <_strtod_l+0x908>
 800774c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007750:	f77f ae51 	ble.w	80073f6 <_strtod_l+0x57e>
 8007754:	2300      	movs	r3, #0
 8007756:	4a95      	ldr	r2, [pc, #596]	; (80079ac <_strtod_l+0xb34>)
 8007758:	4648      	mov	r0, r9
 800775a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800775e:	4651      	mov	r1, sl
 8007760:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007764:	f7f8 feb8 	bl	80004d8 <__aeabi_dmul>
 8007768:	4681      	mov	r9, r0
 800776a:	468a      	mov	sl, r1
 800776c:	2900      	cmp	r1, #0
 800776e:	f47f adb0 	bne.w	80072d2 <_strtod_l+0x45a>
 8007772:	2800      	cmp	r0, #0
 8007774:	f47f adad 	bne.w	80072d2 <_strtod_l+0x45a>
 8007778:	2322      	movs	r3, #34	; 0x22
 800777a:	f8cb 3000 	str.w	r3, [fp]
 800777e:	e5a8      	b.n	80072d2 <_strtod_l+0x45a>
 8007780:	4013      	ands	r3, r2
 8007782:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007786:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800778a:	f04f 39ff 	mov.w	r9, #4294967295
 800778e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007792:	e769      	b.n	8007668 <_strtod_l+0x7f0>
 8007794:	b19d      	cbz	r5, 80077be <_strtod_l+0x946>
 8007796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007798:	421d      	tst	r5, r3
 800779a:	f43f af65 	beq.w	8007668 <_strtod_l+0x7f0>
 800779e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077a0:	9a05      	ldr	r2, [sp, #20]
 80077a2:	4648      	mov	r0, r9
 80077a4:	4651      	mov	r1, sl
 80077a6:	b173      	cbz	r3, 80077c6 <_strtod_l+0x94e>
 80077a8:	f7ff fb42 	bl	8006e30 <sulp>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077b4:	f7f8 fcda 	bl	800016c <__adddf3>
 80077b8:	4681      	mov	r9, r0
 80077ba:	468a      	mov	sl, r1
 80077bc:	e754      	b.n	8007668 <_strtod_l+0x7f0>
 80077be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077c0:	ea13 0f09 	tst.w	r3, r9
 80077c4:	e7e9      	b.n	800779a <_strtod_l+0x922>
 80077c6:	f7ff fb33 	bl	8006e30 <sulp>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077d2:	f7f8 fcc9 	bl	8000168 <__aeabi_dsub>
 80077d6:	2200      	movs	r2, #0
 80077d8:	2300      	movs	r3, #0
 80077da:	4681      	mov	r9, r0
 80077dc:	468a      	mov	sl, r1
 80077de:	f7f9 f8e3 	bl	80009a8 <__aeabi_dcmpeq>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	f47f ae07 	bne.w	80073f6 <_strtod_l+0x57e>
 80077e8:	e73e      	b.n	8007668 <_strtod_l+0x7f0>
 80077ea:	9904      	ldr	r1, [sp, #16]
 80077ec:	4640      	mov	r0, r8
 80077ee:	f001 ff9e 	bl	800972e <__ratio>
 80077f2:	2200      	movs	r2, #0
 80077f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077f8:	4606      	mov	r6, r0
 80077fa:	460f      	mov	r7, r1
 80077fc:	f7f9 f8e8 	bl	80009d0 <__aeabi_dcmple>
 8007800:	2800      	cmp	r0, #0
 8007802:	d075      	beq.n	80078f0 <_strtod_l+0xa78>
 8007804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007806:	2b00      	cmp	r3, #0
 8007808:	d047      	beq.n	800789a <_strtod_l+0xa22>
 800780a:	2600      	movs	r6, #0
 800780c:	4f68      	ldr	r7, [pc, #416]	; (80079b0 <_strtod_l+0xb38>)
 800780e:	4d68      	ldr	r5, [pc, #416]	; (80079b0 <_strtod_l+0xb38>)
 8007810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007812:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007816:	0d1b      	lsrs	r3, r3, #20
 8007818:	051b      	lsls	r3, r3, #20
 800781a:	930f      	str	r3, [sp, #60]	; 0x3c
 800781c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800781e:	4b65      	ldr	r3, [pc, #404]	; (80079b4 <_strtod_l+0xb3c>)
 8007820:	429a      	cmp	r2, r3
 8007822:	f040 80cf 	bne.w	80079c4 <_strtod_l+0xb4c>
 8007826:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800782a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800782e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007830:	4648      	mov	r0, r9
 8007832:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8007836:	4651      	mov	r1, sl
 8007838:	f001 feb4 	bl	80095a4 <__ulp>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f7f8 fe48 	bl	80004d8 <__aeabi_dmul>
 8007848:	464a      	mov	r2, r9
 800784a:	4653      	mov	r3, sl
 800784c:	f7f8 fc8e 	bl	800016c <__adddf3>
 8007850:	460b      	mov	r3, r1
 8007852:	4954      	ldr	r1, [pc, #336]	; (80079a4 <_strtod_l+0xb2c>)
 8007854:	4a58      	ldr	r2, [pc, #352]	; (80079b8 <_strtod_l+0xb40>)
 8007856:	4019      	ands	r1, r3
 8007858:	4291      	cmp	r1, r2
 800785a:	4681      	mov	r9, r0
 800785c:	d95e      	bls.n	800791c <_strtod_l+0xaa4>
 800785e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007860:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007864:	4293      	cmp	r3, r2
 8007866:	d103      	bne.n	8007870 <_strtod_l+0x9f8>
 8007868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800786a:	3301      	adds	r3, #1
 800786c:	f43f ad26 	beq.w	80072bc <_strtod_l+0x444>
 8007870:	f04f 39ff 	mov.w	r9, #4294967295
 8007874:	f8df a130 	ldr.w	sl, [pc, #304]	; 80079a8 <_strtod_l+0xb30>
 8007878:	991c      	ldr	r1, [sp, #112]	; 0x70
 800787a:	4658      	mov	r0, fp
 800787c:	f001 fbfb 	bl	8009076 <_Bfree>
 8007880:	9906      	ldr	r1, [sp, #24]
 8007882:	4658      	mov	r0, fp
 8007884:	f001 fbf7 	bl	8009076 <_Bfree>
 8007888:	9904      	ldr	r1, [sp, #16]
 800788a:	4658      	mov	r0, fp
 800788c:	f001 fbf3 	bl	8009076 <_Bfree>
 8007890:	4641      	mov	r1, r8
 8007892:	4658      	mov	r0, fp
 8007894:	f001 fbef 	bl	8009076 <_Bfree>
 8007898:	e617      	b.n	80074ca <_strtod_l+0x652>
 800789a:	f1b9 0f00 	cmp.w	r9, #0
 800789e:	d119      	bne.n	80078d4 <_strtod_l+0xa5c>
 80078a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078a6:	b9e3      	cbnz	r3, 80078e2 <_strtod_l+0xa6a>
 80078a8:	2200      	movs	r2, #0
 80078aa:	4b41      	ldr	r3, [pc, #260]	; (80079b0 <_strtod_l+0xb38>)
 80078ac:	4630      	mov	r0, r6
 80078ae:	4639      	mov	r1, r7
 80078b0:	f7f9 f884 	bl	80009bc <__aeabi_dcmplt>
 80078b4:	b9c8      	cbnz	r0, 80078ea <_strtod_l+0xa72>
 80078b6:	2200      	movs	r2, #0
 80078b8:	4b40      	ldr	r3, [pc, #256]	; (80079bc <_strtod_l+0xb44>)
 80078ba:	4630      	mov	r0, r6
 80078bc:	4639      	mov	r1, r7
 80078be:	f7f8 fe0b 	bl	80004d8 <__aeabi_dmul>
 80078c2:	4604      	mov	r4, r0
 80078c4:	460d      	mov	r5, r1
 80078c6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80078ca:	9418      	str	r4, [sp, #96]	; 0x60
 80078cc:	9319      	str	r3, [sp, #100]	; 0x64
 80078ce:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80078d2:	e79d      	b.n	8007810 <_strtod_l+0x998>
 80078d4:	f1b9 0f01 	cmp.w	r9, #1
 80078d8:	d103      	bne.n	80078e2 <_strtod_l+0xa6a>
 80078da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f43f ad8a 	beq.w	80073f6 <_strtod_l+0x57e>
 80078e2:	2600      	movs	r6, #0
 80078e4:	4f36      	ldr	r7, [pc, #216]	; (80079c0 <_strtod_l+0xb48>)
 80078e6:	2400      	movs	r4, #0
 80078e8:	e791      	b.n	800780e <_strtod_l+0x996>
 80078ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80078ec:	4d33      	ldr	r5, [pc, #204]	; (80079bc <_strtod_l+0xb44>)
 80078ee:	e7ea      	b.n	80078c6 <_strtod_l+0xa4e>
 80078f0:	4b32      	ldr	r3, [pc, #200]	; (80079bc <_strtod_l+0xb44>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	4630      	mov	r0, r6
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f8 fdee 	bl	80004d8 <__aeabi_dmul>
 80078fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078fe:	4604      	mov	r4, r0
 8007900:	460d      	mov	r5, r1
 8007902:	b933      	cbnz	r3, 8007912 <_strtod_l+0xa9a>
 8007904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007908:	9010      	str	r0, [sp, #64]	; 0x40
 800790a:	9311      	str	r3, [sp, #68]	; 0x44
 800790c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007910:	e77e      	b.n	8007810 <_strtod_l+0x998>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800791a:	e7f7      	b.n	800790c <_strtod_l+0xa94>
 800791c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007920:	9b05      	ldr	r3, [sp, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1a8      	bne.n	8007878 <_strtod_l+0xa00>
 8007926:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800792a:	0d1b      	lsrs	r3, r3, #20
 800792c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800792e:	051b      	lsls	r3, r3, #20
 8007930:	429a      	cmp	r2, r3
 8007932:	4656      	mov	r6, sl
 8007934:	d1a0      	bne.n	8007878 <_strtod_l+0xa00>
 8007936:	4629      	mov	r1, r5
 8007938:	4620      	mov	r0, r4
 800793a:	f7f9 f87d 	bl	8000a38 <__aeabi_d2iz>
 800793e:	f7f8 fd61 	bl	8000404 <__aeabi_i2d>
 8007942:	460b      	mov	r3, r1
 8007944:	4602      	mov	r2, r0
 8007946:	4629      	mov	r1, r5
 8007948:	4620      	mov	r0, r4
 800794a:	f7f8 fc0d 	bl	8000168 <__aeabi_dsub>
 800794e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	b933      	cbnz	r3, 8007964 <_strtod_l+0xaec>
 8007956:	f1b9 0f00 	cmp.w	r9, #0
 800795a:	d103      	bne.n	8007964 <_strtod_l+0xaec>
 800795c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007960:	2e00      	cmp	r6, #0
 8007962:	d06a      	beq.n	8007a3a <_strtod_l+0xbc2>
 8007964:	a30a      	add	r3, pc, #40	; (adr r3, 8007990 <_strtod_l+0xb18>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	4620      	mov	r0, r4
 800796c:	4629      	mov	r1, r5
 800796e:	f7f9 f825 	bl	80009bc <__aeabi_dcmplt>
 8007972:	2800      	cmp	r0, #0
 8007974:	f47f acad 	bne.w	80072d2 <_strtod_l+0x45a>
 8007978:	a307      	add	r3, pc, #28	; (adr r3, 8007998 <_strtod_l+0xb20>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	4620      	mov	r0, r4
 8007980:	4629      	mov	r1, r5
 8007982:	f7f9 f839 	bl	80009f8 <__aeabi_dcmpgt>
 8007986:	2800      	cmp	r0, #0
 8007988:	f43f af76 	beq.w	8007878 <_strtod_l+0xa00>
 800798c:	e4a1      	b.n	80072d2 <_strtod_l+0x45a>
 800798e:	bf00      	nop
 8007990:	94a03595 	.word	0x94a03595
 8007994:	3fdfffff 	.word	0x3fdfffff
 8007998:	35afe535 	.word	0x35afe535
 800799c:	3fe00000 	.word	0x3fe00000
 80079a0:	000fffff 	.word	0x000fffff
 80079a4:	7ff00000 	.word	0x7ff00000
 80079a8:	7fefffff 	.word	0x7fefffff
 80079ac:	39500000 	.word	0x39500000
 80079b0:	3ff00000 	.word	0x3ff00000
 80079b4:	7fe00000 	.word	0x7fe00000
 80079b8:	7c9fffff 	.word	0x7c9fffff
 80079bc:	3fe00000 	.word	0x3fe00000
 80079c0:	bff00000 	.word	0xbff00000
 80079c4:	9b05      	ldr	r3, [sp, #20]
 80079c6:	b313      	cbz	r3, 8007a0e <_strtod_l+0xb96>
 80079c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079ce:	d81e      	bhi.n	8007a0e <_strtod_l+0xb96>
 80079d0:	a325      	add	r3, pc, #148	; (adr r3, 8007a68 <_strtod_l+0xbf0>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	4620      	mov	r0, r4
 80079d8:	4629      	mov	r1, r5
 80079da:	f7f8 fff9 	bl	80009d0 <__aeabi_dcmple>
 80079de:	b190      	cbz	r0, 8007a06 <_strtod_l+0xb8e>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4620      	mov	r0, r4
 80079e4:	f7f9 f850 	bl	8000a88 <__aeabi_d2uiz>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	bf08      	it	eq
 80079ec:	2001      	moveq	r0, #1
 80079ee:	f7f8 fcf9 	bl	80003e4 <__aeabi_ui2d>
 80079f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079f4:	4604      	mov	r4, r0
 80079f6:	460d      	mov	r5, r1
 80079f8:	b9d3      	cbnz	r3, 8007a30 <_strtod_l+0xbb8>
 80079fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079fe:	9012      	str	r0, [sp, #72]	; 0x48
 8007a00:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a02:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007a06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a08:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007a0c:	1a9f      	subs	r7, r3, r2
 8007a0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a12:	f001 fdc7 	bl	80095a4 <__ulp>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	f7f8 fd5b 	bl	80004d8 <__aeabi_dmul>
 8007a22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a26:	f7f8 fba1 	bl	800016c <__adddf3>
 8007a2a:	4681      	mov	r9, r0
 8007a2c:	468a      	mov	sl, r1
 8007a2e:	e777      	b.n	8007920 <_strtod_l+0xaa8>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007a38:	e7e3      	b.n	8007a02 <_strtod_l+0xb8a>
 8007a3a:	a30d      	add	r3, pc, #52	; (adr r3, 8007a70 <_strtod_l+0xbf8>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f7f8 ffbc 	bl	80009bc <__aeabi_dcmplt>
 8007a44:	e79f      	b.n	8007986 <_strtod_l+0xb0e>
 8007a46:	2300      	movs	r3, #0
 8007a48:	930d      	str	r3, [sp, #52]	; 0x34
 8007a4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	f7ff ba55 	b.w	8006efe <_strtod_l+0x86>
 8007a54:	2b65      	cmp	r3, #101	; 0x65
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f43f ab42 	beq.w	80070e2 <_strtod_l+0x26a>
 8007a5e:	2101      	movs	r1, #1
 8007a60:	4614      	mov	r4, r2
 8007a62:	9105      	str	r1, [sp, #20]
 8007a64:	f7ff babf 	b.w	8006fe6 <_strtod_l+0x16e>
 8007a68:	ffc00000 	.word	0xffc00000
 8007a6c:	41dfffff 	.word	0x41dfffff
 8007a70:	94a03595 	.word	0x94a03595
 8007a74:	3fcfffff 	.word	0x3fcfffff

08007a78 <_strtod_r>:
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <_strtod_r+0x18>)
 8007a7a:	b410      	push	{r4}
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4c05      	ldr	r4, [pc, #20]	; (8007a94 <_strtod_r+0x1c>)
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bf08      	it	eq
 8007a86:	4623      	moveq	r3, r4
 8007a88:	bc10      	pop	{r4}
 8007a8a:	f7ff b9f5 	b.w	8006e78 <_strtod_l>
 8007a8e:	bf00      	nop
 8007a90:	200001a0 	.word	0x200001a0
 8007a94:	20000204 	.word	0x20000204

08007a98 <strtod>:
 8007a98:	4b06      	ldr	r3, [pc, #24]	; (8007ab4 <strtod+0x1c>)
 8007a9a:	b410      	push	{r4}
 8007a9c:	681c      	ldr	r4, [r3, #0]
 8007a9e:	4a06      	ldr	r2, [pc, #24]	; (8007ab8 <strtod+0x20>)
 8007aa0:	6a23      	ldr	r3, [r4, #32]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	bf08      	it	eq
 8007aa6:	4613      	moveq	r3, r2
 8007aa8:	460a      	mov	r2, r1
 8007aaa:	4601      	mov	r1, r0
 8007aac:	4620      	mov	r0, r4
 8007aae:	bc10      	pop	{r4}
 8007ab0:	f7ff b9e2 	b.w	8006e78 <_strtod_l>
 8007ab4:	200001a0 	.word	0x200001a0
 8007ab8:	20000204 	.word	0x20000204

08007abc <strtok>:
 8007abc:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <strtok+0x50>)
 8007abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	681d      	ldr	r5, [r3, #0]
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8007ac8:	460f      	mov	r7, r1
 8007aca:	b9b4      	cbnz	r4, 8007afa <strtok+0x3e>
 8007acc:	2050      	movs	r0, #80	; 0x50
 8007ace:	f001 fa6b 	bl	8008fa8 <malloc>
 8007ad2:	65a8      	str	r0, [r5, #88]	; 0x58
 8007ad4:	e9c0 4400 	strd	r4, r4, [r0]
 8007ad8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007adc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007ae0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007ae4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007ae8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007aec:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007af0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007af4:	6184      	str	r4, [r0, #24]
 8007af6:	7704      	strb	r4, [r0, #28]
 8007af8:	6244      	str	r4, [r0, #36]	; 0x24
 8007afa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8007afc:	4639      	mov	r1, r7
 8007afe:	4630      	mov	r0, r6
 8007b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b04:	2301      	movs	r3, #1
 8007b06:	f000 b803 	b.w	8007b10 <__strtok_r>
 8007b0a:	bf00      	nop
 8007b0c:	200001a0 	.word	0x200001a0

08007b10 <__strtok_r>:
 8007b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b12:	b918      	cbnz	r0, 8007b1c <__strtok_r+0xc>
 8007b14:	6810      	ldr	r0, [r2, #0]
 8007b16:	b908      	cbnz	r0, 8007b1c <__strtok_r+0xc>
 8007b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	460f      	mov	r7, r1
 8007b20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007b24:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007b28:	b91e      	cbnz	r6, 8007b32 <__strtok_r+0x22>
 8007b2a:	b96d      	cbnz	r5, 8007b48 <__strtok_r+0x38>
 8007b2c:	6015      	str	r5, [r2, #0]
 8007b2e:	4628      	mov	r0, r5
 8007b30:	e7f2      	b.n	8007b18 <__strtok_r+0x8>
 8007b32:	42b5      	cmp	r5, r6
 8007b34:	d1f6      	bne.n	8007b24 <__strtok_r+0x14>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1ef      	bne.n	8007b1a <__strtok_r+0xa>
 8007b3a:	6014      	str	r4, [r2, #0]
 8007b3c:	7003      	strb	r3, [r0, #0]
 8007b3e:	e7eb      	b.n	8007b18 <__strtok_r+0x8>
 8007b40:	462b      	mov	r3, r5
 8007b42:	e00d      	b.n	8007b60 <__strtok_r+0x50>
 8007b44:	b926      	cbnz	r6, 8007b50 <__strtok_r+0x40>
 8007b46:	461c      	mov	r4, r3
 8007b48:	4623      	mov	r3, r4
 8007b4a:	460f      	mov	r7, r1
 8007b4c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007b50:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007b54:	42b5      	cmp	r5, r6
 8007b56:	d1f5      	bne.n	8007b44 <__strtok_r+0x34>
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	d0f1      	beq.n	8007b40 <__strtok_r+0x30>
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	7021      	strb	r1, [r4, #0]
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	e7d9      	b.n	8007b18 <__strtok_r+0x8>

08007b64 <_strtol_l.isra.0>:
 8007b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	4680      	mov	r8, r0
 8007b6a:	4689      	mov	r9, r1
 8007b6c:	4692      	mov	sl, r2
 8007b6e:	461e      	mov	r6, r3
 8007b70:	460f      	mov	r7, r1
 8007b72:	463d      	mov	r5, r7
 8007b74:	9808      	ldr	r0, [sp, #32]
 8007b76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b7a:	f001 fa01 	bl	8008f80 <__locale_ctype_ptr_l>
 8007b7e:	4420      	add	r0, r4
 8007b80:	7843      	ldrb	r3, [r0, #1]
 8007b82:	f013 0308 	ands.w	r3, r3, #8
 8007b86:	d132      	bne.n	8007bee <_strtol_l.isra.0+0x8a>
 8007b88:	2c2d      	cmp	r4, #45	; 0x2d
 8007b8a:	d132      	bne.n	8007bf2 <_strtol_l.isra.0+0x8e>
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	787c      	ldrb	r4, [r7, #1]
 8007b90:	1cbd      	adds	r5, r7, #2
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	d05d      	beq.n	8007c52 <_strtol_l.isra.0+0xee>
 8007b96:	2e10      	cmp	r6, #16
 8007b98:	d109      	bne.n	8007bae <_strtol_l.isra.0+0x4a>
 8007b9a:	2c30      	cmp	r4, #48	; 0x30
 8007b9c:	d107      	bne.n	8007bae <_strtol_l.isra.0+0x4a>
 8007b9e:	782b      	ldrb	r3, [r5, #0]
 8007ba0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ba4:	2b58      	cmp	r3, #88	; 0x58
 8007ba6:	d14f      	bne.n	8007c48 <_strtol_l.isra.0+0xe4>
 8007ba8:	2610      	movs	r6, #16
 8007baa:	786c      	ldrb	r4, [r5, #1]
 8007bac:	3502      	adds	r5, #2
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	bf14      	ite	ne
 8007bb2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007bb6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007bba:	2700      	movs	r7, #0
 8007bbc:	fbb1 fcf6 	udiv	ip, r1, r6
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007bc6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007bca:	2b09      	cmp	r3, #9
 8007bcc:	d817      	bhi.n	8007bfe <_strtol_l.isra.0+0x9a>
 8007bce:	461c      	mov	r4, r3
 8007bd0:	42a6      	cmp	r6, r4
 8007bd2:	dd23      	ble.n	8007c1c <_strtol_l.isra.0+0xb8>
 8007bd4:	1c7b      	adds	r3, r7, #1
 8007bd6:	d007      	beq.n	8007be8 <_strtol_l.isra.0+0x84>
 8007bd8:	4584      	cmp	ip, r0
 8007bda:	d31c      	bcc.n	8007c16 <_strtol_l.isra.0+0xb2>
 8007bdc:	d101      	bne.n	8007be2 <_strtol_l.isra.0+0x7e>
 8007bde:	45a6      	cmp	lr, r4
 8007be0:	db19      	blt.n	8007c16 <_strtol_l.isra.0+0xb2>
 8007be2:	2701      	movs	r7, #1
 8007be4:	fb00 4006 	mla	r0, r0, r6, r4
 8007be8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bec:	e7eb      	b.n	8007bc6 <_strtol_l.isra.0+0x62>
 8007bee:	462f      	mov	r7, r5
 8007bf0:	e7bf      	b.n	8007b72 <_strtol_l.isra.0+0xe>
 8007bf2:	2c2b      	cmp	r4, #43	; 0x2b
 8007bf4:	bf04      	itt	eq
 8007bf6:	1cbd      	addeq	r5, r7, #2
 8007bf8:	787c      	ldrbeq	r4, [r7, #1]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	e7c9      	b.n	8007b92 <_strtol_l.isra.0+0x2e>
 8007bfe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007c02:	2b19      	cmp	r3, #25
 8007c04:	d801      	bhi.n	8007c0a <_strtol_l.isra.0+0xa6>
 8007c06:	3c37      	subs	r4, #55	; 0x37
 8007c08:	e7e2      	b.n	8007bd0 <_strtol_l.isra.0+0x6c>
 8007c0a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007c0e:	2b19      	cmp	r3, #25
 8007c10:	d804      	bhi.n	8007c1c <_strtol_l.isra.0+0xb8>
 8007c12:	3c57      	subs	r4, #87	; 0x57
 8007c14:	e7dc      	b.n	8007bd0 <_strtol_l.isra.0+0x6c>
 8007c16:	f04f 37ff 	mov.w	r7, #4294967295
 8007c1a:	e7e5      	b.n	8007be8 <_strtol_l.isra.0+0x84>
 8007c1c:	1c7b      	adds	r3, r7, #1
 8007c1e:	d108      	bne.n	8007c32 <_strtol_l.isra.0+0xce>
 8007c20:	2322      	movs	r3, #34	; 0x22
 8007c22:	4608      	mov	r0, r1
 8007c24:	f8c8 3000 	str.w	r3, [r8]
 8007c28:	f1ba 0f00 	cmp.w	sl, #0
 8007c2c:	d107      	bne.n	8007c3e <_strtol_l.isra.0+0xda>
 8007c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c32:	b102      	cbz	r2, 8007c36 <_strtol_l.isra.0+0xd2>
 8007c34:	4240      	negs	r0, r0
 8007c36:	f1ba 0f00 	cmp.w	sl, #0
 8007c3a:	d0f8      	beq.n	8007c2e <_strtol_l.isra.0+0xca>
 8007c3c:	b10f      	cbz	r7, 8007c42 <_strtol_l.isra.0+0xde>
 8007c3e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007c42:	f8ca 9000 	str.w	r9, [sl]
 8007c46:	e7f2      	b.n	8007c2e <_strtol_l.isra.0+0xca>
 8007c48:	2430      	movs	r4, #48	; 0x30
 8007c4a:	2e00      	cmp	r6, #0
 8007c4c:	d1af      	bne.n	8007bae <_strtol_l.isra.0+0x4a>
 8007c4e:	2608      	movs	r6, #8
 8007c50:	e7ad      	b.n	8007bae <_strtol_l.isra.0+0x4a>
 8007c52:	2c30      	cmp	r4, #48	; 0x30
 8007c54:	d0a3      	beq.n	8007b9e <_strtol_l.isra.0+0x3a>
 8007c56:	260a      	movs	r6, #10
 8007c58:	e7a9      	b.n	8007bae <_strtol_l.isra.0+0x4a>
	...

08007c5c <_strtol_r>:
 8007c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c5e:	4c06      	ldr	r4, [pc, #24]	; (8007c78 <_strtol_r+0x1c>)
 8007c60:	4d06      	ldr	r5, [pc, #24]	; (8007c7c <_strtol_r+0x20>)
 8007c62:	6824      	ldr	r4, [r4, #0]
 8007c64:	6a24      	ldr	r4, [r4, #32]
 8007c66:	2c00      	cmp	r4, #0
 8007c68:	bf08      	it	eq
 8007c6a:	462c      	moveq	r4, r5
 8007c6c:	9400      	str	r4, [sp, #0]
 8007c6e:	f7ff ff79 	bl	8007b64 <_strtol_l.isra.0>
 8007c72:	b003      	add	sp, #12
 8007c74:	bd30      	pop	{r4, r5, pc}
 8007c76:	bf00      	nop
 8007c78:	200001a0 	.word	0x200001a0
 8007c7c:	20000204 	.word	0x20000204

08007c80 <strtol>:
 8007c80:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <strtol+0x24>)
 8007c82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c84:	681c      	ldr	r4, [r3, #0]
 8007c86:	4d08      	ldr	r5, [pc, #32]	; (8007ca8 <strtol+0x28>)
 8007c88:	6a23      	ldr	r3, [r4, #32]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	bf08      	it	eq
 8007c8e:	462b      	moveq	r3, r5
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	4613      	mov	r3, r2
 8007c94:	460a      	mov	r2, r1
 8007c96:	4601      	mov	r1, r0
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f7ff ff63 	bl	8007b64 <_strtol_l.isra.0>
 8007c9e:	b003      	add	sp, #12
 8007ca0:	bd30      	pop	{r4, r5, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200001a0 	.word	0x200001a0
 8007ca8:	20000204 	.word	0x20000204

08007cac <quorem>:
 8007cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb0:	6903      	ldr	r3, [r0, #16]
 8007cb2:	690c      	ldr	r4, [r1, #16]
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	42a3      	cmp	r3, r4
 8007cb8:	f2c0 8084 	blt.w	8007dc4 <quorem+0x118>
 8007cbc:	3c01      	subs	r4, #1
 8007cbe:	f101 0714 	add.w	r7, r1, #20
 8007cc2:	f100 0614 	add.w	r6, r0, #20
 8007cc6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007cca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007cce:	3501      	adds	r5, #1
 8007cd0:	fbb0 f5f5 	udiv	r5, r0, r5
 8007cd4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007cd8:	eb06 030c 	add.w	r3, r6, ip
 8007cdc:	eb07 090c 	add.w	r9, r7, ip
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	b39d      	cbz	r5, 8007d4c <quorem+0xa0>
 8007ce4:	f04f 0a00 	mov.w	sl, #0
 8007ce8:	4638      	mov	r0, r7
 8007cea:	46b6      	mov	lr, r6
 8007cec:	46d3      	mov	fp, sl
 8007cee:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cf2:	b293      	uxth	r3, r2
 8007cf4:	fb05 a303 	mla	r3, r5, r3, sl
 8007cf8:	0c12      	lsrs	r2, r2, #16
 8007cfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cfe:	fb05 a202 	mla	r2, r5, r2, sl
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	ebab 0303 	sub.w	r3, fp, r3
 8007d08:	f8de b000 	ldr.w	fp, [lr]
 8007d0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007d10:	fa1f fb8b 	uxth.w	fp, fp
 8007d14:	445b      	add	r3, fp
 8007d16:	fa1f fb82 	uxth.w	fp, r2
 8007d1a:	f8de 2000 	ldr.w	r2, [lr]
 8007d1e:	4581      	cmp	r9, r0
 8007d20:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d2e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d32:	f84e 3b04 	str.w	r3, [lr], #4
 8007d36:	d2da      	bcs.n	8007cee <quorem+0x42>
 8007d38:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d3c:	b933      	cbnz	r3, 8007d4c <quorem+0xa0>
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	3b04      	subs	r3, #4
 8007d42:	429e      	cmp	r6, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	d331      	bcc.n	8007dac <quorem+0x100>
 8007d48:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	f001 fbb1 	bl	80094b4 <__mcmp>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	db26      	blt.n	8007da4 <quorem+0xf8>
 8007d56:	4630      	mov	r0, r6
 8007d58:	f04f 0c00 	mov.w	ip, #0
 8007d5c:	3501      	adds	r5, #1
 8007d5e:	f857 1b04 	ldr.w	r1, [r7], #4
 8007d62:	f8d0 e000 	ldr.w	lr, [r0]
 8007d66:	b28b      	uxth	r3, r1
 8007d68:	ebac 0303 	sub.w	r3, ip, r3
 8007d6c:	fa1f f28e 	uxth.w	r2, lr
 8007d70:	4413      	add	r3, r2
 8007d72:	0c0a      	lsrs	r2, r1, #16
 8007d74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d82:	45b9      	cmp	r9, r7
 8007d84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d88:	f840 3b04 	str.w	r3, [r0], #4
 8007d8c:	d2e7      	bcs.n	8007d5e <quorem+0xb2>
 8007d8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007d92:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007d96:	b92a      	cbnz	r2, 8007da4 <quorem+0xf8>
 8007d98:	3b04      	subs	r3, #4
 8007d9a:	429e      	cmp	r6, r3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	d30b      	bcc.n	8007db8 <quorem+0x10c>
 8007da0:	f8c8 4010 	str.w	r4, [r8, #16]
 8007da4:	4628      	mov	r0, r5
 8007da6:	b003      	add	sp, #12
 8007da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	3b04      	subs	r3, #4
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	d1c9      	bne.n	8007d48 <quorem+0x9c>
 8007db4:	3c01      	subs	r4, #1
 8007db6:	e7c4      	b.n	8007d42 <quorem+0x96>
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	3b04      	subs	r3, #4
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	d1ef      	bne.n	8007da0 <quorem+0xf4>
 8007dc0:	3c01      	subs	r4, #1
 8007dc2:	e7ea      	b.n	8007d9a <quorem+0xee>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	e7ee      	b.n	8007da6 <quorem+0xfa>

08007dc8 <_dtoa_r>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	4616      	mov	r6, r2
 8007dce:	461f      	mov	r7, r3
 8007dd0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007dd2:	b095      	sub	sp, #84	; 0x54
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007dda:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007dde:	b93d      	cbnz	r5, 8007df0 <_dtoa_r+0x28>
 8007de0:	2010      	movs	r0, #16
 8007de2:	f001 f8e1 	bl	8008fa8 <malloc>
 8007de6:	6260      	str	r0, [r4, #36]	; 0x24
 8007de8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dec:	6005      	str	r5, [r0, #0]
 8007dee:	60c5      	str	r5, [r0, #12]
 8007df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007df2:	6819      	ldr	r1, [r3, #0]
 8007df4:	b151      	cbz	r1, 8007e0c <_dtoa_r+0x44>
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4093      	lsls	r3, r2
 8007dfc:	604a      	str	r2, [r1, #4]
 8007dfe:	608b      	str	r3, [r1, #8]
 8007e00:	4620      	mov	r0, r4
 8007e02:	f001 f938 	bl	8009076 <_Bfree>
 8007e06:	2200      	movs	r2, #0
 8007e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	1e3b      	subs	r3, r7, #0
 8007e0e:	bfaf      	iteee	ge
 8007e10:	2300      	movge	r3, #0
 8007e12:	2201      	movlt	r2, #1
 8007e14:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e18:	9303      	strlt	r3, [sp, #12]
 8007e1a:	bfac      	ite	ge
 8007e1c:	f8c8 3000 	strge.w	r3, [r8]
 8007e20:	f8c8 2000 	strlt.w	r2, [r8]
 8007e24:	4bae      	ldr	r3, [pc, #696]	; (80080e0 <_dtoa_r+0x318>)
 8007e26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007e2a:	ea33 0308 	bics.w	r3, r3, r8
 8007e2e:	d11b      	bne.n	8007e68 <_dtoa_r+0xa0>
 8007e30:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	9b02      	ldr	r3, [sp, #8]
 8007e3a:	b923      	cbnz	r3, 8007e46 <_dtoa_r+0x7e>
 8007e3c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e40:	2800      	cmp	r0, #0
 8007e42:	f000 8545 	beq.w	80088d0 <_dtoa_r+0xb08>
 8007e46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e48:	b953      	cbnz	r3, 8007e60 <_dtoa_r+0x98>
 8007e4a:	4ba6      	ldr	r3, [pc, #664]	; (80080e4 <_dtoa_r+0x31c>)
 8007e4c:	e021      	b.n	8007e92 <_dtoa_r+0xca>
 8007e4e:	4ba6      	ldr	r3, [pc, #664]	; (80080e8 <_dtoa_r+0x320>)
 8007e50:	9306      	str	r3, [sp, #24]
 8007e52:	3308      	adds	r3, #8
 8007e54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	9806      	ldr	r0, [sp, #24]
 8007e5a:	b015      	add	sp, #84	; 0x54
 8007e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e60:	4ba0      	ldr	r3, [pc, #640]	; (80080e4 <_dtoa_r+0x31c>)
 8007e62:	9306      	str	r3, [sp, #24]
 8007e64:	3303      	adds	r3, #3
 8007e66:	e7f5      	b.n	8007e54 <_dtoa_r+0x8c>
 8007e68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fd98 	bl	80009a8 <__aeabi_dcmpeq>
 8007e78:	4682      	mov	sl, r0
 8007e7a:	b160      	cbz	r0, 8007e96 <_dtoa_r+0xce>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8520 	beq.w	80088ca <_dtoa_r+0xb02>
 8007e8a:	4b98      	ldr	r3, [pc, #608]	; (80080ec <_dtoa_r+0x324>)
 8007e8c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	9306      	str	r3, [sp, #24]
 8007e94:	e7e0      	b.n	8007e58 <_dtoa_r+0x90>
 8007e96:	ab12      	add	r3, sp, #72	; 0x48
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	ab13      	add	r3, sp, #76	; 0x4c
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4632      	mov	r2, r6
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f001 fbf4 	bl	8009690 <__d2b>
 8007ea8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007eac:	4683      	mov	fp, r0
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	d07d      	beq.n	8007fae <_dtoa_r+0x1e6>
 8007eb2:	46b0      	mov	r8, r6
 8007eb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007eb8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007ebc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007ec0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ec4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4b89      	ldr	r3, [pc, #548]	; (80080f0 <_dtoa_r+0x328>)
 8007ecc:	4640      	mov	r0, r8
 8007ece:	4649      	mov	r1, r9
 8007ed0:	f7f8 f94a 	bl	8000168 <__aeabi_dsub>
 8007ed4:	a37c      	add	r3, pc, #496	; (adr r3, 80080c8 <_dtoa_r+0x300>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 fafd 	bl	80004d8 <__aeabi_dmul>
 8007ede:	a37c      	add	r3, pc, #496	; (adr r3, 80080d0 <_dtoa_r+0x308>)
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f7f8 f942 	bl	800016c <__adddf3>
 8007ee8:	4606      	mov	r6, r0
 8007eea:	4628      	mov	r0, r5
 8007eec:	460f      	mov	r7, r1
 8007eee:	f7f8 fa89 	bl	8000404 <__aeabi_i2d>
 8007ef2:	a379      	add	r3, pc, #484	; (adr r3, 80080d8 <_dtoa_r+0x310>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 faee 	bl	80004d8 <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4630      	mov	r0, r6
 8007f02:	4639      	mov	r1, r7
 8007f04:	f7f8 f932 	bl	800016c <__adddf3>
 8007f08:	4606      	mov	r6, r0
 8007f0a:	460f      	mov	r7, r1
 8007f0c:	f7f8 fd94 	bl	8000a38 <__aeabi_d2iz>
 8007f10:	2200      	movs	r2, #0
 8007f12:	4682      	mov	sl, r0
 8007f14:	2300      	movs	r3, #0
 8007f16:	4630      	mov	r0, r6
 8007f18:	4639      	mov	r1, r7
 8007f1a:	f7f8 fd4f 	bl	80009bc <__aeabi_dcmplt>
 8007f1e:	b148      	cbz	r0, 8007f34 <_dtoa_r+0x16c>
 8007f20:	4650      	mov	r0, sl
 8007f22:	f7f8 fa6f 	bl	8000404 <__aeabi_i2d>
 8007f26:	4632      	mov	r2, r6
 8007f28:	463b      	mov	r3, r7
 8007f2a:	f7f8 fd3d 	bl	80009a8 <__aeabi_dcmpeq>
 8007f2e:	b908      	cbnz	r0, 8007f34 <_dtoa_r+0x16c>
 8007f30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f34:	f1ba 0f16 	cmp.w	sl, #22
 8007f38:	d85a      	bhi.n	8007ff0 <_dtoa_r+0x228>
 8007f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f3e:	496d      	ldr	r1, [pc, #436]	; (80080f4 <_dtoa_r+0x32c>)
 8007f40:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f48:	f7f8 fd56 	bl	80009f8 <__aeabi_dcmpgt>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d051      	beq.n	8007ff4 <_dtoa_r+0x22c>
 8007f50:	2300      	movs	r3, #0
 8007f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f56:	930d      	str	r3, [sp, #52]	; 0x34
 8007f58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f5a:	1b5d      	subs	r5, r3, r5
 8007f5c:	1e6b      	subs	r3, r5, #1
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	bf43      	ittte	mi
 8007f62:	2300      	movmi	r3, #0
 8007f64:	f1c5 0901 	rsbmi	r9, r5, #1
 8007f68:	9307      	strmi	r3, [sp, #28]
 8007f6a:	f04f 0900 	movpl.w	r9, #0
 8007f6e:	f1ba 0f00 	cmp.w	sl, #0
 8007f72:	db41      	blt.n	8007ff8 <_dtoa_r+0x230>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007f7a:	4453      	add	r3, sl
 8007f7c:	9307      	str	r3, [sp, #28]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9308      	str	r3, [sp, #32]
 8007f82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007f84:	2b09      	cmp	r3, #9
 8007f86:	f200 808f 	bhi.w	80080a8 <_dtoa_r+0x2e0>
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	bfc4      	itt	gt
 8007f8e:	3b04      	subgt	r3, #4
 8007f90:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007f92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007f94:	bfc8      	it	gt
 8007f96:	2500      	movgt	r5, #0
 8007f98:	f1a3 0302 	sub.w	r3, r3, #2
 8007f9c:	bfd8      	it	le
 8007f9e:	2501      	movle	r5, #1
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	f200 808d 	bhi.w	80080c0 <_dtoa_r+0x2f8>
 8007fa6:	e8df f003 	tbb	[pc, r3]
 8007faa:	7d7b      	.short	0x7d7b
 8007fac:	6f2f      	.short	0x6f2f
 8007fae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007fb2:	441d      	add	r5, r3
 8007fb4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007fb8:	2820      	cmp	r0, #32
 8007fba:	dd13      	ble.n	8007fe4 <_dtoa_r+0x21c>
 8007fbc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007fc0:	9b02      	ldr	r3, [sp, #8]
 8007fc2:	fa08 f800 	lsl.w	r8, r8, r0
 8007fc6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007fca:	fa23 f000 	lsr.w	r0, r3, r0
 8007fce:	ea48 0000 	orr.w	r0, r8, r0
 8007fd2:	f7f8 fa07 	bl	80003e4 <__aeabi_ui2d>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4680      	mov	r8, r0
 8007fda:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007fde:	3d01      	subs	r5, #1
 8007fe0:	9310      	str	r3, [sp, #64]	; 0x40
 8007fe2:	e771      	b.n	8007ec8 <_dtoa_r+0x100>
 8007fe4:	9b02      	ldr	r3, [sp, #8]
 8007fe6:	f1c0 0020 	rsb	r0, r0, #32
 8007fea:	fa03 f000 	lsl.w	r0, r3, r0
 8007fee:	e7f0      	b.n	8007fd2 <_dtoa_r+0x20a>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e7b0      	b.n	8007f56 <_dtoa_r+0x18e>
 8007ff4:	900d      	str	r0, [sp, #52]	; 0x34
 8007ff6:	e7af      	b.n	8007f58 <_dtoa_r+0x190>
 8007ff8:	f1ca 0300 	rsb	r3, sl, #0
 8007ffc:	9308      	str	r3, [sp, #32]
 8007ffe:	2300      	movs	r3, #0
 8008000:	eba9 090a 	sub.w	r9, r9, sl
 8008004:	930c      	str	r3, [sp, #48]	; 0x30
 8008006:	e7bc      	b.n	8007f82 <_dtoa_r+0x1ba>
 8008008:	2301      	movs	r3, #1
 800800a:	9309      	str	r3, [sp, #36]	; 0x24
 800800c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800800e:	2b00      	cmp	r3, #0
 8008010:	dd74      	ble.n	80080fc <_dtoa_r+0x334>
 8008012:	4698      	mov	r8, r3
 8008014:	9304      	str	r3, [sp, #16]
 8008016:	2200      	movs	r2, #0
 8008018:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800801a:	6072      	str	r2, [r6, #4]
 800801c:	2204      	movs	r2, #4
 800801e:	f102 0014 	add.w	r0, r2, #20
 8008022:	4298      	cmp	r0, r3
 8008024:	6871      	ldr	r1, [r6, #4]
 8008026:	d96e      	bls.n	8008106 <_dtoa_r+0x33e>
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fff0 	bl	800900e <_Balloc>
 800802e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008030:	6030      	str	r0, [r6, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f1b8 0f0e 	cmp.w	r8, #14
 8008038:	9306      	str	r3, [sp, #24]
 800803a:	f200 80ed 	bhi.w	8008218 <_dtoa_r+0x450>
 800803e:	2d00      	cmp	r5, #0
 8008040:	f000 80ea 	beq.w	8008218 <_dtoa_r+0x450>
 8008044:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008048:	f1ba 0f00 	cmp.w	sl, #0
 800804c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008050:	dd77      	ble.n	8008142 <_dtoa_r+0x37a>
 8008052:	4a28      	ldr	r2, [pc, #160]	; (80080f4 <_dtoa_r+0x32c>)
 8008054:	f00a 030f 	and.w	r3, sl, #15
 8008058:	ea4f 162a 	mov.w	r6, sl, asr #4
 800805c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008060:	06f0      	lsls	r0, r6, #27
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800806a:	d568      	bpl.n	800813e <_dtoa_r+0x376>
 800806c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008070:	4b21      	ldr	r3, [pc, #132]	; (80080f8 <_dtoa_r+0x330>)
 8008072:	2503      	movs	r5, #3
 8008074:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008078:	f7f8 fb58 	bl	800072c <__aeabi_ddiv>
 800807c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008080:	f006 060f 	and.w	r6, r6, #15
 8008084:	4f1c      	ldr	r7, [pc, #112]	; (80080f8 <_dtoa_r+0x330>)
 8008086:	e04f      	b.n	8008128 <_dtoa_r+0x360>
 8008088:	2301      	movs	r3, #1
 800808a:	9309      	str	r3, [sp, #36]	; 0x24
 800808c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800808e:	4453      	add	r3, sl
 8008090:	f103 0801 	add.w	r8, r3, #1
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	4643      	mov	r3, r8
 8008098:	2b01      	cmp	r3, #1
 800809a:	bfb8      	it	lt
 800809c:	2301      	movlt	r3, #1
 800809e:	e7ba      	b.n	8008016 <_dtoa_r+0x24e>
 80080a0:	2300      	movs	r3, #0
 80080a2:	e7b2      	b.n	800800a <_dtoa_r+0x242>
 80080a4:	2300      	movs	r3, #0
 80080a6:	e7f0      	b.n	800808a <_dtoa_r+0x2c2>
 80080a8:	2501      	movs	r5, #1
 80080aa:	2300      	movs	r3, #0
 80080ac:	9509      	str	r5, [sp, #36]	; 0x24
 80080ae:	931e      	str	r3, [sp, #120]	; 0x78
 80080b0:	f04f 33ff 	mov.w	r3, #4294967295
 80080b4:	2200      	movs	r2, #0
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	4698      	mov	r8, r3
 80080ba:	2312      	movs	r3, #18
 80080bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80080be:	e7aa      	b.n	8008016 <_dtoa_r+0x24e>
 80080c0:	2301      	movs	r3, #1
 80080c2:	9309      	str	r3, [sp, #36]	; 0x24
 80080c4:	e7f4      	b.n	80080b0 <_dtoa_r+0x2e8>
 80080c6:	bf00      	nop
 80080c8:	636f4361 	.word	0x636f4361
 80080cc:	3fd287a7 	.word	0x3fd287a7
 80080d0:	8b60c8b3 	.word	0x8b60c8b3
 80080d4:	3fc68a28 	.word	0x3fc68a28
 80080d8:	509f79fb 	.word	0x509f79fb
 80080dc:	3fd34413 	.word	0x3fd34413
 80080e0:	7ff00000 	.word	0x7ff00000
 80080e4:	0800b979 	.word	0x0800b979
 80080e8:	0800b970 	.word	0x0800b970
 80080ec:	0800b8f3 	.word	0x0800b8f3
 80080f0:	3ff80000 	.word	0x3ff80000
 80080f4:	0800b9b0 	.word	0x0800b9b0
 80080f8:	0800b988 	.word	0x0800b988
 80080fc:	2301      	movs	r3, #1
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	4698      	mov	r8, r3
 8008102:	461a      	mov	r2, r3
 8008104:	e7da      	b.n	80080bc <_dtoa_r+0x2f4>
 8008106:	3101      	adds	r1, #1
 8008108:	6071      	str	r1, [r6, #4]
 800810a:	0052      	lsls	r2, r2, #1
 800810c:	e787      	b.n	800801e <_dtoa_r+0x256>
 800810e:	07f1      	lsls	r1, r6, #31
 8008110:	d508      	bpl.n	8008124 <_dtoa_r+0x35c>
 8008112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800811a:	f7f8 f9dd 	bl	80004d8 <__aeabi_dmul>
 800811e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008122:	3501      	adds	r5, #1
 8008124:	1076      	asrs	r6, r6, #1
 8008126:	3708      	adds	r7, #8
 8008128:	2e00      	cmp	r6, #0
 800812a:	d1f0      	bne.n	800810e <_dtoa_r+0x346>
 800812c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008134:	f7f8 fafa 	bl	800072c <__aeabi_ddiv>
 8008138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800813c:	e01b      	b.n	8008176 <_dtoa_r+0x3ae>
 800813e:	2502      	movs	r5, #2
 8008140:	e7a0      	b.n	8008084 <_dtoa_r+0x2bc>
 8008142:	f000 80a4 	beq.w	800828e <_dtoa_r+0x4c6>
 8008146:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800814a:	f1ca 0600 	rsb	r6, sl, #0
 800814e:	4ba0      	ldr	r3, [pc, #640]	; (80083d0 <_dtoa_r+0x608>)
 8008150:	f006 020f 	and.w	r2, r6, #15
 8008154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f7f8 f9bc 	bl	80004d8 <__aeabi_dmul>
 8008160:	2502      	movs	r5, #2
 8008162:	2300      	movs	r3, #0
 8008164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008168:	4f9a      	ldr	r7, [pc, #616]	; (80083d4 <_dtoa_r+0x60c>)
 800816a:	1136      	asrs	r6, r6, #4
 800816c:	2e00      	cmp	r6, #0
 800816e:	f040 8083 	bne.w	8008278 <_dtoa_r+0x4b0>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e0      	bne.n	8008138 <_dtoa_r+0x370>
 8008176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 808a 	beq.w	8008292 <_dtoa_r+0x4ca>
 800817e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008182:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800818a:	2200      	movs	r2, #0
 800818c:	4b92      	ldr	r3, [pc, #584]	; (80083d8 <_dtoa_r+0x610>)
 800818e:	f7f8 fc15 	bl	80009bc <__aeabi_dcmplt>
 8008192:	2800      	cmp	r0, #0
 8008194:	d07d      	beq.n	8008292 <_dtoa_r+0x4ca>
 8008196:	f1b8 0f00 	cmp.w	r8, #0
 800819a:	d07a      	beq.n	8008292 <_dtoa_r+0x4ca>
 800819c:	9b04      	ldr	r3, [sp, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dd36      	ble.n	8008210 <_dtoa_r+0x448>
 80081a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081a6:	2200      	movs	r2, #0
 80081a8:	4b8c      	ldr	r3, [pc, #560]	; (80083dc <_dtoa_r+0x614>)
 80081aa:	f7f8 f995 	bl	80004d8 <__aeabi_dmul>
 80081ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081b2:	9e04      	ldr	r6, [sp, #16]
 80081b4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80081b8:	3501      	adds	r5, #1
 80081ba:	4628      	mov	r0, r5
 80081bc:	f7f8 f922 	bl	8000404 <__aeabi_i2d>
 80081c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081c4:	f7f8 f988 	bl	80004d8 <__aeabi_dmul>
 80081c8:	2200      	movs	r2, #0
 80081ca:	4b85      	ldr	r3, [pc, #532]	; (80083e0 <_dtoa_r+0x618>)
 80081cc:	f7f7 ffce 	bl	800016c <__adddf3>
 80081d0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80081d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80081d8:	950b      	str	r5, [sp, #44]	; 0x2c
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d15c      	bne.n	8008298 <_dtoa_r+0x4d0>
 80081de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e2:	2200      	movs	r2, #0
 80081e4:	4b7f      	ldr	r3, [pc, #508]	; (80083e4 <_dtoa_r+0x61c>)
 80081e6:	f7f7 ffbf 	bl	8000168 <__aeabi_dsub>
 80081ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ec:	462b      	mov	r3, r5
 80081ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081f2:	f7f8 fc01 	bl	80009f8 <__aeabi_dcmpgt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f040 8281 	bne.w	80086fe <_dtoa_r+0x936>
 80081fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008202:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008206:	f7f8 fbd9 	bl	80009bc <__aeabi_dcmplt>
 800820a:	2800      	cmp	r0, #0
 800820c:	f040 8275 	bne.w	80086fa <_dtoa_r+0x932>
 8008210:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800821a:	2b00      	cmp	r3, #0
 800821c:	f2c0 814b 	blt.w	80084b6 <_dtoa_r+0x6ee>
 8008220:	f1ba 0f0e 	cmp.w	sl, #14
 8008224:	f300 8147 	bgt.w	80084b6 <_dtoa_r+0x6ee>
 8008228:	4b69      	ldr	r3, [pc, #420]	; (80083d0 <_dtoa_r+0x608>)
 800822a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008236:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008238:	2b00      	cmp	r3, #0
 800823a:	f280 80d7 	bge.w	80083ec <_dtoa_r+0x624>
 800823e:	f1b8 0f00 	cmp.w	r8, #0
 8008242:	f300 80d3 	bgt.w	80083ec <_dtoa_r+0x624>
 8008246:	f040 8257 	bne.w	80086f8 <_dtoa_r+0x930>
 800824a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800824e:	2200      	movs	r2, #0
 8008250:	4b64      	ldr	r3, [pc, #400]	; (80083e4 <_dtoa_r+0x61c>)
 8008252:	f7f8 f941 	bl	80004d8 <__aeabi_dmul>
 8008256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800825a:	f7f8 fbc3 	bl	80009e4 <__aeabi_dcmpge>
 800825e:	4646      	mov	r6, r8
 8008260:	4647      	mov	r7, r8
 8008262:	2800      	cmp	r0, #0
 8008264:	f040 822d 	bne.w	80086c2 <_dtoa_r+0x8fa>
 8008268:	9b06      	ldr	r3, [sp, #24]
 800826a:	9a06      	ldr	r2, [sp, #24]
 800826c:	1c5d      	adds	r5, r3, #1
 800826e:	2331      	movs	r3, #49	; 0x31
 8008270:	f10a 0a01 	add.w	sl, sl, #1
 8008274:	7013      	strb	r3, [r2, #0]
 8008276:	e228      	b.n	80086ca <_dtoa_r+0x902>
 8008278:	07f2      	lsls	r2, r6, #31
 800827a:	d505      	bpl.n	8008288 <_dtoa_r+0x4c0>
 800827c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008280:	f7f8 f92a 	bl	80004d8 <__aeabi_dmul>
 8008284:	2301      	movs	r3, #1
 8008286:	3501      	adds	r5, #1
 8008288:	1076      	asrs	r6, r6, #1
 800828a:	3708      	adds	r7, #8
 800828c:	e76e      	b.n	800816c <_dtoa_r+0x3a4>
 800828e:	2502      	movs	r5, #2
 8008290:	e771      	b.n	8008176 <_dtoa_r+0x3ae>
 8008292:	4657      	mov	r7, sl
 8008294:	4646      	mov	r6, r8
 8008296:	e790      	b.n	80081ba <_dtoa_r+0x3f2>
 8008298:	4b4d      	ldr	r3, [pc, #308]	; (80083d0 <_dtoa_r+0x608>)
 800829a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800829e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80082a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d048      	beq.n	800833a <_dtoa_r+0x572>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	2000      	movs	r0, #0
 80082ae:	494e      	ldr	r1, [pc, #312]	; (80083e8 <_dtoa_r+0x620>)
 80082b0:	f7f8 fa3c 	bl	800072c <__aeabi_ddiv>
 80082b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082b8:	f7f7 ff56 	bl	8000168 <__aeabi_dsub>
 80082bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80082c0:	9d06      	ldr	r5, [sp, #24]
 80082c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c6:	f7f8 fbb7 	bl	8000a38 <__aeabi_d2iz>
 80082ca:	9011      	str	r0, [sp, #68]	; 0x44
 80082cc:	f7f8 f89a 	bl	8000404 <__aeabi_i2d>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d8:	f7f7 ff46 	bl	8000168 <__aeabi_dsub>
 80082dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082e2:	3330      	adds	r3, #48	; 0x30
 80082e4:	f805 3b01 	strb.w	r3, [r5], #1
 80082e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082ec:	f7f8 fb66 	bl	80009bc <__aeabi_dcmplt>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d163      	bne.n	80083bc <_dtoa_r+0x5f4>
 80082f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082f8:	2000      	movs	r0, #0
 80082fa:	4937      	ldr	r1, [pc, #220]	; (80083d8 <_dtoa_r+0x610>)
 80082fc:	f7f7 ff34 	bl	8000168 <__aeabi_dsub>
 8008300:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008304:	f7f8 fb5a 	bl	80009bc <__aeabi_dcmplt>
 8008308:	2800      	cmp	r0, #0
 800830a:	f040 80b5 	bne.w	8008478 <_dtoa_r+0x6b0>
 800830e:	9b06      	ldr	r3, [sp, #24]
 8008310:	1aeb      	subs	r3, r5, r3
 8008312:	429e      	cmp	r6, r3
 8008314:	f77f af7c 	ble.w	8008210 <_dtoa_r+0x448>
 8008318:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800831c:	2200      	movs	r2, #0
 800831e:	4b2f      	ldr	r3, [pc, #188]	; (80083dc <_dtoa_r+0x614>)
 8008320:	f7f8 f8da 	bl	80004d8 <__aeabi_dmul>
 8008324:	2200      	movs	r2, #0
 8008326:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800832a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800832e:	4b2b      	ldr	r3, [pc, #172]	; (80083dc <_dtoa_r+0x614>)
 8008330:	f7f8 f8d2 	bl	80004d8 <__aeabi_dmul>
 8008334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008338:	e7c3      	b.n	80082c2 <_dtoa_r+0x4fa>
 800833a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800833e:	f7f8 f8cb 	bl	80004d8 <__aeabi_dmul>
 8008342:	9b06      	ldr	r3, [sp, #24]
 8008344:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008348:	199d      	adds	r5, r3, r6
 800834a:	461e      	mov	r6, r3
 800834c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008350:	f7f8 fb72 	bl	8000a38 <__aeabi_d2iz>
 8008354:	9011      	str	r0, [sp, #68]	; 0x44
 8008356:	f7f8 f855 	bl	8000404 <__aeabi_i2d>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008362:	f7f7 ff01 	bl	8000168 <__aeabi_dsub>
 8008366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800836c:	3330      	adds	r3, #48	; 0x30
 800836e:	f806 3b01 	strb.w	r3, [r6], #1
 8008372:	42ae      	cmp	r6, r5
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	d124      	bne.n	80083c4 <_dtoa_r+0x5fc>
 800837a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800837e:	4b1a      	ldr	r3, [pc, #104]	; (80083e8 <_dtoa_r+0x620>)
 8008380:	f7f7 fef4 	bl	800016c <__adddf3>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800838c:	f7f8 fb34 	bl	80009f8 <__aeabi_dcmpgt>
 8008390:	2800      	cmp	r0, #0
 8008392:	d171      	bne.n	8008478 <_dtoa_r+0x6b0>
 8008394:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008398:	2000      	movs	r0, #0
 800839a:	4913      	ldr	r1, [pc, #76]	; (80083e8 <_dtoa_r+0x620>)
 800839c:	f7f7 fee4 	bl	8000168 <__aeabi_dsub>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083a8:	f7f8 fb08 	bl	80009bc <__aeabi_dcmplt>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	f43f af2f 	beq.w	8008210 <_dtoa_r+0x448>
 80083b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083b6:	1e6a      	subs	r2, r5, #1
 80083b8:	2b30      	cmp	r3, #48	; 0x30
 80083ba:	d001      	beq.n	80083c0 <_dtoa_r+0x5f8>
 80083bc:	46ba      	mov	sl, r7
 80083be:	e04a      	b.n	8008456 <_dtoa_r+0x68e>
 80083c0:	4615      	mov	r5, r2
 80083c2:	e7f6      	b.n	80083b2 <_dtoa_r+0x5ea>
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <_dtoa_r+0x614>)
 80083c6:	f7f8 f887 	bl	80004d8 <__aeabi_dmul>
 80083ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083ce:	e7bd      	b.n	800834c <_dtoa_r+0x584>
 80083d0:	0800b9b0 	.word	0x0800b9b0
 80083d4:	0800b988 	.word	0x0800b988
 80083d8:	3ff00000 	.word	0x3ff00000
 80083dc:	40240000 	.word	0x40240000
 80083e0:	401c0000 	.word	0x401c0000
 80083e4:	40140000 	.word	0x40140000
 80083e8:	3fe00000 	.word	0x3fe00000
 80083ec:	9d06      	ldr	r5, [sp, #24]
 80083ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083f6:	4630      	mov	r0, r6
 80083f8:	4639      	mov	r1, r7
 80083fa:	f7f8 f997 	bl	800072c <__aeabi_ddiv>
 80083fe:	f7f8 fb1b 	bl	8000a38 <__aeabi_d2iz>
 8008402:	4681      	mov	r9, r0
 8008404:	f7f7 fffe 	bl	8000404 <__aeabi_i2d>
 8008408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800840c:	f7f8 f864 	bl	80004d8 <__aeabi_dmul>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4630      	mov	r0, r6
 8008416:	4639      	mov	r1, r7
 8008418:	f7f7 fea6 	bl	8000168 <__aeabi_dsub>
 800841c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008420:	f805 6b01 	strb.w	r6, [r5], #1
 8008424:	9e06      	ldr	r6, [sp, #24]
 8008426:	4602      	mov	r2, r0
 8008428:	1bae      	subs	r6, r5, r6
 800842a:	45b0      	cmp	r8, r6
 800842c:	460b      	mov	r3, r1
 800842e:	d135      	bne.n	800849c <_dtoa_r+0x6d4>
 8008430:	f7f7 fe9c 	bl	800016c <__adddf3>
 8008434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008438:	4606      	mov	r6, r0
 800843a:	460f      	mov	r7, r1
 800843c:	f7f8 fadc 	bl	80009f8 <__aeabi_dcmpgt>
 8008440:	b9c8      	cbnz	r0, 8008476 <_dtoa_r+0x6ae>
 8008442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008446:	4630      	mov	r0, r6
 8008448:	4639      	mov	r1, r7
 800844a:	f7f8 faad 	bl	80009a8 <__aeabi_dcmpeq>
 800844e:	b110      	cbz	r0, 8008456 <_dtoa_r+0x68e>
 8008450:	f019 0f01 	tst.w	r9, #1
 8008454:	d10f      	bne.n	8008476 <_dtoa_r+0x6ae>
 8008456:	4659      	mov	r1, fp
 8008458:	4620      	mov	r0, r4
 800845a:	f000 fe0c 	bl	8009076 <_Bfree>
 800845e:	2300      	movs	r3, #0
 8008460:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008462:	702b      	strb	r3, [r5, #0]
 8008464:	f10a 0301 	add.w	r3, sl, #1
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800846c:	2b00      	cmp	r3, #0
 800846e:	f43f acf3 	beq.w	8007e58 <_dtoa_r+0x90>
 8008472:	601d      	str	r5, [r3, #0]
 8008474:	e4f0      	b.n	8007e58 <_dtoa_r+0x90>
 8008476:	4657      	mov	r7, sl
 8008478:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800847c:	1e6b      	subs	r3, r5, #1
 800847e:	2a39      	cmp	r2, #57	; 0x39
 8008480:	d106      	bne.n	8008490 <_dtoa_r+0x6c8>
 8008482:	9a06      	ldr	r2, [sp, #24]
 8008484:	429a      	cmp	r2, r3
 8008486:	d107      	bne.n	8008498 <_dtoa_r+0x6d0>
 8008488:	2330      	movs	r3, #48	; 0x30
 800848a:	7013      	strb	r3, [r2, #0]
 800848c:	4613      	mov	r3, r2
 800848e:	3701      	adds	r7, #1
 8008490:	781a      	ldrb	r2, [r3, #0]
 8008492:	3201      	adds	r2, #1
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	e791      	b.n	80083bc <_dtoa_r+0x5f4>
 8008498:	461d      	mov	r5, r3
 800849a:	e7ed      	b.n	8008478 <_dtoa_r+0x6b0>
 800849c:	2200      	movs	r2, #0
 800849e:	4b99      	ldr	r3, [pc, #612]	; (8008704 <_dtoa_r+0x93c>)
 80084a0:	f7f8 f81a 	bl	80004d8 <__aeabi_dmul>
 80084a4:	2200      	movs	r2, #0
 80084a6:	2300      	movs	r3, #0
 80084a8:	4606      	mov	r6, r0
 80084aa:	460f      	mov	r7, r1
 80084ac:	f7f8 fa7c 	bl	80009a8 <__aeabi_dcmpeq>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d09e      	beq.n	80083f2 <_dtoa_r+0x62a>
 80084b4:	e7cf      	b.n	8008456 <_dtoa_r+0x68e>
 80084b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b8:	2a00      	cmp	r2, #0
 80084ba:	f000 8088 	beq.w	80085ce <_dtoa_r+0x806>
 80084be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084c0:	2a01      	cmp	r2, #1
 80084c2:	dc6d      	bgt.n	80085a0 <_dtoa_r+0x7d8>
 80084c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	d066      	beq.n	8008598 <_dtoa_r+0x7d0>
 80084ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084ce:	464d      	mov	r5, r9
 80084d0:	9e08      	ldr	r6, [sp, #32]
 80084d2:	9a07      	ldr	r2, [sp, #28]
 80084d4:	2101      	movs	r1, #1
 80084d6:	441a      	add	r2, r3
 80084d8:	4620      	mov	r0, r4
 80084da:	4499      	add	r9, r3
 80084dc:	9207      	str	r2, [sp, #28]
 80084de:	f000 fea8 	bl	8009232 <__i2b>
 80084e2:	4607      	mov	r7, r0
 80084e4:	2d00      	cmp	r5, #0
 80084e6:	dd0b      	ble.n	8008500 <_dtoa_r+0x738>
 80084e8:	9b07      	ldr	r3, [sp, #28]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd08      	ble.n	8008500 <_dtoa_r+0x738>
 80084ee:	42ab      	cmp	r3, r5
 80084f0:	bfa8      	it	ge
 80084f2:	462b      	movge	r3, r5
 80084f4:	9a07      	ldr	r2, [sp, #28]
 80084f6:	eba9 0903 	sub.w	r9, r9, r3
 80084fa:	1aed      	subs	r5, r5, r3
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	9307      	str	r3, [sp, #28]
 8008500:	9b08      	ldr	r3, [sp, #32]
 8008502:	b1eb      	cbz	r3, 8008540 <_dtoa_r+0x778>
 8008504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d065      	beq.n	80085d6 <_dtoa_r+0x80e>
 800850a:	b18e      	cbz	r6, 8008530 <_dtoa_r+0x768>
 800850c:	4639      	mov	r1, r7
 800850e:	4632      	mov	r2, r6
 8008510:	4620      	mov	r0, r4
 8008512:	f000 ff2d 	bl	8009370 <__pow5mult>
 8008516:	465a      	mov	r2, fp
 8008518:	4601      	mov	r1, r0
 800851a:	4607      	mov	r7, r0
 800851c:	4620      	mov	r0, r4
 800851e:	f000 fe91 	bl	8009244 <__multiply>
 8008522:	4659      	mov	r1, fp
 8008524:	900a      	str	r0, [sp, #40]	; 0x28
 8008526:	4620      	mov	r0, r4
 8008528:	f000 fda5 	bl	8009076 <_Bfree>
 800852c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852e:	469b      	mov	fp, r3
 8008530:	9b08      	ldr	r3, [sp, #32]
 8008532:	1b9a      	subs	r2, r3, r6
 8008534:	d004      	beq.n	8008540 <_dtoa_r+0x778>
 8008536:	4659      	mov	r1, fp
 8008538:	4620      	mov	r0, r4
 800853a:	f000 ff19 	bl	8009370 <__pow5mult>
 800853e:	4683      	mov	fp, r0
 8008540:	2101      	movs	r1, #1
 8008542:	4620      	mov	r0, r4
 8008544:	f000 fe75 	bl	8009232 <__i2b>
 8008548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800854a:	4606      	mov	r6, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 81c6 	beq.w	80088de <_dtoa_r+0xb16>
 8008552:	461a      	mov	r2, r3
 8008554:	4601      	mov	r1, r0
 8008556:	4620      	mov	r0, r4
 8008558:	f000 ff0a 	bl	8009370 <__pow5mult>
 800855c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800855e:	4606      	mov	r6, r0
 8008560:	2b01      	cmp	r3, #1
 8008562:	dc3e      	bgt.n	80085e2 <_dtoa_r+0x81a>
 8008564:	9b02      	ldr	r3, [sp, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d137      	bne.n	80085da <_dtoa_r+0x812>
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008570:	2b00      	cmp	r3, #0
 8008572:	d134      	bne.n	80085de <_dtoa_r+0x816>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800857a:	0d1b      	lsrs	r3, r3, #20
 800857c:	051b      	lsls	r3, r3, #20
 800857e:	b12b      	cbz	r3, 800858c <_dtoa_r+0x7c4>
 8008580:	9b07      	ldr	r3, [sp, #28]
 8008582:	f109 0901 	add.w	r9, r9, #1
 8008586:	3301      	adds	r3, #1
 8008588:	9307      	str	r3, [sp, #28]
 800858a:	2301      	movs	r3, #1
 800858c:	9308      	str	r3, [sp, #32]
 800858e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008590:	2b00      	cmp	r3, #0
 8008592:	d128      	bne.n	80085e6 <_dtoa_r+0x81e>
 8008594:	2001      	movs	r0, #1
 8008596:	e02e      	b.n	80085f6 <_dtoa_r+0x82e>
 8008598:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800859a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800859e:	e796      	b.n	80084ce <_dtoa_r+0x706>
 80085a0:	9b08      	ldr	r3, [sp, #32]
 80085a2:	f108 36ff 	add.w	r6, r8, #4294967295
 80085a6:	42b3      	cmp	r3, r6
 80085a8:	bfb7      	itett	lt
 80085aa:	9b08      	ldrlt	r3, [sp, #32]
 80085ac:	1b9e      	subge	r6, r3, r6
 80085ae:	1af2      	sublt	r2, r6, r3
 80085b0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80085b2:	bfbf      	itttt	lt
 80085b4:	9608      	strlt	r6, [sp, #32]
 80085b6:	189b      	addlt	r3, r3, r2
 80085b8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80085ba:	2600      	movlt	r6, #0
 80085bc:	f1b8 0f00 	cmp.w	r8, #0
 80085c0:	bfb9      	ittee	lt
 80085c2:	eba9 0508 	sublt.w	r5, r9, r8
 80085c6:	2300      	movlt	r3, #0
 80085c8:	464d      	movge	r5, r9
 80085ca:	4643      	movge	r3, r8
 80085cc:	e781      	b.n	80084d2 <_dtoa_r+0x70a>
 80085ce:	9e08      	ldr	r6, [sp, #32]
 80085d0:	464d      	mov	r5, r9
 80085d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80085d4:	e786      	b.n	80084e4 <_dtoa_r+0x71c>
 80085d6:	9a08      	ldr	r2, [sp, #32]
 80085d8:	e7ad      	b.n	8008536 <_dtoa_r+0x76e>
 80085da:	2300      	movs	r3, #0
 80085dc:	e7d6      	b.n	800858c <_dtoa_r+0x7c4>
 80085de:	9b02      	ldr	r3, [sp, #8]
 80085e0:	e7d4      	b.n	800858c <_dtoa_r+0x7c4>
 80085e2:	2300      	movs	r3, #0
 80085e4:	9308      	str	r3, [sp, #32]
 80085e6:	6933      	ldr	r3, [r6, #16]
 80085e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80085ec:	6918      	ldr	r0, [r3, #16]
 80085ee:	f000 fdd2 	bl	8009196 <__hi0bits>
 80085f2:	f1c0 0020 	rsb	r0, r0, #32
 80085f6:	9b07      	ldr	r3, [sp, #28]
 80085f8:	4418      	add	r0, r3
 80085fa:	f010 001f 	ands.w	r0, r0, #31
 80085fe:	d047      	beq.n	8008690 <_dtoa_r+0x8c8>
 8008600:	f1c0 0320 	rsb	r3, r0, #32
 8008604:	2b04      	cmp	r3, #4
 8008606:	dd3b      	ble.n	8008680 <_dtoa_r+0x8b8>
 8008608:	9b07      	ldr	r3, [sp, #28]
 800860a:	f1c0 001c 	rsb	r0, r0, #28
 800860e:	4481      	add	r9, r0
 8008610:	4405      	add	r5, r0
 8008612:	4403      	add	r3, r0
 8008614:	9307      	str	r3, [sp, #28]
 8008616:	f1b9 0f00 	cmp.w	r9, #0
 800861a:	dd05      	ble.n	8008628 <_dtoa_r+0x860>
 800861c:	4659      	mov	r1, fp
 800861e:	464a      	mov	r2, r9
 8008620:	4620      	mov	r0, r4
 8008622:	f000 fef3 	bl	800940c <__lshift>
 8008626:	4683      	mov	fp, r0
 8008628:	9b07      	ldr	r3, [sp, #28]
 800862a:	2b00      	cmp	r3, #0
 800862c:	dd05      	ble.n	800863a <_dtoa_r+0x872>
 800862e:	4631      	mov	r1, r6
 8008630:	461a      	mov	r2, r3
 8008632:	4620      	mov	r0, r4
 8008634:	f000 feea 	bl	800940c <__lshift>
 8008638:	4606      	mov	r6, r0
 800863a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800863c:	b353      	cbz	r3, 8008694 <_dtoa_r+0x8cc>
 800863e:	4631      	mov	r1, r6
 8008640:	4658      	mov	r0, fp
 8008642:	f000 ff37 	bl	80094b4 <__mcmp>
 8008646:	2800      	cmp	r0, #0
 8008648:	da24      	bge.n	8008694 <_dtoa_r+0x8cc>
 800864a:	2300      	movs	r3, #0
 800864c:	4659      	mov	r1, fp
 800864e:	220a      	movs	r2, #10
 8008650:	4620      	mov	r0, r4
 8008652:	f000 fd27 	bl	80090a4 <__multadd>
 8008656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008658:	f10a 3aff 	add.w	sl, sl, #4294967295
 800865c:	4683      	mov	fp, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 8144 	beq.w	80088ec <_dtoa_r+0xb24>
 8008664:	2300      	movs	r3, #0
 8008666:	4639      	mov	r1, r7
 8008668:	220a      	movs	r2, #10
 800866a:	4620      	mov	r0, r4
 800866c:	f000 fd1a 	bl	80090a4 <__multadd>
 8008670:	9b04      	ldr	r3, [sp, #16]
 8008672:	4607      	mov	r7, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	dc4d      	bgt.n	8008714 <_dtoa_r+0x94c>
 8008678:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800867a:	2b02      	cmp	r3, #2
 800867c:	dd4a      	ble.n	8008714 <_dtoa_r+0x94c>
 800867e:	e011      	b.n	80086a4 <_dtoa_r+0x8dc>
 8008680:	d0c9      	beq.n	8008616 <_dtoa_r+0x84e>
 8008682:	9a07      	ldr	r2, [sp, #28]
 8008684:	331c      	adds	r3, #28
 8008686:	441a      	add	r2, r3
 8008688:	4499      	add	r9, r3
 800868a:	441d      	add	r5, r3
 800868c:	4613      	mov	r3, r2
 800868e:	e7c1      	b.n	8008614 <_dtoa_r+0x84c>
 8008690:	4603      	mov	r3, r0
 8008692:	e7f6      	b.n	8008682 <_dtoa_r+0x8ba>
 8008694:	f1b8 0f00 	cmp.w	r8, #0
 8008698:	dc36      	bgt.n	8008708 <_dtoa_r+0x940>
 800869a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800869c:	2b02      	cmp	r3, #2
 800869e:	dd33      	ble.n	8008708 <_dtoa_r+0x940>
 80086a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80086a4:	9b04      	ldr	r3, [sp, #16]
 80086a6:	b963      	cbnz	r3, 80086c2 <_dtoa_r+0x8fa>
 80086a8:	4631      	mov	r1, r6
 80086aa:	2205      	movs	r2, #5
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fcf9 	bl	80090a4 <__multadd>
 80086b2:	4601      	mov	r1, r0
 80086b4:	4606      	mov	r6, r0
 80086b6:	4658      	mov	r0, fp
 80086b8:	f000 fefc 	bl	80094b4 <__mcmp>
 80086bc:	2800      	cmp	r0, #0
 80086be:	f73f add3 	bgt.w	8008268 <_dtoa_r+0x4a0>
 80086c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086c4:	9d06      	ldr	r5, [sp, #24]
 80086c6:	ea6f 0a03 	mvn.w	sl, r3
 80086ca:	f04f 0900 	mov.w	r9, #0
 80086ce:	4631      	mov	r1, r6
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fcd0 	bl	8009076 <_Bfree>
 80086d6:	2f00      	cmp	r7, #0
 80086d8:	f43f aebd 	beq.w	8008456 <_dtoa_r+0x68e>
 80086dc:	f1b9 0f00 	cmp.w	r9, #0
 80086e0:	d005      	beq.n	80086ee <_dtoa_r+0x926>
 80086e2:	45b9      	cmp	r9, r7
 80086e4:	d003      	beq.n	80086ee <_dtoa_r+0x926>
 80086e6:	4649      	mov	r1, r9
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 fcc4 	bl	8009076 <_Bfree>
 80086ee:	4639      	mov	r1, r7
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 fcc0 	bl	8009076 <_Bfree>
 80086f6:	e6ae      	b.n	8008456 <_dtoa_r+0x68e>
 80086f8:	2600      	movs	r6, #0
 80086fa:	4637      	mov	r7, r6
 80086fc:	e7e1      	b.n	80086c2 <_dtoa_r+0x8fa>
 80086fe:	46ba      	mov	sl, r7
 8008700:	4637      	mov	r7, r6
 8008702:	e5b1      	b.n	8008268 <_dtoa_r+0x4a0>
 8008704:	40240000 	.word	0x40240000
 8008708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870a:	f8cd 8010 	str.w	r8, [sp, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80f3 	beq.w	80088fa <_dtoa_r+0xb32>
 8008714:	2d00      	cmp	r5, #0
 8008716:	dd05      	ble.n	8008724 <_dtoa_r+0x95c>
 8008718:	4639      	mov	r1, r7
 800871a:	462a      	mov	r2, r5
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fe75 	bl	800940c <__lshift>
 8008722:	4607      	mov	r7, r0
 8008724:	9b08      	ldr	r3, [sp, #32]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d04c      	beq.n	80087c4 <_dtoa_r+0x9fc>
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4620      	mov	r0, r4
 800872e:	f000 fc6e 	bl	800900e <_Balloc>
 8008732:	4605      	mov	r5, r0
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	f107 010c 	add.w	r1, r7, #12
 800873a:	3202      	adds	r2, #2
 800873c:	0092      	lsls	r2, r2, #2
 800873e:	300c      	adds	r0, #12
 8008740:	f000 fc5a 	bl	8008ff8 <memcpy>
 8008744:	2201      	movs	r2, #1
 8008746:	4629      	mov	r1, r5
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fe5f 	bl	800940c <__lshift>
 800874e:	46b9      	mov	r9, r7
 8008750:	4607      	mov	r7, r0
 8008752:	9b06      	ldr	r3, [sp, #24]
 8008754:	9307      	str	r3, [sp, #28]
 8008756:	9b02      	ldr	r3, [sp, #8]
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	9308      	str	r3, [sp, #32]
 800875e:	4631      	mov	r1, r6
 8008760:	4658      	mov	r0, fp
 8008762:	f7ff faa3 	bl	8007cac <quorem>
 8008766:	4649      	mov	r1, r9
 8008768:	4605      	mov	r5, r0
 800876a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800876e:	4658      	mov	r0, fp
 8008770:	f000 fea0 	bl	80094b4 <__mcmp>
 8008774:	463a      	mov	r2, r7
 8008776:	9002      	str	r0, [sp, #8]
 8008778:	4631      	mov	r1, r6
 800877a:	4620      	mov	r0, r4
 800877c:	f000 feb4 	bl	80094e8 <__mdiff>
 8008780:	68c3      	ldr	r3, [r0, #12]
 8008782:	4602      	mov	r2, r0
 8008784:	bb03      	cbnz	r3, 80087c8 <_dtoa_r+0xa00>
 8008786:	4601      	mov	r1, r0
 8008788:	9009      	str	r0, [sp, #36]	; 0x24
 800878a:	4658      	mov	r0, fp
 800878c:	f000 fe92 	bl	80094b4 <__mcmp>
 8008790:	4603      	mov	r3, r0
 8008792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008794:	4611      	mov	r1, r2
 8008796:	4620      	mov	r0, r4
 8008798:	9309      	str	r3, [sp, #36]	; 0x24
 800879a:	f000 fc6c 	bl	8009076 <_Bfree>
 800879e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a0:	b9a3      	cbnz	r3, 80087cc <_dtoa_r+0xa04>
 80087a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80087a4:	b992      	cbnz	r2, 80087cc <_dtoa_r+0xa04>
 80087a6:	9a08      	ldr	r2, [sp, #32]
 80087a8:	b982      	cbnz	r2, 80087cc <_dtoa_r+0xa04>
 80087aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087ae:	d029      	beq.n	8008804 <_dtoa_r+0xa3c>
 80087b0:	9b02      	ldr	r3, [sp, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dd01      	ble.n	80087ba <_dtoa_r+0x9f2>
 80087b6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80087ba:	9b07      	ldr	r3, [sp, #28]
 80087bc:	1c5d      	adds	r5, r3, #1
 80087be:	f883 8000 	strb.w	r8, [r3]
 80087c2:	e784      	b.n	80086ce <_dtoa_r+0x906>
 80087c4:	4638      	mov	r0, r7
 80087c6:	e7c2      	b.n	800874e <_dtoa_r+0x986>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e7e3      	b.n	8008794 <_dtoa_r+0x9cc>
 80087cc:	9a02      	ldr	r2, [sp, #8]
 80087ce:	2a00      	cmp	r2, #0
 80087d0:	db04      	blt.n	80087dc <_dtoa_r+0xa14>
 80087d2:	d123      	bne.n	800881c <_dtoa_r+0xa54>
 80087d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80087d6:	bb0a      	cbnz	r2, 800881c <_dtoa_r+0xa54>
 80087d8:	9a08      	ldr	r2, [sp, #32]
 80087da:	b9fa      	cbnz	r2, 800881c <_dtoa_r+0xa54>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	ddec      	ble.n	80087ba <_dtoa_r+0x9f2>
 80087e0:	4659      	mov	r1, fp
 80087e2:	2201      	movs	r2, #1
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fe11 	bl	800940c <__lshift>
 80087ea:	4631      	mov	r1, r6
 80087ec:	4683      	mov	fp, r0
 80087ee:	f000 fe61 	bl	80094b4 <__mcmp>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	dc03      	bgt.n	80087fe <_dtoa_r+0xa36>
 80087f6:	d1e0      	bne.n	80087ba <_dtoa_r+0x9f2>
 80087f8:	f018 0f01 	tst.w	r8, #1
 80087fc:	d0dd      	beq.n	80087ba <_dtoa_r+0x9f2>
 80087fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008802:	d1d8      	bne.n	80087b6 <_dtoa_r+0x9ee>
 8008804:	9b07      	ldr	r3, [sp, #28]
 8008806:	9a07      	ldr	r2, [sp, #28]
 8008808:	1c5d      	adds	r5, r3, #1
 800880a:	2339      	movs	r3, #57	; 0x39
 800880c:	7013      	strb	r3, [r2, #0]
 800880e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008812:	1e6a      	subs	r2, r5, #1
 8008814:	2b39      	cmp	r3, #57	; 0x39
 8008816:	d04d      	beq.n	80088b4 <_dtoa_r+0xaec>
 8008818:	3301      	adds	r3, #1
 800881a:	e052      	b.n	80088c2 <_dtoa_r+0xafa>
 800881c:	9a07      	ldr	r2, [sp, #28]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f102 0501 	add.w	r5, r2, #1
 8008824:	dd06      	ble.n	8008834 <_dtoa_r+0xa6c>
 8008826:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800882a:	d0eb      	beq.n	8008804 <_dtoa_r+0xa3c>
 800882c:	f108 0801 	add.w	r8, r8, #1
 8008830:	9b07      	ldr	r3, [sp, #28]
 8008832:	e7c4      	b.n	80087be <_dtoa_r+0x9f6>
 8008834:	9b06      	ldr	r3, [sp, #24]
 8008836:	9a04      	ldr	r2, [sp, #16]
 8008838:	1aeb      	subs	r3, r5, r3
 800883a:	4293      	cmp	r3, r2
 800883c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008840:	d021      	beq.n	8008886 <_dtoa_r+0xabe>
 8008842:	4659      	mov	r1, fp
 8008844:	2300      	movs	r3, #0
 8008846:	220a      	movs	r2, #10
 8008848:	4620      	mov	r0, r4
 800884a:	f000 fc2b 	bl	80090a4 <__multadd>
 800884e:	45b9      	cmp	r9, r7
 8008850:	4683      	mov	fp, r0
 8008852:	f04f 0300 	mov.w	r3, #0
 8008856:	f04f 020a 	mov.w	r2, #10
 800885a:	4649      	mov	r1, r9
 800885c:	4620      	mov	r0, r4
 800885e:	d105      	bne.n	800886c <_dtoa_r+0xaa4>
 8008860:	f000 fc20 	bl	80090a4 <__multadd>
 8008864:	4681      	mov	r9, r0
 8008866:	4607      	mov	r7, r0
 8008868:	9507      	str	r5, [sp, #28]
 800886a:	e778      	b.n	800875e <_dtoa_r+0x996>
 800886c:	f000 fc1a 	bl	80090a4 <__multadd>
 8008870:	4639      	mov	r1, r7
 8008872:	4681      	mov	r9, r0
 8008874:	2300      	movs	r3, #0
 8008876:	220a      	movs	r2, #10
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fc13 	bl	80090a4 <__multadd>
 800887e:	4607      	mov	r7, r0
 8008880:	e7f2      	b.n	8008868 <_dtoa_r+0xaa0>
 8008882:	f04f 0900 	mov.w	r9, #0
 8008886:	4659      	mov	r1, fp
 8008888:	2201      	movs	r2, #1
 800888a:	4620      	mov	r0, r4
 800888c:	f000 fdbe 	bl	800940c <__lshift>
 8008890:	4631      	mov	r1, r6
 8008892:	4683      	mov	fp, r0
 8008894:	f000 fe0e 	bl	80094b4 <__mcmp>
 8008898:	2800      	cmp	r0, #0
 800889a:	dcb8      	bgt.n	800880e <_dtoa_r+0xa46>
 800889c:	d102      	bne.n	80088a4 <_dtoa_r+0xadc>
 800889e:	f018 0f01 	tst.w	r8, #1
 80088a2:	d1b4      	bne.n	800880e <_dtoa_r+0xa46>
 80088a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088a8:	1e6a      	subs	r2, r5, #1
 80088aa:	2b30      	cmp	r3, #48	; 0x30
 80088ac:	f47f af0f 	bne.w	80086ce <_dtoa_r+0x906>
 80088b0:	4615      	mov	r5, r2
 80088b2:	e7f7      	b.n	80088a4 <_dtoa_r+0xadc>
 80088b4:	9b06      	ldr	r3, [sp, #24]
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d105      	bne.n	80088c6 <_dtoa_r+0xafe>
 80088ba:	2331      	movs	r3, #49	; 0x31
 80088bc:	9a06      	ldr	r2, [sp, #24]
 80088be:	f10a 0a01 	add.w	sl, sl, #1
 80088c2:	7013      	strb	r3, [r2, #0]
 80088c4:	e703      	b.n	80086ce <_dtoa_r+0x906>
 80088c6:	4615      	mov	r5, r2
 80088c8:	e7a1      	b.n	800880e <_dtoa_r+0xa46>
 80088ca:	4b17      	ldr	r3, [pc, #92]	; (8008928 <_dtoa_r+0xb60>)
 80088cc:	f7ff bae1 	b.w	8007e92 <_dtoa_r+0xca>
 80088d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f47f aabb 	bne.w	8007e4e <_dtoa_r+0x86>
 80088d8:	4b14      	ldr	r3, [pc, #80]	; (800892c <_dtoa_r+0xb64>)
 80088da:	f7ff bada 	b.w	8007e92 <_dtoa_r+0xca>
 80088de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	f77f ae3f 	ble.w	8008564 <_dtoa_r+0x79c>
 80088e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088e8:	9308      	str	r3, [sp, #32]
 80088ea:	e653      	b.n	8008594 <_dtoa_r+0x7cc>
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	dc03      	bgt.n	80088fa <_dtoa_r+0xb32>
 80088f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	f73f aed5 	bgt.w	80086a4 <_dtoa_r+0x8dc>
 80088fa:	9d06      	ldr	r5, [sp, #24]
 80088fc:	4631      	mov	r1, r6
 80088fe:	4658      	mov	r0, fp
 8008900:	f7ff f9d4 	bl	8007cac <quorem>
 8008904:	9b06      	ldr	r3, [sp, #24]
 8008906:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800890a:	f805 8b01 	strb.w	r8, [r5], #1
 800890e:	9a04      	ldr	r2, [sp, #16]
 8008910:	1aeb      	subs	r3, r5, r3
 8008912:	429a      	cmp	r2, r3
 8008914:	ddb5      	ble.n	8008882 <_dtoa_r+0xaba>
 8008916:	4659      	mov	r1, fp
 8008918:	2300      	movs	r3, #0
 800891a:	220a      	movs	r2, #10
 800891c:	4620      	mov	r0, r4
 800891e:	f000 fbc1 	bl	80090a4 <__multadd>
 8008922:	4683      	mov	fp, r0
 8008924:	e7ea      	b.n	80088fc <_dtoa_r+0xb34>
 8008926:	bf00      	nop
 8008928:	0800b8f2 	.word	0x0800b8f2
 800892c:	0800b970 	.word	0x0800b970

08008930 <rshift>:
 8008930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008932:	6906      	ldr	r6, [r0, #16]
 8008934:	114b      	asrs	r3, r1, #5
 8008936:	429e      	cmp	r6, r3
 8008938:	f100 0414 	add.w	r4, r0, #20
 800893c:	dd31      	ble.n	80089a2 <rshift+0x72>
 800893e:	f011 011f 	ands.w	r1, r1, #31
 8008942:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008946:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800894a:	d108      	bne.n	800895e <rshift+0x2e>
 800894c:	4621      	mov	r1, r4
 800894e:	42b2      	cmp	r2, r6
 8008950:	460b      	mov	r3, r1
 8008952:	d211      	bcs.n	8008978 <rshift+0x48>
 8008954:	f852 3b04 	ldr.w	r3, [r2], #4
 8008958:	f841 3b04 	str.w	r3, [r1], #4
 800895c:	e7f7      	b.n	800894e <rshift+0x1e>
 800895e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008962:	4623      	mov	r3, r4
 8008964:	f1c1 0c20 	rsb	ip, r1, #32
 8008968:	40cd      	lsrs	r5, r1
 800896a:	3204      	adds	r2, #4
 800896c:	42b2      	cmp	r2, r6
 800896e:	4617      	mov	r7, r2
 8008970:	d30d      	bcc.n	800898e <rshift+0x5e>
 8008972:	601d      	str	r5, [r3, #0]
 8008974:	b105      	cbz	r5, 8008978 <rshift+0x48>
 8008976:	3304      	adds	r3, #4
 8008978:	42a3      	cmp	r3, r4
 800897a:	eba3 0204 	sub.w	r2, r3, r4
 800897e:	bf08      	it	eq
 8008980:	2300      	moveq	r3, #0
 8008982:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008986:	6102      	str	r2, [r0, #16]
 8008988:	bf08      	it	eq
 800898a:	6143      	streq	r3, [r0, #20]
 800898c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800898e:	683f      	ldr	r7, [r7, #0]
 8008990:	fa07 f70c 	lsl.w	r7, r7, ip
 8008994:	433d      	orrs	r5, r7
 8008996:	f843 5b04 	str.w	r5, [r3], #4
 800899a:	f852 5b04 	ldr.w	r5, [r2], #4
 800899e:	40cd      	lsrs	r5, r1
 80089a0:	e7e4      	b.n	800896c <rshift+0x3c>
 80089a2:	4623      	mov	r3, r4
 80089a4:	e7e8      	b.n	8008978 <rshift+0x48>

080089a6 <__hexdig_fun>:
 80089a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089aa:	2b09      	cmp	r3, #9
 80089ac:	d802      	bhi.n	80089b4 <__hexdig_fun+0xe>
 80089ae:	3820      	subs	r0, #32
 80089b0:	b2c0      	uxtb	r0, r0
 80089b2:	4770      	bx	lr
 80089b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089b8:	2b05      	cmp	r3, #5
 80089ba:	d801      	bhi.n	80089c0 <__hexdig_fun+0x1a>
 80089bc:	3847      	subs	r0, #71	; 0x47
 80089be:	e7f7      	b.n	80089b0 <__hexdig_fun+0xa>
 80089c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089c4:	2b05      	cmp	r3, #5
 80089c6:	d801      	bhi.n	80089cc <__hexdig_fun+0x26>
 80089c8:	3827      	subs	r0, #39	; 0x27
 80089ca:	e7f1      	b.n	80089b0 <__hexdig_fun+0xa>
 80089cc:	2000      	movs	r0, #0
 80089ce:	4770      	bx	lr

080089d0 <__gethex>:
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	b08b      	sub	sp, #44	; 0x2c
 80089d6:	9002      	str	r0, [sp, #8]
 80089d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80089da:	468a      	mov	sl, r1
 80089dc:	4690      	mov	r8, r2
 80089de:	9306      	str	r3, [sp, #24]
 80089e0:	f000 fad1 	bl	8008f86 <__localeconv_l>
 80089e4:	6803      	ldr	r3, [r0, #0]
 80089e6:	f04f 0b00 	mov.w	fp, #0
 80089ea:	4618      	mov	r0, r3
 80089ec:	9303      	str	r3, [sp, #12]
 80089ee:	f7f7 fbaf 	bl	8000150 <strlen>
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	9001      	str	r0, [sp, #4]
 80089f6:	4403      	add	r3, r0
 80089f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80089fc:	9307      	str	r3, [sp, #28]
 80089fe:	f8da 3000 	ldr.w	r3, [sl]
 8008a02:	3302      	adds	r3, #2
 8008a04:	461f      	mov	r7, r3
 8008a06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a0a:	2830      	cmp	r0, #48	; 0x30
 8008a0c:	d06c      	beq.n	8008ae8 <__gethex+0x118>
 8008a0e:	f7ff ffca 	bl	80089a6 <__hexdig_fun>
 8008a12:	4604      	mov	r4, r0
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d16a      	bne.n	8008aee <__gethex+0x11e>
 8008a18:	9a01      	ldr	r2, [sp, #4]
 8008a1a:	9903      	ldr	r1, [sp, #12]
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	f001 f905 	bl	8009c2c <strncmp>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d166      	bne.n	8008af4 <__gethex+0x124>
 8008a26:	9b01      	ldr	r3, [sp, #4]
 8008a28:	5cf8      	ldrb	r0, [r7, r3]
 8008a2a:	18fe      	adds	r6, r7, r3
 8008a2c:	f7ff ffbb 	bl	80089a6 <__hexdig_fun>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d062      	beq.n	8008afa <__gethex+0x12a>
 8008a34:	4633      	mov	r3, r6
 8008a36:	7818      	ldrb	r0, [r3, #0]
 8008a38:	461f      	mov	r7, r3
 8008a3a:	2830      	cmp	r0, #48	; 0x30
 8008a3c:	f103 0301 	add.w	r3, r3, #1
 8008a40:	d0f9      	beq.n	8008a36 <__gethex+0x66>
 8008a42:	f7ff ffb0 	bl	80089a6 <__hexdig_fun>
 8008a46:	fab0 f580 	clz	r5, r0
 8008a4a:	4634      	mov	r4, r6
 8008a4c:	f04f 0b01 	mov.w	fp, #1
 8008a50:	096d      	lsrs	r5, r5, #5
 8008a52:	463a      	mov	r2, r7
 8008a54:	4616      	mov	r6, r2
 8008a56:	7830      	ldrb	r0, [r6, #0]
 8008a58:	3201      	adds	r2, #1
 8008a5a:	f7ff ffa4 	bl	80089a6 <__hexdig_fun>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d1f8      	bne.n	8008a54 <__gethex+0x84>
 8008a62:	9a01      	ldr	r2, [sp, #4]
 8008a64:	9903      	ldr	r1, [sp, #12]
 8008a66:	4630      	mov	r0, r6
 8008a68:	f001 f8e0 	bl	8009c2c <strncmp>
 8008a6c:	b950      	cbnz	r0, 8008a84 <__gethex+0xb4>
 8008a6e:	b954      	cbnz	r4, 8008a86 <__gethex+0xb6>
 8008a70:	9b01      	ldr	r3, [sp, #4]
 8008a72:	18f4      	adds	r4, r6, r3
 8008a74:	4622      	mov	r2, r4
 8008a76:	4616      	mov	r6, r2
 8008a78:	7830      	ldrb	r0, [r6, #0]
 8008a7a:	3201      	adds	r2, #1
 8008a7c:	f7ff ff93 	bl	80089a6 <__hexdig_fun>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d1f8      	bne.n	8008a76 <__gethex+0xa6>
 8008a84:	b10c      	cbz	r4, 8008a8a <__gethex+0xba>
 8008a86:	1ba4      	subs	r4, r4, r6
 8008a88:	00a4      	lsls	r4, r4, #2
 8008a8a:	7833      	ldrb	r3, [r6, #0]
 8008a8c:	2b50      	cmp	r3, #80	; 0x50
 8008a8e:	d001      	beq.n	8008a94 <__gethex+0xc4>
 8008a90:	2b70      	cmp	r3, #112	; 0x70
 8008a92:	d140      	bne.n	8008b16 <__gethex+0x146>
 8008a94:	7873      	ldrb	r3, [r6, #1]
 8008a96:	2b2b      	cmp	r3, #43	; 0x2b
 8008a98:	d031      	beq.n	8008afe <__gethex+0x12e>
 8008a9a:	2b2d      	cmp	r3, #45	; 0x2d
 8008a9c:	d033      	beq.n	8008b06 <__gethex+0x136>
 8008a9e:	f04f 0900 	mov.w	r9, #0
 8008aa2:	1c71      	adds	r1, r6, #1
 8008aa4:	7808      	ldrb	r0, [r1, #0]
 8008aa6:	f7ff ff7e 	bl	80089a6 <__hexdig_fun>
 8008aaa:	1e43      	subs	r3, r0, #1
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b18      	cmp	r3, #24
 8008ab0:	d831      	bhi.n	8008b16 <__gethex+0x146>
 8008ab2:	f1a0 0210 	sub.w	r2, r0, #16
 8008ab6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008aba:	f7ff ff74 	bl	80089a6 <__hexdig_fun>
 8008abe:	1e43      	subs	r3, r0, #1
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b18      	cmp	r3, #24
 8008ac4:	d922      	bls.n	8008b0c <__gethex+0x13c>
 8008ac6:	f1b9 0f00 	cmp.w	r9, #0
 8008aca:	d000      	beq.n	8008ace <__gethex+0xfe>
 8008acc:	4252      	negs	r2, r2
 8008ace:	4414      	add	r4, r2
 8008ad0:	f8ca 1000 	str.w	r1, [sl]
 8008ad4:	b30d      	cbz	r5, 8008b1a <__gethex+0x14a>
 8008ad6:	f1bb 0f00 	cmp.w	fp, #0
 8008ada:	bf0c      	ite	eq
 8008adc:	2706      	moveq	r7, #6
 8008ade:	2700      	movne	r7, #0
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	b00b      	add	sp, #44	; 0x2c
 8008ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	f10b 0b01 	add.w	fp, fp, #1
 8008aec:	e78a      	b.n	8008a04 <__gethex+0x34>
 8008aee:	2500      	movs	r5, #0
 8008af0:	462c      	mov	r4, r5
 8008af2:	e7ae      	b.n	8008a52 <__gethex+0x82>
 8008af4:	463e      	mov	r6, r7
 8008af6:	2501      	movs	r5, #1
 8008af8:	e7c7      	b.n	8008a8a <__gethex+0xba>
 8008afa:	4604      	mov	r4, r0
 8008afc:	e7fb      	b.n	8008af6 <__gethex+0x126>
 8008afe:	f04f 0900 	mov.w	r9, #0
 8008b02:	1cb1      	adds	r1, r6, #2
 8008b04:	e7ce      	b.n	8008aa4 <__gethex+0xd4>
 8008b06:	f04f 0901 	mov.w	r9, #1
 8008b0a:	e7fa      	b.n	8008b02 <__gethex+0x132>
 8008b0c:	230a      	movs	r3, #10
 8008b0e:	fb03 0202 	mla	r2, r3, r2, r0
 8008b12:	3a10      	subs	r2, #16
 8008b14:	e7cf      	b.n	8008ab6 <__gethex+0xe6>
 8008b16:	4631      	mov	r1, r6
 8008b18:	e7da      	b.n	8008ad0 <__gethex+0x100>
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	1bf3      	subs	r3, r6, r7
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	2b07      	cmp	r3, #7
 8008b22:	dc49      	bgt.n	8008bb8 <__gethex+0x1e8>
 8008b24:	9802      	ldr	r0, [sp, #8]
 8008b26:	f000 fa72 	bl	800900e <_Balloc>
 8008b2a:	f04f 0b00 	mov.w	fp, #0
 8008b2e:	4605      	mov	r5, r0
 8008b30:	46da      	mov	sl, fp
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	f100 0914 	add.w	r9, r0, #20
 8008b38:	f1c3 0301 	rsb	r3, r3, #1
 8008b3c:	f8cd 9010 	str.w	r9, [sp, #16]
 8008b40:	9308      	str	r3, [sp, #32]
 8008b42:	42b7      	cmp	r7, r6
 8008b44:	d33b      	bcc.n	8008bbe <__gethex+0x1ee>
 8008b46:	9804      	ldr	r0, [sp, #16]
 8008b48:	f840 ab04 	str.w	sl, [r0], #4
 8008b4c:	eba0 0009 	sub.w	r0, r0, r9
 8008b50:	1080      	asrs	r0, r0, #2
 8008b52:	6128      	str	r0, [r5, #16]
 8008b54:	0147      	lsls	r7, r0, #5
 8008b56:	4650      	mov	r0, sl
 8008b58:	f000 fb1d 	bl	8009196 <__hi0bits>
 8008b5c:	f8d8 6000 	ldr.w	r6, [r8]
 8008b60:	1a3f      	subs	r7, r7, r0
 8008b62:	42b7      	cmp	r7, r6
 8008b64:	dd64      	ble.n	8008c30 <__gethex+0x260>
 8008b66:	1bbf      	subs	r7, r7, r6
 8008b68:	4639      	mov	r1, r7
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 fe27 	bl	80097be <__any_on>
 8008b70:	4682      	mov	sl, r0
 8008b72:	b178      	cbz	r0, 8008b94 <__gethex+0x1c4>
 8008b74:	f04f 0a01 	mov.w	sl, #1
 8008b78:	1e7b      	subs	r3, r7, #1
 8008b7a:	1159      	asrs	r1, r3, #5
 8008b7c:	f003 021f 	and.w	r2, r3, #31
 8008b80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b84:	fa0a f202 	lsl.w	r2, sl, r2
 8008b88:	420a      	tst	r2, r1
 8008b8a:	d003      	beq.n	8008b94 <__gethex+0x1c4>
 8008b8c:	4553      	cmp	r3, sl
 8008b8e:	dc46      	bgt.n	8008c1e <__gethex+0x24e>
 8008b90:	f04f 0a02 	mov.w	sl, #2
 8008b94:	4639      	mov	r1, r7
 8008b96:	4628      	mov	r0, r5
 8008b98:	f7ff feca 	bl	8008930 <rshift>
 8008b9c:	443c      	add	r4, r7
 8008b9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	da52      	bge.n	8008c4c <__gethex+0x27c>
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	9802      	ldr	r0, [sp, #8]
 8008baa:	f000 fa64 	bl	8009076 <_Bfree>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bb2:	27a3      	movs	r7, #163	; 0xa3
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	e793      	b.n	8008ae0 <__gethex+0x110>
 8008bb8:	3101      	adds	r1, #1
 8008bba:	105b      	asrs	r3, r3, #1
 8008bbc:	e7b0      	b.n	8008b20 <__gethex+0x150>
 8008bbe:	1e73      	subs	r3, r6, #1
 8008bc0:	9305      	str	r3, [sp, #20]
 8008bc2:	9a07      	ldr	r2, [sp, #28]
 8008bc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d018      	beq.n	8008bfe <__gethex+0x22e>
 8008bcc:	f1bb 0f20 	cmp.w	fp, #32
 8008bd0:	d107      	bne.n	8008be2 <__gethex+0x212>
 8008bd2:	9b04      	ldr	r3, [sp, #16]
 8008bd4:	f8c3 a000 	str.w	sl, [r3]
 8008bd8:	f04f 0a00 	mov.w	sl, #0
 8008bdc:	46d3      	mov	fp, sl
 8008bde:	3304      	adds	r3, #4
 8008be0:	9304      	str	r3, [sp, #16]
 8008be2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008be6:	f7ff fede 	bl	80089a6 <__hexdig_fun>
 8008bea:	f000 000f 	and.w	r0, r0, #15
 8008bee:	fa00 f00b 	lsl.w	r0, r0, fp
 8008bf2:	ea4a 0a00 	orr.w	sl, sl, r0
 8008bf6:	f10b 0b04 	add.w	fp, fp, #4
 8008bfa:	9b05      	ldr	r3, [sp, #20]
 8008bfc:	e00d      	b.n	8008c1a <__gethex+0x24a>
 8008bfe:	9b05      	ldr	r3, [sp, #20]
 8008c00:	9a08      	ldr	r2, [sp, #32]
 8008c02:	4413      	add	r3, r2
 8008c04:	42bb      	cmp	r3, r7
 8008c06:	d3e1      	bcc.n	8008bcc <__gethex+0x1fc>
 8008c08:	4618      	mov	r0, r3
 8008c0a:	9a01      	ldr	r2, [sp, #4]
 8008c0c:	9903      	ldr	r1, [sp, #12]
 8008c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c10:	f001 f80c 	bl	8009c2c <strncmp>
 8008c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d1d8      	bne.n	8008bcc <__gethex+0x1fc>
 8008c1a:	461e      	mov	r6, r3
 8008c1c:	e791      	b.n	8008b42 <__gethex+0x172>
 8008c1e:	1eb9      	subs	r1, r7, #2
 8008c20:	4628      	mov	r0, r5
 8008c22:	f000 fdcc 	bl	80097be <__any_on>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d0b2      	beq.n	8008b90 <__gethex+0x1c0>
 8008c2a:	f04f 0a03 	mov.w	sl, #3
 8008c2e:	e7b1      	b.n	8008b94 <__gethex+0x1c4>
 8008c30:	da09      	bge.n	8008c46 <__gethex+0x276>
 8008c32:	1bf7      	subs	r7, r6, r7
 8008c34:	4629      	mov	r1, r5
 8008c36:	463a      	mov	r2, r7
 8008c38:	9802      	ldr	r0, [sp, #8]
 8008c3a:	f000 fbe7 	bl	800940c <__lshift>
 8008c3e:	4605      	mov	r5, r0
 8008c40:	1be4      	subs	r4, r4, r7
 8008c42:	f100 0914 	add.w	r9, r0, #20
 8008c46:	f04f 0a00 	mov.w	sl, #0
 8008c4a:	e7a8      	b.n	8008b9e <__gethex+0x1ce>
 8008c4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c50:	42a0      	cmp	r0, r4
 8008c52:	dd6b      	ble.n	8008d2c <__gethex+0x35c>
 8008c54:	1b04      	subs	r4, r0, r4
 8008c56:	42a6      	cmp	r6, r4
 8008c58:	dc2e      	bgt.n	8008cb8 <__gethex+0x2e8>
 8008c5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d022      	beq.n	8008ca8 <__gethex+0x2d8>
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d024      	beq.n	8008cb0 <__gethex+0x2e0>
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d115      	bne.n	8008c96 <__gethex+0x2c6>
 8008c6a:	42a6      	cmp	r6, r4
 8008c6c:	d113      	bne.n	8008c96 <__gethex+0x2c6>
 8008c6e:	2e01      	cmp	r6, #1
 8008c70:	dc0b      	bgt.n	8008c8a <__gethex+0x2ba>
 8008c72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c76:	9a06      	ldr	r2, [sp, #24]
 8008c78:	2762      	movs	r7, #98	; 0x62
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	612b      	str	r3, [r5, #16]
 8008c80:	f8c9 3000 	str.w	r3, [r9]
 8008c84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c86:	601d      	str	r5, [r3, #0]
 8008c88:	e72a      	b.n	8008ae0 <__gethex+0x110>
 8008c8a:	1e71      	subs	r1, r6, #1
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f000 fd96 	bl	80097be <__any_on>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d1ed      	bne.n	8008c72 <__gethex+0x2a2>
 8008c96:	4629      	mov	r1, r5
 8008c98:	9802      	ldr	r0, [sp, #8]
 8008c9a:	f000 f9ec 	bl	8009076 <_Bfree>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ca2:	2750      	movs	r7, #80	; 0x50
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	e71b      	b.n	8008ae0 <__gethex+0x110>
 8008ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0e1      	beq.n	8008c72 <__gethex+0x2a2>
 8008cae:	e7f2      	b.n	8008c96 <__gethex+0x2c6>
 8008cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1dd      	bne.n	8008c72 <__gethex+0x2a2>
 8008cb6:	e7ee      	b.n	8008c96 <__gethex+0x2c6>
 8008cb8:	1e67      	subs	r7, r4, #1
 8008cba:	f1ba 0f00 	cmp.w	sl, #0
 8008cbe:	d132      	bne.n	8008d26 <__gethex+0x356>
 8008cc0:	b127      	cbz	r7, 8008ccc <__gethex+0x2fc>
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f000 fd7a 	bl	80097be <__any_on>
 8008cca:	4682      	mov	sl, r0
 8008ccc:	2301      	movs	r3, #1
 8008cce:	117a      	asrs	r2, r7, #5
 8008cd0:	f007 071f 	and.w	r7, r7, #31
 8008cd4:	fa03 f707 	lsl.w	r7, r3, r7
 8008cd8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008cdc:	4621      	mov	r1, r4
 8008cde:	421f      	tst	r7, r3
 8008ce0:	f04f 0702 	mov.w	r7, #2
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	bf18      	it	ne
 8008ce8:	f04a 0a02 	orrne.w	sl, sl, #2
 8008cec:	1b36      	subs	r6, r6, r4
 8008cee:	f7ff fe1f 	bl	8008930 <rshift>
 8008cf2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008cf6:	f1ba 0f00 	cmp.w	sl, #0
 8008cfa:	d048      	beq.n	8008d8e <__gethex+0x3be>
 8008cfc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d015      	beq.n	8008d30 <__gethex+0x360>
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d017      	beq.n	8008d38 <__gethex+0x368>
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d109      	bne.n	8008d20 <__gethex+0x350>
 8008d0c:	f01a 0f02 	tst.w	sl, #2
 8008d10:	d006      	beq.n	8008d20 <__gethex+0x350>
 8008d12:	f8d9 3000 	ldr.w	r3, [r9]
 8008d16:	ea4a 0a03 	orr.w	sl, sl, r3
 8008d1a:	f01a 0f01 	tst.w	sl, #1
 8008d1e:	d10e      	bne.n	8008d3e <__gethex+0x36e>
 8008d20:	f047 0710 	orr.w	r7, r7, #16
 8008d24:	e033      	b.n	8008d8e <__gethex+0x3be>
 8008d26:	f04f 0a01 	mov.w	sl, #1
 8008d2a:	e7cf      	b.n	8008ccc <__gethex+0x2fc>
 8008d2c:	2701      	movs	r7, #1
 8008d2e:	e7e2      	b.n	8008cf6 <__gethex+0x326>
 8008d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d32:	f1c3 0301 	rsb	r3, r3, #1
 8008d36:	9315      	str	r3, [sp, #84]	; 0x54
 8008d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0f0      	beq.n	8008d20 <__gethex+0x350>
 8008d3e:	f04f 0c00 	mov.w	ip, #0
 8008d42:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008d46:	f105 0314 	add.w	r3, r5, #20
 8008d4a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008d4e:	eb03 010a 	add.w	r1, r3, sl
 8008d52:	4618      	mov	r0, r3
 8008d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d58:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d5c:	d01c      	beq.n	8008d98 <__gethex+0x3c8>
 8008d5e:	3201      	adds	r2, #1
 8008d60:	6002      	str	r2, [r0, #0]
 8008d62:	2f02      	cmp	r7, #2
 8008d64:	f105 0314 	add.w	r3, r5, #20
 8008d68:	d138      	bne.n	8008ddc <__gethex+0x40c>
 8008d6a:	f8d8 2000 	ldr.w	r2, [r8]
 8008d6e:	3a01      	subs	r2, #1
 8008d70:	42b2      	cmp	r2, r6
 8008d72:	d10a      	bne.n	8008d8a <__gethex+0x3ba>
 8008d74:	2201      	movs	r2, #1
 8008d76:	1171      	asrs	r1, r6, #5
 8008d78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d7c:	f006 061f 	and.w	r6, r6, #31
 8008d80:	fa02 f606 	lsl.w	r6, r2, r6
 8008d84:	421e      	tst	r6, r3
 8008d86:	bf18      	it	ne
 8008d88:	4617      	movne	r7, r2
 8008d8a:	f047 0720 	orr.w	r7, r7, #32
 8008d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d90:	601d      	str	r5, [r3, #0]
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	601c      	str	r4, [r3, #0]
 8008d96:	e6a3      	b.n	8008ae0 <__gethex+0x110>
 8008d98:	4299      	cmp	r1, r3
 8008d9a:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d9e:	d8d8      	bhi.n	8008d52 <__gethex+0x382>
 8008da0:	68ab      	ldr	r3, [r5, #8]
 8008da2:	4599      	cmp	r9, r3
 8008da4:	db12      	blt.n	8008dcc <__gethex+0x3fc>
 8008da6:	6869      	ldr	r1, [r5, #4]
 8008da8:	9802      	ldr	r0, [sp, #8]
 8008daa:	3101      	adds	r1, #1
 8008dac:	f000 f92f 	bl	800900e <_Balloc>
 8008db0:	4683      	mov	fp, r0
 8008db2:	692a      	ldr	r2, [r5, #16]
 8008db4:	f105 010c 	add.w	r1, r5, #12
 8008db8:	3202      	adds	r2, #2
 8008dba:	0092      	lsls	r2, r2, #2
 8008dbc:	300c      	adds	r0, #12
 8008dbe:	f000 f91b 	bl	8008ff8 <memcpy>
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	9802      	ldr	r0, [sp, #8]
 8008dc6:	f000 f956 	bl	8009076 <_Bfree>
 8008dca:	465d      	mov	r5, fp
 8008dcc:	692b      	ldr	r3, [r5, #16]
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	612a      	str	r2, [r5, #16]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008dd8:	615a      	str	r2, [r3, #20]
 8008dda:	e7c2      	b.n	8008d62 <__gethex+0x392>
 8008ddc:	692a      	ldr	r2, [r5, #16]
 8008dde:	454a      	cmp	r2, r9
 8008de0:	dd0b      	ble.n	8008dfa <__gethex+0x42a>
 8008de2:	2101      	movs	r1, #1
 8008de4:	4628      	mov	r0, r5
 8008de6:	f7ff fda3 	bl	8008930 <rshift>
 8008dea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dee:	3401      	adds	r4, #1
 8008df0:	42a3      	cmp	r3, r4
 8008df2:	f6ff aed8 	blt.w	8008ba6 <__gethex+0x1d6>
 8008df6:	2701      	movs	r7, #1
 8008df8:	e7c7      	b.n	8008d8a <__gethex+0x3ba>
 8008dfa:	f016 061f 	ands.w	r6, r6, #31
 8008dfe:	d0fa      	beq.n	8008df6 <__gethex+0x426>
 8008e00:	449a      	add	sl, r3
 8008e02:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008e06:	f000 f9c6 	bl	8009196 <__hi0bits>
 8008e0a:	f1c6 0620 	rsb	r6, r6, #32
 8008e0e:	42b0      	cmp	r0, r6
 8008e10:	dbe7      	blt.n	8008de2 <__gethex+0x412>
 8008e12:	e7f0      	b.n	8008df6 <__gethex+0x426>

08008e14 <L_shift>:
 8008e14:	f1c2 0208 	rsb	r2, r2, #8
 8008e18:	0092      	lsls	r2, r2, #2
 8008e1a:	b570      	push	{r4, r5, r6, lr}
 8008e1c:	f1c2 0620 	rsb	r6, r2, #32
 8008e20:	6843      	ldr	r3, [r0, #4]
 8008e22:	6804      	ldr	r4, [r0, #0]
 8008e24:	fa03 f506 	lsl.w	r5, r3, r6
 8008e28:	432c      	orrs	r4, r5
 8008e2a:	40d3      	lsrs	r3, r2
 8008e2c:	6004      	str	r4, [r0, #0]
 8008e2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e32:	4288      	cmp	r0, r1
 8008e34:	d3f4      	bcc.n	8008e20 <L_shift+0xc>
 8008e36:	bd70      	pop	{r4, r5, r6, pc}

08008e38 <__match>:
 8008e38:	b530      	push	{r4, r5, lr}
 8008e3a:	6803      	ldr	r3, [r0, #0]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e42:	b914      	cbnz	r4, 8008e4a <__match+0x12>
 8008e44:	6003      	str	r3, [r0, #0]
 8008e46:	2001      	movs	r0, #1
 8008e48:	bd30      	pop	{r4, r5, pc}
 8008e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e52:	2d19      	cmp	r5, #25
 8008e54:	bf98      	it	ls
 8008e56:	3220      	addls	r2, #32
 8008e58:	42a2      	cmp	r2, r4
 8008e5a:	d0f0      	beq.n	8008e3e <__match+0x6>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e7f3      	b.n	8008e48 <__match+0x10>

08008e60 <__hexnan>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	2500      	movs	r5, #0
 8008e66:	680b      	ldr	r3, [r1, #0]
 8008e68:	4682      	mov	sl, r0
 8008e6a:	115f      	asrs	r7, r3, #5
 8008e6c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008e70:	f013 031f 	ands.w	r3, r3, #31
 8008e74:	bf18      	it	ne
 8008e76:	3704      	addne	r7, #4
 8008e78:	1f3e      	subs	r6, r7, #4
 8008e7a:	4690      	mov	r8, r2
 8008e7c:	46b1      	mov	r9, r6
 8008e7e:	4634      	mov	r4, r6
 8008e80:	46ab      	mov	fp, r5
 8008e82:	b087      	sub	sp, #28
 8008e84:	6801      	ldr	r1, [r0, #0]
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	f847 5c04 	str.w	r5, [r7, #-4]
 8008e8c:	9502      	str	r5, [sp, #8]
 8008e8e:	784a      	ldrb	r2, [r1, #1]
 8008e90:	1c4b      	adds	r3, r1, #1
 8008e92:	9303      	str	r3, [sp, #12]
 8008e94:	b342      	cbz	r2, 8008ee8 <__hexnan+0x88>
 8008e96:	4610      	mov	r0, r2
 8008e98:	9105      	str	r1, [sp, #20]
 8008e9a:	9204      	str	r2, [sp, #16]
 8008e9c:	f7ff fd83 	bl	80089a6 <__hexdig_fun>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d143      	bne.n	8008f2c <__hexnan+0xcc>
 8008ea4:	9a04      	ldr	r2, [sp, #16]
 8008ea6:	9905      	ldr	r1, [sp, #20]
 8008ea8:	2a20      	cmp	r2, #32
 8008eaa:	d818      	bhi.n	8008ede <__hexnan+0x7e>
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	459b      	cmp	fp, r3
 8008eb0:	dd13      	ble.n	8008eda <__hexnan+0x7a>
 8008eb2:	454c      	cmp	r4, r9
 8008eb4:	d206      	bcs.n	8008ec4 <__hexnan+0x64>
 8008eb6:	2d07      	cmp	r5, #7
 8008eb8:	dc04      	bgt.n	8008ec4 <__hexnan+0x64>
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f7ff ffa8 	bl	8008e14 <L_shift>
 8008ec4:	4544      	cmp	r4, r8
 8008ec6:	d944      	bls.n	8008f52 <__hexnan+0xf2>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f1a4 0904 	sub.w	r9, r4, #4
 8008ece:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ed2:	461d      	mov	r5, r3
 8008ed4:	464c      	mov	r4, r9
 8008ed6:	f8cd b008 	str.w	fp, [sp, #8]
 8008eda:	9903      	ldr	r1, [sp, #12]
 8008edc:	e7d7      	b.n	8008e8e <__hexnan+0x2e>
 8008ede:	2a29      	cmp	r2, #41	; 0x29
 8008ee0:	d14a      	bne.n	8008f78 <__hexnan+0x118>
 8008ee2:	3102      	adds	r1, #2
 8008ee4:	f8ca 1000 	str.w	r1, [sl]
 8008ee8:	f1bb 0f00 	cmp.w	fp, #0
 8008eec:	d044      	beq.n	8008f78 <__hexnan+0x118>
 8008eee:	454c      	cmp	r4, r9
 8008ef0:	d206      	bcs.n	8008f00 <__hexnan+0xa0>
 8008ef2:	2d07      	cmp	r5, #7
 8008ef4:	dc04      	bgt.n	8008f00 <__hexnan+0xa0>
 8008ef6:	462a      	mov	r2, r5
 8008ef8:	4649      	mov	r1, r9
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7ff ff8a 	bl	8008e14 <L_shift>
 8008f00:	4544      	cmp	r4, r8
 8008f02:	d928      	bls.n	8008f56 <__hexnan+0xf6>
 8008f04:	4643      	mov	r3, r8
 8008f06:	f854 2b04 	ldr.w	r2, [r4], #4
 8008f0a:	42a6      	cmp	r6, r4
 8008f0c:	f843 2b04 	str.w	r2, [r3], #4
 8008f10:	d2f9      	bcs.n	8008f06 <__hexnan+0xa6>
 8008f12:	2200      	movs	r2, #0
 8008f14:	f843 2b04 	str.w	r2, [r3], #4
 8008f18:	429e      	cmp	r6, r3
 8008f1a:	d2fb      	bcs.n	8008f14 <__hexnan+0xb4>
 8008f1c:	6833      	ldr	r3, [r6, #0]
 8008f1e:	b91b      	cbnz	r3, 8008f28 <__hexnan+0xc8>
 8008f20:	4546      	cmp	r6, r8
 8008f22:	d127      	bne.n	8008f74 <__hexnan+0x114>
 8008f24:	2301      	movs	r3, #1
 8008f26:	6033      	str	r3, [r6, #0]
 8008f28:	2005      	movs	r0, #5
 8008f2a:	e026      	b.n	8008f7a <__hexnan+0x11a>
 8008f2c:	3501      	adds	r5, #1
 8008f2e:	2d08      	cmp	r5, #8
 8008f30:	f10b 0b01 	add.w	fp, fp, #1
 8008f34:	dd06      	ble.n	8008f44 <__hexnan+0xe4>
 8008f36:	4544      	cmp	r4, r8
 8008f38:	d9cf      	bls.n	8008eda <__hexnan+0x7a>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	2501      	movs	r5, #1
 8008f3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f42:	3c04      	subs	r4, #4
 8008f44:	6822      	ldr	r2, [r4, #0]
 8008f46:	f000 000f 	and.w	r0, r0, #15
 8008f4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f4e:	6020      	str	r0, [r4, #0]
 8008f50:	e7c3      	b.n	8008eda <__hexnan+0x7a>
 8008f52:	2508      	movs	r5, #8
 8008f54:	e7c1      	b.n	8008eda <__hexnan+0x7a>
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0df      	beq.n	8008f1c <__hexnan+0xbc>
 8008f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f60:	f1c3 0320 	rsb	r3, r3, #32
 8008f64:	fa22 f303 	lsr.w	r3, r2, r3
 8008f68:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008f6c:	401a      	ands	r2, r3
 8008f6e:	f847 2c04 	str.w	r2, [r7, #-4]
 8008f72:	e7d3      	b.n	8008f1c <__hexnan+0xbc>
 8008f74:	3e04      	subs	r6, #4
 8008f76:	e7d1      	b.n	8008f1c <__hexnan+0xbc>
 8008f78:	2004      	movs	r0, #4
 8008f7a:	b007      	add	sp, #28
 8008f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f80 <__locale_ctype_ptr_l>:
 8008f80:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008f84:	4770      	bx	lr

08008f86 <__localeconv_l>:
 8008f86:	30f0      	adds	r0, #240	; 0xf0
 8008f88:	4770      	bx	lr
	...

08008f8c <_localeconv_r>:
 8008f8c:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <_localeconv_r+0x14>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6a18      	ldr	r0, [r3, #32]
 8008f92:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <_localeconv_r+0x18>)
 8008f94:	2800      	cmp	r0, #0
 8008f96:	bf08      	it	eq
 8008f98:	4618      	moveq	r0, r3
 8008f9a:	30f0      	adds	r0, #240	; 0xf0
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	200001a0 	.word	0x200001a0
 8008fa4:	20000204 	.word	0x20000204

08008fa8 <malloc>:
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <malloc+0xc>)
 8008faa:	4601      	mov	r1, r0
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	f000 bc81 	b.w	80098b4 <_malloc_r>
 8008fb2:	bf00      	nop
 8008fb4:	200001a0 	.word	0x200001a0

08008fb8 <__ascii_mbtowc>:
 8008fb8:	b082      	sub	sp, #8
 8008fba:	b901      	cbnz	r1, 8008fbe <__ascii_mbtowc+0x6>
 8008fbc:	a901      	add	r1, sp, #4
 8008fbe:	b142      	cbz	r2, 8008fd2 <__ascii_mbtowc+0x1a>
 8008fc0:	b14b      	cbz	r3, 8008fd6 <__ascii_mbtowc+0x1e>
 8008fc2:	7813      	ldrb	r3, [r2, #0]
 8008fc4:	600b      	str	r3, [r1, #0]
 8008fc6:	7812      	ldrb	r2, [r2, #0]
 8008fc8:	1c10      	adds	r0, r2, #0
 8008fca:	bf18      	it	ne
 8008fcc:	2001      	movne	r0, #1
 8008fce:	b002      	add	sp, #8
 8008fd0:	4770      	bx	lr
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	e7fb      	b.n	8008fce <__ascii_mbtowc+0x16>
 8008fd6:	f06f 0001 	mvn.w	r0, #1
 8008fda:	e7f8      	b.n	8008fce <__ascii_mbtowc+0x16>

08008fdc <memchr>:
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	b2c9      	uxtb	r1, r1
 8008fe0:	4402      	add	r2, r0
 8008fe2:	4290      	cmp	r0, r2
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	d101      	bne.n	8008fec <memchr+0x10>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e003      	b.n	8008ff4 <memchr+0x18>
 8008fec:	781c      	ldrb	r4, [r3, #0]
 8008fee:	3001      	adds	r0, #1
 8008ff0:	428c      	cmp	r4, r1
 8008ff2:	d1f6      	bne.n	8008fe2 <memchr+0x6>
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	bd10      	pop	{r4, pc}

08008ff8 <memcpy>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	1e43      	subs	r3, r0, #1
 8008ffc:	440a      	add	r2, r1
 8008ffe:	4291      	cmp	r1, r2
 8009000:	d100      	bne.n	8009004 <memcpy+0xc>
 8009002:	bd10      	pop	{r4, pc}
 8009004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800900c:	e7f7      	b.n	8008ffe <memcpy+0x6>

0800900e <_Balloc>:
 800900e:	b570      	push	{r4, r5, r6, lr}
 8009010:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009012:	4604      	mov	r4, r0
 8009014:	460e      	mov	r6, r1
 8009016:	b93d      	cbnz	r5, 8009028 <_Balloc+0x1a>
 8009018:	2010      	movs	r0, #16
 800901a:	f7ff ffc5 	bl	8008fa8 <malloc>
 800901e:	6260      	str	r0, [r4, #36]	; 0x24
 8009020:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009024:	6005      	str	r5, [r0, #0]
 8009026:	60c5      	str	r5, [r0, #12]
 8009028:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800902a:	68eb      	ldr	r3, [r5, #12]
 800902c:	b183      	cbz	r3, 8009050 <_Balloc+0x42>
 800902e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009036:	b9b8      	cbnz	r0, 8009068 <_Balloc+0x5a>
 8009038:	2101      	movs	r1, #1
 800903a:	fa01 f506 	lsl.w	r5, r1, r6
 800903e:	1d6a      	adds	r2, r5, #5
 8009040:	0092      	lsls	r2, r2, #2
 8009042:	4620      	mov	r0, r4
 8009044:	f000 fbdc 	bl	8009800 <_calloc_r>
 8009048:	b160      	cbz	r0, 8009064 <_Balloc+0x56>
 800904a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800904e:	e00e      	b.n	800906e <_Balloc+0x60>
 8009050:	2221      	movs	r2, #33	; 0x21
 8009052:	2104      	movs	r1, #4
 8009054:	4620      	mov	r0, r4
 8009056:	f000 fbd3 	bl	8009800 <_calloc_r>
 800905a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800905c:	60e8      	str	r0, [r5, #12]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e4      	bne.n	800902e <_Balloc+0x20>
 8009064:	2000      	movs	r0, #0
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	6802      	ldr	r2, [r0, #0]
 800906a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800906e:	2300      	movs	r3, #0
 8009070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009074:	e7f7      	b.n	8009066 <_Balloc+0x58>

08009076 <_Bfree>:
 8009076:	b570      	push	{r4, r5, r6, lr}
 8009078:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800907a:	4606      	mov	r6, r0
 800907c:	460d      	mov	r5, r1
 800907e:	b93c      	cbnz	r4, 8009090 <_Bfree+0x1a>
 8009080:	2010      	movs	r0, #16
 8009082:	f7ff ff91 	bl	8008fa8 <malloc>
 8009086:	6270      	str	r0, [r6, #36]	; 0x24
 8009088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800908c:	6004      	str	r4, [r0, #0]
 800908e:	60c4      	str	r4, [r0, #12]
 8009090:	b13d      	cbz	r5, 80090a2 <_Bfree+0x2c>
 8009092:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009094:	686a      	ldr	r2, [r5, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800909c:	6029      	str	r1, [r5, #0]
 800909e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80090a2:	bd70      	pop	{r4, r5, r6, pc}

080090a4 <__multadd>:
 80090a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a8:	461f      	mov	r7, r3
 80090aa:	4606      	mov	r6, r0
 80090ac:	460c      	mov	r4, r1
 80090ae:	2300      	movs	r3, #0
 80090b0:	690d      	ldr	r5, [r1, #16]
 80090b2:	f101 0c14 	add.w	ip, r1, #20
 80090b6:	f8dc 0000 	ldr.w	r0, [ip]
 80090ba:	3301      	adds	r3, #1
 80090bc:	b281      	uxth	r1, r0
 80090be:	fb02 7101 	mla	r1, r2, r1, r7
 80090c2:	0c00      	lsrs	r0, r0, #16
 80090c4:	0c0f      	lsrs	r7, r1, #16
 80090c6:	fb02 7000 	mla	r0, r2, r0, r7
 80090ca:	b289      	uxth	r1, r1
 80090cc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80090d0:	429d      	cmp	r5, r3
 80090d2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80090d6:	f84c 1b04 	str.w	r1, [ip], #4
 80090da:	dcec      	bgt.n	80090b6 <__multadd+0x12>
 80090dc:	b1d7      	cbz	r7, 8009114 <__multadd+0x70>
 80090de:	68a3      	ldr	r3, [r4, #8]
 80090e0:	42ab      	cmp	r3, r5
 80090e2:	dc12      	bgt.n	800910a <__multadd+0x66>
 80090e4:	6861      	ldr	r1, [r4, #4]
 80090e6:	4630      	mov	r0, r6
 80090e8:	3101      	adds	r1, #1
 80090ea:	f7ff ff90 	bl	800900e <_Balloc>
 80090ee:	4680      	mov	r8, r0
 80090f0:	6922      	ldr	r2, [r4, #16]
 80090f2:	f104 010c 	add.w	r1, r4, #12
 80090f6:	3202      	adds	r2, #2
 80090f8:	0092      	lsls	r2, r2, #2
 80090fa:	300c      	adds	r0, #12
 80090fc:	f7ff ff7c 	bl	8008ff8 <memcpy>
 8009100:	4621      	mov	r1, r4
 8009102:	4630      	mov	r0, r6
 8009104:	f7ff ffb7 	bl	8009076 <_Bfree>
 8009108:	4644      	mov	r4, r8
 800910a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800910e:	3501      	adds	r5, #1
 8009110:	615f      	str	r7, [r3, #20]
 8009112:	6125      	str	r5, [r4, #16]
 8009114:	4620      	mov	r0, r4
 8009116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800911a <__s2b>:
 800911a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800911e:	4615      	mov	r5, r2
 8009120:	2209      	movs	r2, #9
 8009122:	461f      	mov	r7, r3
 8009124:	3308      	adds	r3, #8
 8009126:	460c      	mov	r4, r1
 8009128:	fb93 f3f2 	sdiv	r3, r3, r2
 800912c:	4606      	mov	r6, r0
 800912e:	2201      	movs	r2, #1
 8009130:	2100      	movs	r1, #0
 8009132:	429a      	cmp	r2, r3
 8009134:	db20      	blt.n	8009178 <__s2b+0x5e>
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff ff69 	bl	800900e <_Balloc>
 800913c:	9b08      	ldr	r3, [sp, #32]
 800913e:	2d09      	cmp	r5, #9
 8009140:	6143      	str	r3, [r0, #20]
 8009142:	f04f 0301 	mov.w	r3, #1
 8009146:	6103      	str	r3, [r0, #16]
 8009148:	dd19      	ble.n	800917e <__s2b+0x64>
 800914a:	f104 0809 	add.w	r8, r4, #9
 800914e:	46c1      	mov	r9, r8
 8009150:	442c      	add	r4, r5
 8009152:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009156:	4601      	mov	r1, r0
 8009158:	3b30      	subs	r3, #48	; 0x30
 800915a:	220a      	movs	r2, #10
 800915c:	4630      	mov	r0, r6
 800915e:	f7ff ffa1 	bl	80090a4 <__multadd>
 8009162:	45a1      	cmp	r9, r4
 8009164:	d1f5      	bne.n	8009152 <__s2b+0x38>
 8009166:	eb08 0405 	add.w	r4, r8, r5
 800916a:	3c08      	subs	r4, #8
 800916c:	1b2d      	subs	r5, r5, r4
 800916e:	1963      	adds	r3, r4, r5
 8009170:	42bb      	cmp	r3, r7
 8009172:	db07      	blt.n	8009184 <__s2b+0x6a>
 8009174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009178:	0052      	lsls	r2, r2, #1
 800917a:	3101      	adds	r1, #1
 800917c:	e7d9      	b.n	8009132 <__s2b+0x18>
 800917e:	340a      	adds	r4, #10
 8009180:	2509      	movs	r5, #9
 8009182:	e7f3      	b.n	800916c <__s2b+0x52>
 8009184:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009188:	4601      	mov	r1, r0
 800918a:	3b30      	subs	r3, #48	; 0x30
 800918c:	220a      	movs	r2, #10
 800918e:	4630      	mov	r0, r6
 8009190:	f7ff ff88 	bl	80090a4 <__multadd>
 8009194:	e7eb      	b.n	800916e <__s2b+0x54>

08009196 <__hi0bits>:
 8009196:	0c02      	lsrs	r2, r0, #16
 8009198:	0412      	lsls	r2, r2, #16
 800919a:	4603      	mov	r3, r0
 800919c:	b9b2      	cbnz	r2, 80091cc <__hi0bits+0x36>
 800919e:	0403      	lsls	r3, r0, #16
 80091a0:	2010      	movs	r0, #16
 80091a2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80091a6:	bf04      	itt	eq
 80091a8:	021b      	lsleq	r3, r3, #8
 80091aa:	3008      	addeq	r0, #8
 80091ac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80091b0:	bf04      	itt	eq
 80091b2:	011b      	lsleq	r3, r3, #4
 80091b4:	3004      	addeq	r0, #4
 80091b6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80091ba:	bf04      	itt	eq
 80091bc:	009b      	lsleq	r3, r3, #2
 80091be:	3002      	addeq	r0, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	db06      	blt.n	80091d2 <__hi0bits+0x3c>
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	d503      	bpl.n	80091d0 <__hi0bits+0x3a>
 80091c8:	3001      	adds	r0, #1
 80091ca:	4770      	bx	lr
 80091cc:	2000      	movs	r0, #0
 80091ce:	e7e8      	b.n	80091a2 <__hi0bits+0xc>
 80091d0:	2020      	movs	r0, #32
 80091d2:	4770      	bx	lr

080091d4 <__lo0bits>:
 80091d4:	6803      	ldr	r3, [r0, #0]
 80091d6:	4601      	mov	r1, r0
 80091d8:	f013 0207 	ands.w	r2, r3, #7
 80091dc:	d00b      	beq.n	80091f6 <__lo0bits+0x22>
 80091de:	07da      	lsls	r2, r3, #31
 80091e0:	d423      	bmi.n	800922a <__lo0bits+0x56>
 80091e2:	0798      	lsls	r0, r3, #30
 80091e4:	bf49      	itett	mi
 80091e6:	085b      	lsrmi	r3, r3, #1
 80091e8:	089b      	lsrpl	r3, r3, #2
 80091ea:	2001      	movmi	r0, #1
 80091ec:	600b      	strmi	r3, [r1, #0]
 80091ee:	bf5c      	itt	pl
 80091f0:	600b      	strpl	r3, [r1, #0]
 80091f2:	2002      	movpl	r0, #2
 80091f4:	4770      	bx	lr
 80091f6:	b298      	uxth	r0, r3
 80091f8:	b9a8      	cbnz	r0, 8009226 <__lo0bits+0x52>
 80091fa:	2010      	movs	r0, #16
 80091fc:	0c1b      	lsrs	r3, r3, #16
 80091fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009202:	bf04      	itt	eq
 8009204:	0a1b      	lsreq	r3, r3, #8
 8009206:	3008      	addeq	r0, #8
 8009208:	071a      	lsls	r2, r3, #28
 800920a:	bf04      	itt	eq
 800920c:	091b      	lsreq	r3, r3, #4
 800920e:	3004      	addeq	r0, #4
 8009210:	079a      	lsls	r2, r3, #30
 8009212:	bf04      	itt	eq
 8009214:	089b      	lsreq	r3, r3, #2
 8009216:	3002      	addeq	r0, #2
 8009218:	07da      	lsls	r2, r3, #31
 800921a:	d402      	bmi.n	8009222 <__lo0bits+0x4e>
 800921c:	085b      	lsrs	r3, r3, #1
 800921e:	d006      	beq.n	800922e <__lo0bits+0x5a>
 8009220:	3001      	adds	r0, #1
 8009222:	600b      	str	r3, [r1, #0]
 8009224:	4770      	bx	lr
 8009226:	4610      	mov	r0, r2
 8009228:	e7e9      	b.n	80091fe <__lo0bits+0x2a>
 800922a:	2000      	movs	r0, #0
 800922c:	4770      	bx	lr
 800922e:	2020      	movs	r0, #32
 8009230:	4770      	bx	lr

08009232 <__i2b>:
 8009232:	b510      	push	{r4, lr}
 8009234:	460c      	mov	r4, r1
 8009236:	2101      	movs	r1, #1
 8009238:	f7ff fee9 	bl	800900e <_Balloc>
 800923c:	2201      	movs	r2, #1
 800923e:	6144      	str	r4, [r0, #20]
 8009240:	6102      	str	r2, [r0, #16]
 8009242:	bd10      	pop	{r4, pc}

08009244 <__multiply>:
 8009244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009248:	4614      	mov	r4, r2
 800924a:	690a      	ldr	r2, [r1, #16]
 800924c:	6923      	ldr	r3, [r4, #16]
 800924e:	4688      	mov	r8, r1
 8009250:	429a      	cmp	r2, r3
 8009252:	bfbe      	ittt	lt
 8009254:	460b      	movlt	r3, r1
 8009256:	46a0      	movlt	r8, r4
 8009258:	461c      	movlt	r4, r3
 800925a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800925e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009262:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009266:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800926a:	eb07 0609 	add.w	r6, r7, r9
 800926e:	42b3      	cmp	r3, r6
 8009270:	bfb8      	it	lt
 8009272:	3101      	addlt	r1, #1
 8009274:	f7ff fecb 	bl	800900e <_Balloc>
 8009278:	f100 0514 	add.w	r5, r0, #20
 800927c:	462b      	mov	r3, r5
 800927e:	2200      	movs	r2, #0
 8009280:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009284:	4573      	cmp	r3, lr
 8009286:	d316      	bcc.n	80092b6 <__multiply+0x72>
 8009288:	f104 0214 	add.w	r2, r4, #20
 800928c:	f108 0114 	add.w	r1, r8, #20
 8009290:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009294:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	9b00      	ldr	r3, [sp, #0]
 800929c:	9201      	str	r2, [sp, #4]
 800929e:	4293      	cmp	r3, r2
 80092a0:	d80c      	bhi.n	80092bc <__multiply+0x78>
 80092a2:	2e00      	cmp	r6, #0
 80092a4:	dd03      	ble.n	80092ae <__multiply+0x6a>
 80092a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d05d      	beq.n	800936a <__multiply+0x126>
 80092ae:	6106      	str	r6, [r0, #16]
 80092b0:	b003      	add	sp, #12
 80092b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b6:	f843 2b04 	str.w	r2, [r3], #4
 80092ba:	e7e3      	b.n	8009284 <__multiply+0x40>
 80092bc:	f8b2 b000 	ldrh.w	fp, [r2]
 80092c0:	f1bb 0f00 	cmp.w	fp, #0
 80092c4:	d023      	beq.n	800930e <__multiply+0xca>
 80092c6:	4689      	mov	r9, r1
 80092c8:	46ac      	mov	ip, r5
 80092ca:	f04f 0800 	mov.w	r8, #0
 80092ce:	f859 4b04 	ldr.w	r4, [r9], #4
 80092d2:	f8dc a000 	ldr.w	sl, [ip]
 80092d6:	b2a3      	uxth	r3, r4
 80092d8:	fa1f fa8a 	uxth.w	sl, sl
 80092dc:	fb0b a303 	mla	r3, fp, r3, sl
 80092e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092e4:	f8dc 4000 	ldr.w	r4, [ip]
 80092e8:	4443      	add	r3, r8
 80092ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092ee:	fb0b 840a 	mla	r4, fp, sl, r8
 80092f2:	46e2      	mov	sl, ip
 80092f4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80092fe:	454f      	cmp	r7, r9
 8009300:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009304:	f84a 3b04 	str.w	r3, [sl], #4
 8009308:	d82b      	bhi.n	8009362 <__multiply+0x11e>
 800930a:	f8cc 8004 	str.w	r8, [ip, #4]
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	3204      	adds	r2, #4
 8009312:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009316:	f1ba 0f00 	cmp.w	sl, #0
 800931a:	d020      	beq.n	800935e <__multiply+0x11a>
 800931c:	4689      	mov	r9, r1
 800931e:	46a8      	mov	r8, r5
 8009320:	f04f 0b00 	mov.w	fp, #0
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	f8b9 c000 	ldrh.w	ip, [r9]
 800932a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800932e:	b29b      	uxth	r3, r3
 8009330:	fb0a 440c 	mla	r4, sl, ip, r4
 8009334:	46c4      	mov	ip, r8
 8009336:	445c      	add	r4, fp
 8009338:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800933c:	f84c 3b04 	str.w	r3, [ip], #4
 8009340:	f859 3b04 	ldr.w	r3, [r9], #4
 8009344:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009348:	0c1b      	lsrs	r3, r3, #16
 800934a:	fb0a b303 	mla	r3, sl, r3, fp
 800934e:	454f      	cmp	r7, r9
 8009350:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009354:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009358:	d805      	bhi.n	8009366 <__multiply+0x122>
 800935a:	f8c8 3004 	str.w	r3, [r8, #4]
 800935e:	3504      	adds	r5, #4
 8009360:	e79b      	b.n	800929a <__multiply+0x56>
 8009362:	46d4      	mov	ip, sl
 8009364:	e7b3      	b.n	80092ce <__multiply+0x8a>
 8009366:	46e0      	mov	r8, ip
 8009368:	e7dd      	b.n	8009326 <__multiply+0xe2>
 800936a:	3e01      	subs	r6, #1
 800936c:	e799      	b.n	80092a2 <__multiply+0x5e>
	...

08009370 <__pow5mult>:
 8009370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009374:	4615      	mov	r5, r2
 8009376:	f012 0203 	ands.w	r2, r2, #3
 800937a:	4606      	mov	r6, r0
 800937c:	460f      	mov	r7, r1
 800937e:	d007      	beq.n	8009390 <__pow5mult+0x20>
 8009380:	4c21      	ldr	r4, [pc, #132]	; (8009408 <__pow5mult+0x98>)
 8009382:	3a01      	subs	r2, #1
 8009384:	2300      	movs	r3, #0
 8009386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800938a:	f7ff fe8b 	bl	80090a4 <__multadd>
 800938e:	4607      	mov	r7, r0
 8009390:	10ad      	asrs	r5, r5, #2
 8009392:	d035      	beq.n	8009400 <__pow5mult+0x90>
 8009394:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009396:	b93c      	cbnz	r4, 80093a8 <__pow5mult+0x38>
 8009398:	2010      	movs	r0, #16
 800939a:	f7ff fe05 	bl	8008fa8 <malloc>
 800939e:	6270      	str	r0, [r6, #36]	; 0x24
 80093a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093a4:	6004      	str	r4, [r0, #0]
 80093a6:	60c4      	str	r4, [r0, #12]
 80093a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093b0:	b94c      	cbnz	r4, 80093c6 <__pow5mult+0x56>
 80093b2:	f240 2171 	movw	r1, #625	; 0x271
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7ff ff3b 	bl	8009232 <__i2b>
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80093c4:	6003      	str	r3, [r0, #0]
 80093c6:	f04f 0800 	mov.w	r8, #0
 80093ca:	07eb      	lsls	r3, r5, #31
 80093cc:	d50a      	bpl.n	80093e4 <__pow5mult+0x74>
 80093ce:	4639      	mov	r1, r7
 80093d0:	4622      	mov	r2, r4
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7ff ff36 	bl	8009244 <__multiply>
 80093d8:	4681      	mov	r9, r0
 80093da:	4639      	mov	r1, r7
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff fe4a 	bl	8009076 <_Bfree>
 80093e2:	464f      	mov	r7, r9
 80093e4:	106d      	asrs	r5, r5, #1
 80093e6:	d00b      	beq.n	8009400 <__pow5mult+0x90>
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	b938      	cbnz	r0, 80093fc <__pow5mult+0x8c>
 80093ec:	4622      	mov	r2, r4
 80093ee:	4621      	mov	r1, r4
 80093f0:	4630      	mov	r0, r6
 80093f2:	f7ff ff27 	bl	8009244 <__multiply>
 80093f6:	6020      	str	r0, [r4, #0]
 80093f8:	f8c0 8000 	str.w	r8, [r0]
 80093fc:	4604      	mov	r4, r0
 80093fe:	e7e4      	b.n	80093ca <__pow5mult+0x5a>
 8009400:	4638      	mov	r0, r7
 8009402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009406:	bf00      	nop
 8009408:	0800ba78 	.word	0x0800ba78

0800940c <__lshift>:
 800940c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009410:	460c      	mov	r4, r1
 8009412:	4607      	mov	r7, r0
 8009414:	4616      	mov	r6, r2
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800941c:	eb0a 0903 	add.w	r9, sl, r3
 8009420:	6849      	ldr	r1, [r1, #4]
 8009422:	68a3      	ldr	r3, [r4, #8]
 8009424:	f109 0501 	add.w	r5, r9, #1
 8009428:	42ab      	cmp	r3, r5
 800942a:	db32      	blt.n	8009492 <__lshift+0x86>
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff fdee 	bl	800900e <_Balloc>
 8009432:	2300      	movs	r3, #0
 8009434:	4680      	mov	r8, r0
 8009436:	461a      	mov	r2, r3
 8009438:	f100 0114 	add.w	r1, r0, #20
 800943c:	4553      	cmp	r3, sl
 800943e:	db2b      	blt.n	8009498 <__lshift+0x8c>
 8009440:	6920      	ldr	r0, [r4, #16]
 8009442:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009446:	f104 0314 	add.w	r3, r4, #20
 800944a:	f016 021f 	ands.w	r2, r6, #31
 800944e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009452:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009456:	d025      	beq.n	80094a4 <__lshift+0x98>
 8009458:	2000      	movs	r0, #0
 800945a:	f1c2 0e20 	rsb	lr, r2, #32
 800945e:	468a      	mov	sl, r1
 8009460:	681e      	ldr	r6, [r3, #0]
 8009462:	4096      	lsls	r6, r2
 8009464:	4330      	orrs	r0, r6
 8009466:	f84a 0b04 	str.w	r0, [sl], #4
 800946a:	f853 0b04 	ldr.w	r0, [r3], #4
 800946e:	459c      	cmp	ip, r3
 8009470:	fa20 f00e 	lsr.w	r0, r0, lr
 8009474:	d814      	bhi.n	80094a0 <__lshift+0x94>
 8009476:	6048      	str	r0, [r1, #4]
 8009478:	b108      	cbz	r0, 800947e <__lshift+0x72>
 800947a:	f109 0502 	add.w	r5, r9, #2
 800947e:	3d01      	subs	r5, #1
 8009480:	4638      	mov	r0, r7
 8009482:	f8c8 5010 	str.w	r5, [r8, #16]
 8009486:	4621      	mov	r1, r4
 8009488:	f7ff fdf5 	bl	8009076 <_Bfree>
 800948c:	4640      	mov	r0, r8
 800948e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009492:	3101      	adds	r1, #1
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	e7c7      	b.n	8009428 <__lshift+0x1c>
 8009498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800949c:	3301      	adds	r3, #1
 800949e:	e7cd      	b.n	800943c <__lshift+0x30>
 80094a0:	4651      	mov	r1, sl
 80094a2:	e7dc      	b.n	800945e <__lshift+0x52>
 80094a4:	3904      	subs	r1, #4
 80094a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094aa:	459c      	cmp	ip, r3
 80094ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80094b0:	d8f9      	bhi.n	80094a6 <__lshift+0x9a>
 80094b2:	e7e4      	b.n	800947e <__lshift+0x72>

080094b4 <__mcmp>:
 80094b4:	6903      	ldr	r3, [r0, #16]
 80094b6:	690a      	ldr	r2, [r1, #16]
 80094b8:	b530      	push	{r4, r5, lr}
 80094ba:	1a9b      	subs	r3, r3, r2
 80094bc:	d10c      	bne.n	80094d8 <__mcmp+0x24>
 80094be:	0092      	lsls	r2, r2, #2
 80094c0:	3014      	adds	r0, #20
 80094c2:	3114      	adds	r1, #20
 80094c4:	1884      	adds	r4, r0, r2
 80094c6:	4411      	add	r1, r2
 80094c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094d0:	4295      	cmp	r5, r2
 80094d2:	d003      	beq.n	80094dc <__mcmp+0x28>
 80094d4:	d305      	bcc.n	80094e2 <__mcmp+0x2e>
 80094d6:	2301      	movs	r3, #1
 80094d8:	4618      	mov	r0, r3
 80094da:	bd30      	pop	{r4, r5, pc}
 80094dc:	42a0      	cmp	r0, r4
 80094de:	d3f3      	bcc.n	80094c8 <__mcmp+0x14>
 80094e0:	e7fa      	b.n	80094d8 <__mcmp+0x24>
 80094e2:	f04f 33ff 	mov.w	r3, #4294967295
 80094e6:	e7f7      	b.n	80094d8 <__mcmp+0x24>

080094e8 <__mdiff>:
 80094e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ec:	460d      	mov	r5, r1
 80094ee:	4607      	mov	r7, r0
 80094f0:	4611      	mov	r1, r2
 80094f2:	4628      	mov	r0, r5
 80094f4:	4614      	mov	r4, r2
 80094f6:	f7ff ffdd 	bl	80094b4 <__mcmp>
 80094fa:	1e06      	subs	r6, r0, #0
 80094fc:	d108      	bne.n	8009510 <__mdiff+0x28>
 80094fe:	4631      	mov	r1, r6
 8009500:	4638      	mov	r0, r7
 8009502:	f7ff fd84 	bl	800900e <_Balloc>
 8009506:	2301      	movs	r3, #1
 8009508:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800950c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009510:	bfa4      	itt	ge
 8009512:	4623      	movge	r3, r4
 8009514:	462c      	movge	r4, r5
 8009516:	4638      	mov	r0, r7
 8009518:	6861      	ldr	r1, [r4, #4]
 800951a:	bfa6      	itte	ge
 800951c:	461d      	movge	r5, r3
 800951e:	2600      	movge	r6, #0
 8009520:	2601      	movlt	r6, #1
 8009522:	f7ff fd74 	bl	800900e <_Balloc>
 8009526:	f04f 0e00 	mov.w	lr, #0
 800952a:	60c6      	str	r6, [r0, #12]
 800952c:	692b      	ldr	r3, [r5, #16]
 800952e:	6926      	ldr	r6, [r4, #16]
 8009530:	f104 0214 	add.w	r2, r4, #20
 8009534:	f105 0914 	add.w	r9, r5, #20
 8009538:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800953c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009540:	f100 0114 	add.w	r1, r0, #20
 8009544:	f852 ab04 	ldr.w	sl, [r2], #4
 8009548:	f859 5b04 	ldr.w	r5, [r9], #4
 800954c:	fa1f f38a 	uxth.w	r3, sl
 8009550:	4473      	add	r3, lr
 8009552:	b2ac      	uxth	r4, r5
 8009554:	1b1b      	subs	r3, r3, r4
 8009556:	0c2c      	lsrs	r4, r5, #16
 8009558:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800955c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009560:	b29b      	uxth	r3, r3
 8009562:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009566:	45c8      	cmp	r8, r9
 8009568:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800956c:	4694      	mov	ip, r2
 800956e:	f841 4b04 	str.w	r4, [r1], #4
 8009572:	d8e7      	bhi.n	8009544 <__mdiff+0x5c>
 8009574:	45bc      	cmp	ip, r7
 8009576:	d304      	bcc.n	8009582 <__mdiff+0x9a>
 8009578:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800957c:	b183      	cbz	r3, 80095a0 <__mdiff+0xb8>
 800957e:	6106      	str	r6, [r0, #16]
 8009580:	e7c4      	b.n	800950c <__mdiff+0x24>
 8009582:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009586:	b2a2      	uxth	r2, r4
 8009588:	4472      	add	r2, lr
 800958a:	1413      	asrs	r3, r2, #16
 800958c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009590:	b292      	uxth	r2, r2
 8009592:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009596:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800959a:	f841 2b04 	str.w	r2, [r1], #4
 800959e:	e7e9      	b.n	8009574 <__mdiff+0x8c>
 80095a0:	3e01      	subs	r6, #1
 80095a2:	e7e9      	b.n	8009578 <__mdiff+0x90>

080095a4 <__ulp>:
 80095a4:	4b10      	ldr	r3, [pc, #64]	; (80095e8 <__ulp+0x44>)
 80095a6:	400b      	ands	r3, r1
 80095a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dd02      	ble.n	80095b6 <__ulp+0x12>
 80095b0:	2000      	movs	r0, #0
 80095b2:	4619      	mov	r1, r3
 80095b4:	4770      	bx	lr
 80095b6:	425b      	negs	r3, r3
 80095b8:	151b      	asrs	r3, r3, #20
 80095ba:	2b13      	cmp	r3, #19
 80095bc:	f04f 0000 	mov.w	r0, #0
 80095c0:	f04f 0100 	mov.w	r1, #0
 80095c4:	dc04      	bgt.n	80095d0 <__ulp+0x2c>
 80095c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80095ca:	fa42 f103 	asr.w	r1, r2, r3
 80095ce:	4770      	bx	lr
 80095d0:	2201      	movs	r2, #1
 80095d2:	3b14      	subs	r3, #20
 80095d4:	2b1e      	cmp	r3, #30
 80095d6:	bfce      	itee	gt
 80095d8:	4613      	movgt	r3, r2
 80095da:	f1c3 031f 	rsble	r3, r3, #31
 80095de:	fa02 f303 	lslle.w	r3, r2, r3
 80095e2:	4618      	mov	r0, r3
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	7ff00000 	.word	0x7ff00000

080095ec <__b2d>:
 80095ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f0:	6907      	ldr	r7, [r0, #16]
 80095f2:	f100 0914 	add.w	r9, r0, #20
 80095f6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80095fa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80095fe:	f1a7 0804 	sub.w	r8, r7, #4
 8009602:	4630      	mov	r0, r6
 8009604:	f7ff fdc7 	bl	8009196 <__hi0bits>
 8009608:	f1c0 0320 	rsb	r3, r0, #32
 800960c:	280a      	cmp	r0, #10
 800960e:	600b      	str	r3, [r1, #0]
 8009610:	491e      	ldr	r1, [pc, #120]	; (800968c <__b2d+0xa0>)
 8009612:	dc17      	bgt.n	8009644 <__b2d+0x58>
 8009614:	45c1      	cmp	r9, r8
 8009616:	bf28      	it	cs
 8009618:	2200      	movcs	r2, #0
 800961a:	f1c0 0c0b 	rsb	ip, r0, #11
 800961e:	fa26 f30c 	lsr.w	r3, r6, ip
 8009622:	bf38      	it	cc
 8009624:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009628:	ea43 0501 	orr.w	r5, r3, r1
 800962c:	f100 0315 	add.w	r3, r0, #21
 8009630:	fa06 f303 	lsl.w	r3, r6, r3
 8009634:	fa22 f20c 	lsr.w	r2, r2, ip
 8009638:	ea43 0402 	orr.w	r4, r3, r2
 800963c:	4620      	mov	r0, r4
 800963e:	4629      	mov	r1, r5
 8009640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009644:	45c1      	cmp	r9, r8
 8009646:	bf3a      	itte	cc
 8009648:	f1a7 0808 	subcc.w	r8, r7, #8
 800964c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009650:	2200      	movcs	r2, #0
 8009652:	f1b0 030b 	subs.w	r3, r0, #11
 8009656:	d015      	beq.n	8009684 <__b2d+0x98>
 8009658:	409e      	lsls	r6, r3
 800965a:	f1c3 0720 	rsb	r7, r3, #32
 800965e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009662:	fa22 f107 	lsr.w	r1, r2, r7
 8009666:	45c8      	cmp	r8, r9
 8009668:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800966c:	ea46 0501 	orr.w	r5, r6, r1
 8009670:	bf94      	ite	ls
 8009672:	2100      	movls	r1, #0
 8009674:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009678:	fa02 f003 	lsl.w	r0, r2, r3
 800967c:	40f9      	lsrs	r1, r7
 800967e:	ea40 0401 	orr.w	r4, r0, r1
 8009682:	e7db      	b.n	800963c <__b2d+0x50>
 8009684:	ea46 0501 	orr.w	r5, r6, r1
 8009688:	4614      	mov	r4, r2
 800968a:	e7d7      	b.n	800963c <__b2d+0x50>
 800968c:	3ff00000 	.word	0x3ff00000

08009690 <__d2b>:
 8009690:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009694:	461c      	mov	r4, r3
 8009696:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800969a:	2101      	movs	r1, #1
 800969c:	4690      	mov	r8, r2
 800969e:	f7ff fcb6 	bl	800900e <_Balloc>
 80096a2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80096a6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80096aa:	4607      	mov	r7, r0
 80096ac:	bb34      	cbnz	r4, 80096fc <__d2b+0x6c>
 80096ae:	9201      	str	r2, [sp, #4]
 80096b0:	f1b8 0200 	subs.w	r2, r8, #0
 80096b4:	d027      	beq.n	8009706 <__d2b+0x76>
 80096b6:	a802      	add	r0, sp, #8
 80096b8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80096bc:	f7ff fd8a 	bl	80091d4 <__lo0bits>
 80096c0:	9900      	ldr	r1, [sp, #0]
 80096c2:	b1f0      	cbz	r0, 8009702 <__d2b+0x72>
 80096c4:	9a01      	ldr	r2, [sp, #4]
 80096c6:	f1c0 0320 	rsb	r3, r0, #32
 80096ca:	fa02 f303 	lsl.w	r3, r2, r3
 80096ce:	430b      	orrs	r3, r1
 80096d0:	40c2      	lsrs	r2, r0
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	9201      	str	r2, [sp, #4]
 80096d6:	9b01      	ldr	r3, [sp, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bf14      	ite	ne
 80096dc:	2102      	movne	r1, #2
 80096de:	2101      	moveq	r1, #1
 80096e0:	61bb      	str	r3, [r7, #24]
 80096e2:	6139      	str	r1, [r7, #16]
 80096e4:	b1c4      	cbz	r4, 8009718 <__d2b+0x88>
 80096e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80096ea:	4404      	add	r4, r0
 80096ec:	6034      	str	r4, [r6, #0]
 80096ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096f2:	6028      	str	r0, [r5, #0]
 80096f4:	4638      	mov	r0, r7
 80096f6:	b002      	add	sp, #8
 80096f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009700:	e7d5      	b.n	80096ae <__d2b+0x1e>
 8009702:	6179      	str	r1, [r7, #20]
 8009704:	e7e7      	b.n	80096d6 <__d2b+0x46>
 8009706:	a801      	add	r0, sp, #4
 8009708:	f7ff fd64 	bl	80091d4 <__lo0bits>
 800970c:	2101      	movs	r1, #1
 800970e:	9b01      	ldr	r3, [sp, #4]
 8009710:	6139      	str	r1, [r7, #16]
 8009712:	617b      	str	r3, [r7, #20]
 8009714:	3020      	adds	r0, #32
 8009716:	e7e5      	b.n	80096e4 <__d2b+0x54>
 8009718:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800971c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009720:	6030      	str	r0, [r6, #0]
 8009722:	6918      	ldr	r0, [r3, #16]
 8009724:	f7ff fd37 	bl	8009196 <__hi0bits>
 8009728:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800972c:	e7e1      	b.n	80096f2 <__d2b+0x62>

0800972e <__ratio>:
 800972e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009732:	4688      	mov	r8, r1
 8009734:	4669      	mov	r1, sp
 8009736:	4681      	mov	r9, r0
 8009738:	f7ff ff58 	bl	80095ec <__b2d>
 800973c:	468b      	mov	fp, r1
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	4640      	mov	r0, r8
 8009744:	a901      	add	r1, sp, #4
 8009746:	f7ff ff51 	bl	80095ec <__b2d>
 800974a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800974e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009752:	460d      	mov	r5, r1
 8009754:	eba3 0c02 	sub.w	ip, r3, r2
 8009758:	e9dd 3200 	ldrd	r3, r2, [sp]
 800975c:	1a9b      	subs	r3, r3, r2
 800975e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009762:	2b00      	cmp	r3, #0
 8009764:	bfd5      	itete	le
 8009766:	460a      	movle	r2, r1
 8009768:	463a      	movgt	r2, r7
 800976a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800976e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009772:	bfd8      	it	le
 8009774:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009778:	462b      	mov	r3, r5
 800977a:	4602      	mov	r2, r0
 800977c:	4659      	mov	r1, fp
 800977e:	4630      	mov	r0, r6
 8009780:	f7f6 ffd4 	bl	800072c <__aeabi_ddiv>
 8009784:	b003      	add	sp, #12
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800978a <__copybits>:
 800978a:	3901      	subs	r1, #1
 800978c:	b510      	push	{r4, lr}
 800978e:	1149      	asrs	r1, r1, #5
 8009790:	6914      	ldr	r4, [r2, #16]
 8009792:	3101      	adds	r1, #1
 8009794:	f102 0314 	add.w	r3, r2, #20
 8009798:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800979c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	4602      	mov	r2, r0
 80097a4:	d303      	bcc.n	80097ae <__copybits+0x24>
 80097a6:	2300      	movs	r3, #0
 80097a8:	428a      	cmp	r2, r1
 80097aa:	d305      	bcc.n	80097b8 <__copybits+0x2e>
 80097ac:	bd10      	pop	{r4, pc}
 80097ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b2:	f840 2b04 	str.w	r2, [r0], #4
 80097b6:	e7f3      	b.n	80097a0 <__copybits+0x16>
 80097b8:	f842 3b04 	str.w	r3, [r2], #4
 80097bc:	e7f4      	b.n	80097a8 <__copybits+0x1e>

080097be <__any_on>:
 80097be:	f100 0214 	add.w	r2, r0, #20
 80097c2:	6900      	ldr	r0, [r0, #16]
 80097c4:	114b      	asrs	r3, r1, #5
 80097c6:	4298      	cmp	r0, r3
 80097c8:	b510      	push	{r4, lr}
 80097ca:	db11      	blt.n	80097f0 <__any_on+0x32>
 80097cc:	dd0a      	ble.n	80097e4 <__any_on+0x26>
 80097ce:	f011 011f 	ands.w	r1, r1, #31
 80097d2:	d007      	beq.n	80097e4 <__any_on+0x26>
 80097d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097d8:	fa24 f001 	lsr.w	r0, r4, r1
 80097dc:	fa00 f101 	lsl.w	r1, r0, r1
 80097e0:	428c      	cmp	r4, r1
 80097e2:	d10b      	bne.n	80097fc <__any_on+0x3e>
 80097e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d803      	bhi.n	80097f4 <__any_on+0x36>
 80097ec:	2000      	movs	r0, #0
 80097ee:	bd10      	pop	{r4, pc}
 80097f0:	4603      	mov	r3, r0
 80097f2:	e7f7      	b.n	80097e4 <__any_on+0x26>
 80097f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097f8:	2900      	cmp	r1, #0
 80097fa:	d0f5      	beq.n	80097e8 <__any_on+0x2a>
 80097fc:	2001      	movs	r0, #1
 80097fe:	e7f6      	b.n	80097ee <__any_on+0x30>

08009800 <_calloc_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	fb02 f401 	mul.w	r4, r2, r1
 8009806:	4621      	mov	r1, r4
 8009808:	f000 f854 	bl	80098b4 <_malloc_r>
 800980c:	4605      	mov	r5, r0
 800980e:	b118      	cbz	r0, 8009818 <_calloc_r+0x18>
 8009810:	4622      	mov	r2, r4
 8009812:	2100      	movs	r1, #0
 8009814:	f7fc fc8e 	bl	8006134 <memset>
 8009818:	4628      	mov	r0, r5
 800981a:	bd38      	pop	{r3, r4, r5, pc}

0800981c <_free_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4605      	mov	r5, r0
 8009820:	2900      	cmp	r1, #0
 8009822:	d043      	beq.n	80098ac <_free_r+0x90>
 8009824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009828:	1f0c      	subs	r4, r1, #4
 800982a:	2b00      	cmp	r3, #0
 800982c:	bfb8      	it	lt
 800982e:	18e4      	addlt	r4, r4, r3
 8009830:	f000 fa34 	bl	8009c9c <__malloc_lock>
 8009834:	4a1e      	ldr	r2, [pc, #120]	; (80098b0 <_free_r+0x94>)
 8009836:	6813      	ldr	r3, [r2, #0]
 8009838:	4610      	mov	r0, r2
 800983a:	b933      	cbnz	r3, 800984a <_free_r+0x2e>
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	6014      	str	r4, [r2, #0]
 8009840:	4628      	mov	r0, r5
 8009842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009846:	f000 ba2a 	b.w	8009c9e <__malloc_unlock>
 800984a:	42a3      	cmp	r3, r4
 800984c:	d90b      	bls.n	8009866 <_free_r+0x4a>
 800984e:	6821      	ldr	r1, [r4, #0]
 8009850:	1862      	adds	r2, r4, r1
 8009852:	4293      	cmp	r3, r2
 8009854:	bf01      	itttt	eq
 8009856:	681a      	ldreq	r2, [r3, #0]
 8009858:	685b      	ldreq	r3, [r3, #4]
 800985a:	1852      	addeq	r2, r2, r1
 800985c:	6022      	streq	r2, [r4, #0]
 800985e:	6063      	str	r3, [r4, #4]
 8009860:	6004      	str	r4, [r0, #0]
 8009862:	e7ed      	b.n	8009840 <_free_r+0x24>
 8009864:	4613      	mov	r3, r2
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	b10a      	cbz	r2, 800986e <_free_r+0x52>
 800986a:	42a2      	cmp	r2, r4
 800986c:	d9fa      	bls.n	8009864 <_free_r+0x48>
 800986e:	6819      	ldr	r1, [r3, #0]
 8009870:	1858      	adds	r0, r3, r1
 8009872:	42a0      	cmp	r0, r4
 8009874:	d10b      	bne.n	800988e <_free_r+0x72>
 8009876:	6820      	ldr	r0, [r4, #0]
 8009878:	4401      	add	r1, r0
 800987a:	1858      	adds	r0, r3, r1
 800987c:	4282      	cmp	r2, r0
 800987e:	6019      	str	r1, [r3, #0]
 8009880:	d1de      	bne.n	8009840 <_free_r+0x24>
 8009882:	6810      	ldr	r0, [r2, #0]
 8009884:	6852      	ldr	r2, [r2, #4]
 8009886:	4401      	add	r1, r0
 8009888:	6019      	str	r1, [r3, #0]
 800988a:	605a      	str	r2, [r3, #4]
 800988c:	e7d8      	b.n	8009840 <_free_r+0x24>
 800988e:	d902      	bls.n	8009896 <_free_r+0x7a>
 8009890:	230c      	movs	r3, #12
 8009892:	602b      	str	r3, [r5, #0]
 8009894:	e7d4      	b.n	8009840 <_free_r+0x24>
 8009896:	6820      	ldr	r0, [r4, #0]
 8009898:	1821      	adds	r1, r4, r0
 800989a:	428a      	cmp	r2, r1
 800989c:	bf01      	itttt	eq
 800989e:	6811      	ldreq	r1, [r2, #0]
 80098a0:	6852      	ldreq	r2, [r2, #4]
 80098a2:	1809      	addeq	r1, r1, r0
 80098a4:	6021      	streq	r1, [r4, #0]
 80098a6:	6062      	str	r2, [r4, #4]
 80098a8:	605c      	str	r4, [r3, #4]
 80098aa:	e7c9      	b.n	8009840 <_free_r+0x24>
 80098ac:	bd38      	pop	{r3, r4, r5, pc}
 80098ae:	bf00      	nop
 80098b0:	200005c4 	.word	0x200005c4

080098b4 <_malloc_r>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	1ccd      	adds	r5, r1, #3
 80098b8:	f025 0503 	bic.w	r5, r5, #3
 80098bc:	3508      	adds	r5, #8
 80098be:	2d0c      	cmp	r5, #12
 80098c0:	bf38      	it	cc
 80098c2:	250c      	movcc	r5, #12
 80098c4:	2d00      	cmp	r5, #0
 80098c6:	4606      	mov	r6, r0
 80098c8:	db01      	blt.n	80098ce <_malloc_r+0x1a>
 80098ca:	42a9      	cmp	r1, r5
 80098cc:	d903      	bls.n	80098d6 <_malloc_r+0x22>
 80098ce:	230c      	movs	r3, #12
 80098d0:	6033      	str	r3, [r6, #0]
 80098d2:	2000      	movs	r0, #0
 80098d4:	bd70      	pop	{r4, r5, r6, pc}
 80098d6:	f000 f9e1 	bl	8009c9c <__malloc_lock>
 80098da:	4a21      	ldr	r2, [pc, #132]	; (8009960 <_malloc_r+0xac>)
 80098dc:	6814      	ldr	r4, [r2, #0]
 80098de:	4621      	mov	r1, r4
 80098e0:	b991      	cbnz	r1, 8009908 <_malloc_r+0x54>
 80098e2:	4c20      	ldr	r4, [pc, #128]	; (8009964 <_malloc_r+0xb0>)
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	b91b      	cbnz	r3, 80098f0 <_malloc_r+0x3c>
 80098e8:	4630      	mov	r0, r6
 80098ea:	f000 f98f 	bl	8009c0c <_sbrk_r>
 80098ee:	6020      	str	r0, [r4, #0]
 80098f0:	4629      	mov	r1, r5
 80098f2:	4630      	mov	r0, r6
 80098f4:	f000 f98a 	bl	8009c0c <_sbrk_r>
 80098f8:	1c43      	adds	r3, r0, #1
 80098fa:	d124      	bne.n	8009946 <_malloc_r+0x92>
 80098fc:	230c      	movs	r3, #12
 80098fe:	4630      	mov	r0, r6
 8009900:	6033      	str	r3, [r6, #0]
 8009902:	f000 f9cc 	bl	8009c9e <__malloc_unlock>
 8009906:	e7e4      	b.n	80098d2 <_malloc_r+0x1e>
 8009908:	680b      	ldr	r3, [r1, #0]
 800990a:	1b5b      	subs	r3, r3, r5
 800990c:	d418      	bmi.n	8009940 <_malloc_r+0x8c>
 800990e:	2b0b      	cmp	r3, #11
 8009910:	d90f      	bls.n	8009932 <_malloc_r+0x7e>
 8009912:	600b      	str	r3, [r1, #0]
 8009914:	18cc      	adds	r4, r1, r3
 8009916:	50cd      	str	r5, [r1, r3]
 8009918:	4630      	mov	r0, r6
 800991a:	f000 f9c0 	bl	8009c9e <__malloc_unlock>
 800991e:	f104 000b 	add.w	r0, r4, #11
 8009922:	1d23      	adds	r3, r4, #4
 8009924:	f020 0007 	bic.w	r0, r0, #7
 8009928:	1ac3      	subs	r3, r0, r3
 800992a:	d0d3      	beq.n	80098d4 <_malloc_r+0x20>
 800992c:	425a      	negs	r2, r3
 800992e:	50e2      	str	r2, [r4, r3]
 8009930:	e7d0      	b.n	80098d4 <_malloc_r+0x20>
 8009932:	684b      	ldr	r3, [r1, #4]
 8009934:	428c      	cmp	r4, r1
 8009936:	bf16      	itet	ne
 8009938:	6063      	strne	r3, [r4, #4]
 800993a:	6013      	streq	r3, [r2, #0]
 800993c:	460c      	movne	r4, r1
 800993e:	e7eb      	b.n	8009918 <_malloc_r+0x64>
 8009940:	460c      	mov	r4, r1
 8009942:	6849      	ldr	r1, [r1, #4]
 8009944:	e7cc      	b.n	80098e0 <_malloc_r+0x2c>
 8009946:	1cc4      	adds	r4, r0, #3
 8009948:	f024 0403 	bic.w	r4, r4, #3
 800994c:	42a0      	cmp	r0, r4
 800994e:	d005      	beq.n	800995c <_malloc_r+0xa8>
 8009950:	1a21      	subs	r1, r4, r0
 8009952:	4630      	mov	r0, r6
 8009954:	f000 f95a 	bl	8009c0c <_sbrk_r>
 8009958:	3001      	adds	r0, #1
 800995a:	d0cf      	beq.n	80098fc <_malloc_r+0x48>
 800995c:	6025      	str	r5, [r4, #0]
 800995e:	e7db      	b.n	8009918 <_malloc_r+0x64>
 8009960:	200005c4 	.word	0x200005c4
 8009964:	200005c8 	.word	0x200005c8

08009968 <__ssputs_r>:
 8009968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800996c:	688e      	ldr	r6, [r1, #8]
 800996e:	4682      	mov	sl, r0
 8009970:	429e      	cmp	r6, r3
 8009972:	460c      	mov	r4, r1
 8009974:	4690      	mov	r8, r2
 8009976:	4699      	mov	r9, r3
 8009978:	d837      	bhi.n	80099ea <__ssputs_r+0x82>
 800997a:	898a      	ldrh	r2, [r1, #12]
 800997c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009980:	d031      	beq.n	80099e6 <__ssputs_r+0x7e>
 8009982:	2302      	movs	r3, #2
 8009984:	6825      	ldr	r5, [r4, #0]
 8009986:	6909      	ldr	r1, [r1, #16]
 8009988:	1a6f      	subs	r7, r5, r1
 800998a:	6965      	ldr	r5, [r4, #20]
 800998c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009990:	fb95 f5f3 	sdiv	r5, r5, r3
 8009994:	f109 0301 	add.w	r3, r9, #1
 8009998:	443b      	add	r3, r7
 800999a:	429d      	cmp	r5, r3
 800999c:	bf38      	it	cc
 800999e:	461d      	movcc	r5, r3
 80099a0:	0553      	lsls	r3, r2, #21
 80099a2:	d530      	bpl.n	8009a06 <__ssputs_r+0x9e>
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7ff ff85 	bl	80098b4 <_malloc_r>
 80099aa:	4606      	mov	r6, r0
 80099ac:	b950      	cbnz	r0, 80099c4 <__ssputs_r+0x5c>
 80099ae:	230c      	movs	r3, #12
 80099b0:	f04f 30ff 	mov.w	r0, #4294967295
 80099b4:	f8ca 3000 	str.w	r3, [sl]
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099be:	81a3      	strh	r3, [r4, #12]
 80099c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c4:	463a      	mov	r2, r7
 80099c6:	6921      	ldr	r1, [r4, #16]
 80099c8:	f7ff fb16 	bl	8008ff8 <memcpy>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	6126      	str	r6, [r4, #16]
 80099da:	443e      	add	r6, r7
 80099dc:	6026      	str	r6, [r4, #0]
 80099de:	464e      	mov	r6, r9
 80099e0:	6165      	str	r5, [r4, #20]
 80099e2:	1bed      	subs	r5, r5, r7
 80099e4:	60a5      	str	r5, [r4, #8]
 80099e6:	454e      	cmp	r6, r9
 80099e8:	d900      	bls.n	80099ec <__ssputs_r+0x84>
 80099ea:	464e      	mov	r6, r9
 80099ec:	4632      	mov	r2, r6
 80099ee:	4641      	mov	r1, r8
 80099f0:	6820      	ldr	r0, [r4, #0]
 80099f2:	f000 f93a 	bl	8009c6a <memmove>
 80099f6:	68a3      	ldr	r3, [r4, #8]
 80099f8:	2000      	movs	r0, #0
 80099fa:	1b9b      	subs	r3, r3, r6
 80099fc:	60a3      	str	r3, [r4, #8]
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	441e      	add	r6, r3
 8009a02:	6026      	str	r6, [r4, #0]
 8009a04:	e7dc      	b.n	80099c0 <__ssputs_r+0x58>
 8009a06:	462a      	mov	r2, r5
 8009a08:	f000 f94a 	bl	8009ca0 <_realloc_r>
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d1e2      	bne.n	80099d8 <__ssputs_r+0x70>
 8009a12:	6921      	ldr	r1, [r4, #16]
 8009a14:	4650      	mov	r0, sl
 8009a16:	f7ff ff01 	bl	800981c <_free_r>
 8009a1a:	e7c8      	b.n	80099ae <__ssputs_r+0x46>

08009a1c <_svfiprintf_r>:
 8009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	461d      	mov	r5, r3
 8009a22:	898b      	ldrh	r3, [r1, #12]
 8009a24:	b09d      	sub	sp, #116	; 0x74
 8009a26:	061f      	lsls	r7, r3, #24
 8009a28:	4680      	mov	r8, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	4616      	mov	r6, r2
 8009a2e:	d50f      	bpl.n	8009a50 <_svfiprintf_r+0x34>
 8009a30:	690b      	ldr	r3, [r1, #16]
 8009a32:	b96b      	cbnz	r3, 8009a50 <_svfiprintf_r+0x34>
 8009a34:	2140      	movs	r1, #64	; 0x40
 8009a36:	f7ff ff3d 	bl	80098b4 <_malloc_r>
 8009a3a:	6020      	str	r0, [r4, #0]
 8009a3c:	6120      	str	r0, [r4, #16]
 8009a3e:	b928      	cbnz	r0, 8009a4c <_svfiprintf_r+0x30>
 8009a40:	230c      	movs	r3, #12
 8009a42:	f8c8 3000 	str.w	r3, [r8]
 8009a46:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4a:	e0c8      	b.n	8009bde <_svfiprintf_r+0x1c2>
 8009a4c:	2340      	movs	r3, #64	; 0x40
 8009a4e:	6163      	str	r3, [r4, #20]
 8009a50:	2300      	movs	r3, #0
 8009a52:	9309      	str	r3, [sp, #36]	; 0x24
 8009a54:	2320      	movs	r3, #32
 8009a56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a5a:	2330      	movs	r3, #48	; 0x30
 8009a5c:	f04f 0b01 	mov.w	fp, #1
 8009a60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a64:	9503      	str	r5, [sp, #12]
 8009a66:	4637      	mov	r7, r6
 8009a68:	463d      	mov	r5, r7
 8009a6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a6e:	b10b      	cbz	r3, 8009a74 <_svfiprintf_r+0x58>
 8009a70:	2b25      	cmp	r3, #37	; 0x25
 8009a72:	d13e      	bne.n	8009af2 <_svfiprintf_r+0xd6>
 8009a74:	ebb7 0a06 	subs.w	sl, r7, r6
 8009a78:	d00b      	beq.n	8009a92 <_svfiprintf_r+0x76>
 8009a7a:	4653      	mov	r3, sl
 8009a7c:	4632      	mov	r2, r6
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4640      	mov	r0, r8
 8009a82:	f7ff ff71 	bl	8009968 <__ssputs_r>
 8009a86:	3001      	adds	r0, #1
 8009a88:	f000 80a4 	beq.w	8009bd4 <_svfiprintf_r+0x1b8>
 8009a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a8e:	4453      	add	r3, sl
 8009a90:	9309      	str	r3, [sp, #36]	; 0x24
 8009a92:	783b      	ldrb	r3, [r7, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f000 809d 	beq.w	8009bd4 <_svfiprintf_r+0x1b8>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	9307      	str	r3, [sp, #28]
 8009aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aac:	931a      	str	r3, [sp, #104]	; 0x68
 8009aae:	462f      	mov	r7, r5
 8009ab0:	2205      	movs	r2, #5
 8009ab2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009ab6:	4850      	ldr	r0, [pc, #320]	; (8009bf8 <_svfiprintf_r+0x1dc>)
 8009ab8:	f7ff fa90 	bl	8008fdc <memchr>
 8009abc:	9b04      	ldr	r3, [sp, #16]
 8009abe:	b9d0      	cbnz	r0, 8009af6 <_svfiprintf_r+0xda>
 8009ac0:	06d9      	lsls	r1, r3, #27
 8009ac2:	bf44      	itt	mi
 8009ac4:	2220      	movmi	r2, #32
 8009ac6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009aca:	071a      	lsls	r2, r3, #28
 8009acc:	bf44      	itt	mi
 8009ace:	222b      	movmi	r2, #43	; 0x2b
 8009ad0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ad4:	782a      	ldrb	r2, [r5, #0]
 8009ad6:	2a2a      	cmp	r2, #42	; 0x2a
 8009ad8:	d015      	beq.n	8009b06 <_svfiprintf_r+0xea>
 8009ada:	462f      	mov	r7, r5
 8009adc:	2000      	movs	r0, #0
 8009ade:	250a      	movs	r5, #10
 8009ae0:	9a07      	ldr	r2, [sp, #28]
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ae8:	3b30      	subs	r3, #48	; 0x30
 8009aea:	2b09      	cmp	r3, #9
 8009aec:	d94d      	bls.n	8009b8a <_svfiprintf_r+0x16e>
 8009aee:	b1b8      	cbz	r0, 8009b20 <_svfiprintf_r+0x104>
 8009af0:	e00f      	b.n	8009b12 <_svfiprintf_r+0xf6>
 8009af2:	462f      	mov	r7, r5
 8009af4:	e7b8      	b.n	8009a68 <_svfiprintf_r+0x4c>
 8009af6:	4a40      	ldr	r2, [pc, #256]	; (8009bf8 <_svfiprintf_r+0x1dc>)
 8009af8:	463d      	mov	r5, r7
 8009afa:	1a80      	subs	r0, r0, r2
 8009afc:	fa0b f000 	lsl.w	r0, fp, r0
 8009b00:	4318      	orrs	r0, r3
 8009b02:	9004      	str	r0, [sp, #16]
 8009b04:	e7d3      	b.n	8009aae <_svfiprintf_r+0x92>
 8009b06:	9a03      	ldr	r2, [sp, #12]
 8009b08:	1d11      	adds	r1, r2, #4
 8009b0a:	6812      	ldr	r2, [r2, #0]
 8009b0c:	9103      	str	r1, [sp, #12]
 8009b0e:	2a00      	cmp	r2, #0
 8009b10:	db01      	blt.n	8009b16 <_svfiprintf_r+0xfa>
 8009b12:	9207      	str	r2, [sp, #28]
 8009b14:	e004      	b.n	8009b20 <_svfiprintf_r+0x104>
 8009b16:	4252      	negs	r2, r2
 8009b18:	f043 0302 	orr.w	r3, r3, #2
 8009b1c:	9207      	str	r2, [sp, #28]
 8009b1e:	9304      	str	r3, [sp, #16]
 8009b20:	783b      	ldrb	r3, [r7, #0]
 8009b22:	2b2e      	cmp	r3, #46	; 0x2e
 8009b24:	d10c      	bne.n	8009b40 <_svfiprintf_r+0x124>
 8009b26:	787b      	ldrb	r3, [r7, #1]
 8009b28:	2b2a      	cmp	r3, #42	; 0x2a
 8009b2a:	d133      	bne.n	8009b94 <_svfiprintf_r+0x178>
 8009b2c:	9b03      	ldr	r3, [sp, #12]
 8009b2e:	3702      	adds	r7, #2
 8009b30:	1d1a      	adds	r2, r3, #4
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	9203      	str	r2, [sp, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfb8      	it	lt
 8009b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b3e:	9305      	str	r3, [sp, #20]
 8009b40:	4d2e      	ldr	r5, [pc, #184]	; (8009bfc <_svfiprintf_r+0x1e0>)
 8009b42:	2203      	movs	r2, #3
 8009b44:	7839      	ldrb	r1, [r7, #0]
 8009b46:	4628      	mov	r0, r5
 8009b48:	f7ff fa48 	bl	8008fdc <memchr>
 8009b4c:	b138      	cbz	r0, 8009b5e <_svfiprintf_r+0x142>
 8009b4e:	2340      	movs	r3, #64	; 0x40
 8009b50:	1b40      	subs	r0, r0, r5
 8009b52:	fa03 f000 	lsl.w	r0, r3, r0
 8009b56:	9b04      	ldr	r3, [sp, #16]
 8009b58:	3701      	adds	r7, #1
 8009b5a:	4303      	orrs	r3, r0
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	7839      	ldrb	r1, [r7, #0]
 8009b60:	2206      	movs	r2, #6
 8009b62:	4827      	ldr	r0, [pc, #156]	; (8009c00 <_svfiprintf_r+0x1e4>)
 8009b64:	1c7e      	adds	r6, r7, #1
 8009b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b6a:	f7ff fa37 	bl	8008fdc <memchr>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d038      	beq.n	8009be4 <_svfiprintf_r+0x1c8>
 8009b72:	4b24      	ldr	r3, [pc, #144]	; (8009c04 <_svfiprintf_r+0x1e8>)
 8009b74:	bb13      	cbnz	r3, 8009bbc <_svfiprintf_r+0x1a0>
 8009b76:	9b03      	ldr	r3, [sp, #12]
 8009b78:	3307      	adds	r3, #7
 8009b7a:	f023 0307 	bic.w	r3, r3, #7
 8009b7e:	3308      	adds	r3, #8
 8009b80:	9303      	str	r3, [sp, #12]
 8009b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b84:	444b      	add	r3, r9
 8009b86:	9309      	str	r3, [sp, #36]	; 0x24
 8009b88:	e76d      	b.n	8009a66 <_svfiprintf_r+0x4a>
 8009b8a:	fb05 3202 	mla	r2, r5, r2, r3
 8009b8e:	2001      	movs	r0, #1
 8009b90:	460f      	mov	r7, r1
 8009b92:	e7a6      	b.n	8009ae2 <_svfiprintf_r+0xc6>
 8009b94:	2300      	movs	r3, #0
 8009b96:	250a      	movs	r5, #10
 8009b98:	4619      	mov	r1, r3
 8009b9a:	3701      	adds	r7, #1
 8009b9c:	9305      	str	r3, [sp, #20]
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ba4:	3a30      	subs	r2, #48	; 0x30
 8009ba6:	2a09      	cmp	r2, #9
 8009ba8:	d903      	bls.n	8009bb2 <_svfiprintf_r+0x196>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0c8      	beq.n	8009b40 <_svfiprintf_r+0x124>
 8009bae:	9105      	str	r1, [sp, #20]
 8009bb0:	e7c6      	b.n	8009b40 <_svfiprintf_r+0x124>
 8009bb2:	fb05 2101 	mla	r1, r5, r1, r2
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4607      	mov	r7, r0
 8009bba:	e7f0      	b.n	8009b9e <_svfiprintf_r+0x182>
 8009bbc:	ab03      	add	r3, sp, #12
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4b11      	ldr	r3, [pc, #68]	; (8009c08 <_svfiprintf_r+0x1ec>)
 8009bc4:	a904      	add	r1, sp, #16
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	f7fc fb4e 	bl	8006268 <_printf_float>
 8009bcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009bd0:	4681      	mov	r9, r0
 8009bd2:	d1d6      	bne.n	8009b82 <_svfiprintf_r+0x166>
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	065b      	lsls	r3, r3, #25
 8009bd8:	f53f af35 	bmi.w	8009a46 <_svfiprintf_r+0x2a>
 8009bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bde:	b01d      	add	sp, #116	; 0x74
 8009be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be4:	ab03      	add	r3, sp, #12
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	4622      	mov	r2, r4
 8009bea:	4b07      	ldr	r3, [pc, #28]	; (8009c08 <_svfiprintf_r+0x1ec>)
 8009bec:	a904      	add	r1, sp, #16
 8009bee:	4640      	mov	r0, r8
 8009bf0:	f7fc fde6 	bl	80067c0 <_printf_i>
 8009bf4:	e7ea      	b.n	8009bcc <_svfiprintf_r+0x1b0>
 8009bf6:	bf00      	nop
 8009bf8:	0800ba84 	.word	0x0800ba84
 8009bfc:	0800ba8a 	.word	0x0800ba8a
 8009c00:	0800ba8e 	.word	0x0800ba8e
 8009c04:	08006269 	.word	0x08006269
 8009c08:	08009969 	.word	0x08009969

08009c0c <_sbrk_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	2300      	movs	r3, #0
 8009c10:	4c05      	ldr	r4, [pc, #20]	; (8009c28 <_sbrk_r+0x1c>)
 8009c12:	4605      	mov	r5, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	f7f8 f856 	bl	8001cc8 <_sbrk>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_sbrk_r+0x1a>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_sbrk_r+0x1a>
 8009c24:	602b      	str	r3, [r5, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	20001b94 	.word	0x20001b94

08009c2c <strncmp>:
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	b16a      	cbz	r2, 8009c4c <strncmp+0x20>
 8009c30:	3901      	subs	r1, #1
 8009c32:	1884      	adds	r4, r0, r2
 8009c34:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009c38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d103      	bne.n	8009c48 <strncmp+0x1c>
 8009c40:	42a0      	cmp	r0, r4
 8009c42:	d001      	beq.n	8009c48 <strncmp+0x1c>
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1f5      	bne.n	8009c34 <strncmp+0x8>
 8009c48:	1a98      	subs	r0, r3, r2
 8009c4a:	bd10      	pop	{r4, pc}
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	e7fc      	b.n	8009c4a <strncmp+0x1e>

08009c50 <__ascii_wctomb>:
 8009c50:	b149      	cbz	r1, 8009c66 <__ascii_wctomb+0x16>
 8009c52:	2aff      	cmp	r2, #255	; 0xff
 8009c54:	bf8b      	itete	hi
 8009c56:	238a      	movhi	r3, #138	; 0x8a
 8009c58:	700a      	strbls	r2, [r1, #0]
 8009c5a:	6003      	strhi	r3, [r0, #0]
 8009c5c:	2001      	movls	r0, #1
 8009c5e:	bf88      	it	hi
 8009c60:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c64:	4770      	bx	lr
 8009c66:	4608      	mov	r0, r1
 8009c68:	4770      	bx	lr

08009c6a <memmove>:
 8009c6a:	4288      	cmp	r0, r1
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	eb01 0302 	add.w	r3, r1, r2
 8009c72:	d807      	bhi.n	8009c84 <memmove+0x1a>
 8009c74:	1e42      	subs	r2, r0, #1
 8009c76:	4299      	cmp	r1, r3
 8009c78:	d00a      	beq.n	8009c90 <memmove+0x26>
 8009c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c7e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009c82:	e7f8      	b.n	8009c76 <memmove+0xc>
 8009c84:	4283      	cmp	r3, r0
 8009c86:	d9f5      	bls.n	8009c74 <memmove+0xa>
 8009c88:	1881      	adds	r1, r0, r2
 8009c8a:	1ad2      	subs	r2, r2, r3
 8009c8c:	42d3      	cmn	r3, r2
 8009c8e:	d100      	bne.n	8009c92 <memmove+0x28>
 8009c90:	bd10      	pop	{r4, pc}
 8009c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009c9a:	e7f7      	b.n	8009c8c <memmove+0x22>

08009c9c <__malloc_lock>:
 8009c9c:	4770      	bx	lr

08009c9e <__malloc_unlock>:
 8009c9e:	4770      	bx	lr

08009ca0 <_realloc_r>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	460e      	mov	r6, r1
 8009ca8:	b921      	cbnz	r1, 8009cb4 <_realloc_r+0x14>
 8009caa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cae:	4611      	mov	r1, r2
 8009cb0:	f7ff be00 	b.w	80098b4 <_malloc_r>
 8009cb4:	b922      	cbnz	r2, 8009cc0 <_realloc_r+0x20>
 8009cb6:	f7ff fdb1 	bl	800981c <_free_r>
 8009cba:	4625      	mov	r5, r4
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc0:	f000 f814 	bl	8009cec <_malloc_usable_size_r>
 8009cc4:	42a0      	cmp	r0, r4
 8009cc6:	d20f      	bcs.n	8009ce8 <_realloc_r+0x48>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4638      	mov	r0, r7
 8009ccc:	f7ff fdf2 	bl	80098b4 <_malloc_r>
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d0f2      	beq.n	8009cbc <_realloc_r+0x1c>
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4622      	mov	r2, r4
 8009cda:	f7ff f98d 	bl	8008ff8 <memcpy>
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f7ff fd9b 	bl	800981c <_free_r>
 8009ce6:	e7e9      	b.n	8009cbc <_realloc_r+0x1c>
 8009ce8:	4635      	mov	r5, r6
 8009cea:	e7e7      	b.n	8009cbc <_realloc_r+0x1c>

08009cec <_malloc_usable_size_r>:
 8009cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf0:	1f18      	subs	r0, r3, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfbc      	itt	lt
 8009cf6:	580b      	ldrlt	r3, [r1, r0]
 8009cf8:	18c0      	addlt	r0, r0, r3
 8009cfa:	4770      	bx	lr
 8009cfc:	0000      	movs	r0, r0
	...

08009d00 <atan>:
 8009d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	4bb6      	ldr	r3, [pc, #728]	; (8009fe0 <atan+0x2e0>)
 8009d06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009d0a:	429e      	cmp	r6, r3
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	460d      	mov	r5, r1
 8009d10:	468b      	mov	fp, r1
 8009d12:	dd17      	ble.n	8009d44 <atan+0x44>
 8009d14:	4bb3      	ldr	r3, [pc, #716]	; (8009fe4 <atan+0x2e4>)
 8009d16:	429e      	cmp	r6, r3
 8009d18:	dc01      	bgt.n	8009d1e <atan+0x1e>
 8009d1a:	d109      	bne.n	8009d30 <atan+0x30>
 8009d1c:	b140      	cbz	r0, 8009d30 <atan+0x30>
 8009d1e:	4622      	mov	r2, r4
 8009d20:	462b      	mov	r3, r5
 8009d22:	4620      	mov	r0, r4
 8009d24:	4629      	mov	r1, r5
 8009d26:	f7f6 fa21 	bl	800016c <__adddf3>
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	460d      	mov	r5, r1
 8009d2e:	e005      	b.n	8009d3c <atan+0x3c>
 8009d30:	f1bb 0f00 	cmp.w	fp, #0
 8009d34:	4cac      	ldr	r4, [pc, #688]	; (8009fe8 <atan+0x2e8>)
 8009d36:	f340 8121 	ble.w	8009f7c <atan+0x27c>
 8009d3a:	4dac      	ldr	r5, [pc, #688]	; (8009fec <atan+0x2ec>)
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	4629      	mov	r1, r5
 8009d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d44:	4baa      	ldr	r3, [pc, #680]	; (8009ff0 <atan+0x2f0>)
 8009d46:	429e      	cmp	r6, r3
 8009d48:	dc11      	bgt.n	8009d6e <atan+0x6e>
 8009d4a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009d4e:	429e      	cmp	r6, r3
 8009d50:	dc0a      	bgt.n	8009d68 <atan+0x68>
 8009d52:	a38b      	add	r3, pc, #556	; (adr r3, 8009f80 <atan+0x280>)
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f7f6 fa08 	bl	800016c <__adddf3>
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	4ba5      	ldr	r3, [pc, #660]	; (8009ff4 <atan+0x2f4>)
 8009d60:	f7f6 fe4a 	bl	80009f8 <__aeabi_dcmpgt>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d1e9      	bne.n	8009d3c <atan+0x3c>
 8009d68:	f04f 3aff 	mov.w	sl, #4294967295
 8009d6c:	e027      	b.n	8009dbe <atan+0xbe>
 8009d6e:	f000 f987 	bl	800a080 <fabs>
 8009d72:	4ba1      	ldr	r3, [pc, #644]	; (8009ff8 <atan+0x2f8>)
 8009d74:	4604      	mov	r4, r0
 8009d76:	429e      	cmp	r6, r3
 8009d78:	460d      	mov	r5, r1
 8009d7a:	f300 80b8 	bgt.w	8009eee <atan+0x1ee>
 8009d7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009d82:	429e      	cmp	r6, r3
 8009d84:	f300 809c 	bgt.w	8009ec0 <atan+0x1c0>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	f7f6 f9ee 	bl	800016c <__adddf3>
 8009d90:	2200      	movs	r2, #0
 8009d92:	4b98      	ldr	r3, [pc, #608]	; (8009ff4 <atan+0x2f4>)
 8009d94:	f7f6 f9e8 	bl	8000168 <__aeabi_dsub>
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009da2:	4620      	mov	r0, r4
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7f6 f9e1 	bl	800016c <__adddf3>
 8009daa:	4602      	mov	r2, r0
 8009dac:	460b      	mov	r3, r1
 8009dae:	4630      	mov	r0, r6
 8009db0:	4639      	mov	r1, r7
 8009db2:	f7f6 fcbb 	bl	800072c <__aeabi_ddiv>
 8009db6:	f04f 0a00 	mov.w	sl, #0
 8009dba:	4604      	mov	r4, r0
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	4622      	mov	r2, r4
 8009dc0:	462b      	mov	r3, r5
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	f7f6 fb87 	bl	80004d8 <__aeabi_dmul>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4680      	mov	r8, r0
 8009dd0:	4689      	mov	r9, r1
 8009dd2:	f7f6 fb81 	bl	80004d8 <__aeabi_dmul>
 8009dd6:	a36c      	add	r3, pc, #432	; (adr r3, 8009f88 <atan+0x288>)
 8009dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ddc:	4606      	mov	r6, r0
 8009dde:	460f      	mov	r7, r1
 8009de0:	f7f6 fb7a 	bl	80004d8 <__aeabi_dmul>
 8009de4:	a36a      	add	r3, pc, #424	; (adr r3, 8009f90 <atan+0x290>)
 8009de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dea:	f7f6 f9bf 	bl	800016c <__adddf3>
 8009dee:	4632      	mov	r2, r6
 8009df0:	463b      	mov	r3, r7
 8009df2:	f7f6 fb71 	bl	80004d8 <__aeabi_dmul>
 8009df6:	a368      	add	r3, pc, #416	; (adr r3, 8009f98 <atan+0x298>)
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	f7f6 f9b6 	bl	800016c <__adddf3>
 8009e00:	4632      	mov	r2, r6
 8009e02:	463b      	mov	r3, r7
 8009e04:	f7f6 fb68 	bl	80004d8 <__aeabi_dmul>
 8009e08:	a365      	add	r3, pc, #404	; (adr r3, 8009fa0 <atan+0x2a0>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	f7f6 f9ad 	bl	800016c <__adddf3>
 8009e12:	4632      	mov	r2, r6
 8009e14:	463b      	mov	r3, r7
 8009e16:	f7f6 fb5f 	bl	80004d8 <__aeabi_dmul>
 8009e1a:	a363      	add	r3, pc, #396	; (adr r3, 8009fa8 <atan+0x2a8>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f7f6 f9a4 	bl	800016c <__adddf3>
 8009e24:	4632      	mov	r2, r6
 8009e26:	463b      	mov	r3, r7
 8009e28:	f7f6 fb56 	bl	80004d8 <__aeabi_dmul>
 8009e2c:	a360      	add	r3, pc, #384	; (adr r3, 8009fb0 <atan+0x2b0>)
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f7f6 f99b 	bl	800016c <__adddf3>
 8009e36:	4642      	mov	r2, r8
 8009e38:	464b      	mov	r3, r9
 8009e3a:	f7f6 fb4d 	bl	80004d8 <__aeabi_dmul>
 8009e3e:	a35e      	add	r3, pc, #376	; (adr r3, 8009fb8 <atan+0x2b8>)
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	4680      	mov	r8, r0
 8009e46:	4689      	mov	r9, r1
 8009e48:	4630      	mov	r0, r6
 8009e4a:	4639      	mov	r1, r7
 8009e4c:	f7f6 fb44 	bl	80004d8 <__aeabi_dmul>
 8009e50:	a35b      	add	r3, pc, #364	; (adr r3, 8009fc0 <atan+0x2c0>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 f987 	bl	8000168 <__aeabi_dsub>
 8009e5a:	4632      	mov	r2, r6
 8009e5c:	463b      	mov	r3, r7
 8009e5e:	f7f6 fb3b 	bl	80004d8 <__aeabi_dmul>
 8009e62:	a359      	add	r3, pc, #356	; (adr r3, 8009fc8 <atan+0x2c8>)
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f7f6 f97e 	bl	8000168 <__aeabi_dsub>
 8009e6c:	4632      	mov	r2, r6
 8009e6e:	463b      	mov	r3, r7
 8009e70:	f7f6 fb32 	bl	80004d8 <__aeabi_dmul>
 8009e74:	a356      	add	r3, pc, #344	; (adr r3, 8009fd0 <atan+0x2d0>)
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	f7f6 f975 	bl	8000168 <__aeabi_dsub>
 8009e7e:	4632      	mov	r2, r6
 8009e80:	463b      	mov	r3, r7
 8009e82:	f7f6 fb29 	bl	80004d8 <__aeabi_dmul>
 8009e86:	a354      	add	r3, pc, #336	; (adr r3, 8009fd8 <atan+0x2d8>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 f96c 	bl	8000168 <__aeabi_dsub>
 8009e90:	4632      	mov	r2, r6
 8009e92:	463b      	mov	r3, r7
 8009e94:	f7f6 fb20 	bl	80004d8 <__aeabi_dmul>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4640      	mov	r0, r8
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	f7f6 f964 	bl	800016c <__adddf3>
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	462b      	mov	r3, r5
 8009ea8:	f7f6 fb16 	bl	80004d8 <__aeabi_dmul>
 8009eac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	d144      	bne.n	8009f40 <atan+0x240>
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	4629      	mov	r1, r5
 8009eba:	f7f6 f955 	bl	8000168 <__aeabi_dsub>
 8009ebe:	e734      	b.n	8009d2a <atan+0x2a>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	4b4c      	ldr	r3, [pc, #304]	; (8009ff4 <atan+0x2f4>)
 8009ec4:	f7f6 f950 	bl	8000168 <__aeabi_dsub>
 8009ec8:	2200      	movs	r2, #0
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460f      	mov	r7, r1
 8009ece:	4b49      	ldr	r3, [pc, #292]	; (8009ff4 <atan+0x2f4>)
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	f7f6 f94a 	bl	800016c <__adddf3>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4630      	mov	r0, r6
 8009ede:	4639      	mov	r1, r7
 8009ee0:	f7f6 fc24 	bl	800072c <__aeabi_ddiv>
 8009ee4:	f04f 0a01 	mov.w	sl, #1
 8009ee8:	4604      	mov	r4, r0
 8009eea:	460d      	mov	r5, r1
 8009eec:	e767      	b.n	8009dbe <atan+0xbe>
 8009eee:	4b43      	ldr	r3, [pc, #268]	; (8009ffc <atan+0x2fc>)
 8009ef0:	429e      	cmp	r6, r3
 8009ef2:	dc1a      	bgt.n	8009f2a <atan+0x22a>
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4b42      	ldr	r3, [pc, #264]	; (800a000 <atan+0x300>)
 8009ef8:	f7f6 f936 	bl	8000168 <__aeabi_dsub>
 8009efc:	2200      	movs	r2, #0
 8009efe:	4606      	mov	r6, r0
 8009f00:	460f      	mov	r7, r1
 8009f02:	4b3f      	ldr	r3, [pc, #252]	; (800a000 <atan+0x300>)
 8009f04:	4620      	mov	r0, r4
 8009f06:	4629      	mov	r1, r5
 8009f08:	f7f6 fae6 	bl	80004d8 <__aeabi_dmul>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4b39      	ldr	r3, [pc, #228]	; (8009ff4 <atan+0x2f4>)
 8009f10:	f7f6 f92c 	bl	800016c <__adddf3>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4630      	mov	r0, r6
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	f7f6 fc06 	bl	800072c <__aeabi_ddiv>
 8009f20:	f04f 0a02 	mov.w	sl, #2
 8009f24:	4604      	mov	r4, r0
 8009f26:	460d      	mov	r5, r1
 8009f28:	e749      	b.n	8009dbe <atan+0xbe>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	2000      	movs	r0, #0
 8009f30:	4934      	ldr	r1, [pc, #208]	; (800a004 <atan+0x304>)
 8009f32:	f7f6 fbfb 	bl	800072c <__aeabi_ddiv>
 8009f36:	f04f 0a03 	mov.w	sl, #3
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	460d      	mov	r5, r1
 8009f3e:	e73e      	b.n	8009dbe <atan+0xbe>
 8009f40:	4b31      	ldr	r3, [pc, #196]	; (800a008 <atan+0x308>)
 8009f42:	4e32      	ldr	r6, [pc, #200]	; (800a00c <atan+0x30c>)
 8009f44:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009f48:	4456      	add	r6, sl
 8009f4a:	449a      	add	sl, r3
 8009f4c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009f50:	f7f6 f90a 	bl	8000168 <__aeabi_dsub>
 8009f54:	4622      	mov	r2, r4
 8009f56:	462b      	mov	r3, r5
 8009f58:	f7f6 f906 	bl	8000168 <__aeabi_dsub>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009f64:	f7f6 f900 	bl	8000168 <__aeabi_dsub>
 8009f68:	f1bb 0f00 	cmp.w	fp, #0
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	f6bf aee4 	bge.w	8009d3c <atan+0x3c>
 8009f74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f78:	461d      	mov	r5, r3
 8009f7a:	e6df      	b.n	8009d3c <atan+0x3c>
 8009f7c:	4d24      	ldr	r5, [pc, #144]	; (800a010 <atan+0x310>)
 8009f7e:	e6dd      	b.n	8009d3c <atan+0x3c>
 8009f80:	8800759c 	.word	0x8800759c
 8009f84:	7e37e43c 	.word	0x7e37e43c
 8009f88:	e322da11 	.word	0xe322da11
 8009f8c:	3f90ad3a 	.word	0x3f90ad3a
 8009f90:	24760deb 	.word	0x24760deb
 8009f94:	3fa97b4b 	.word	0x3fa97b4b
 8009f98:	a0d03d51 	.word	0xa0d03d51
 8009f9c:	3fb10d66 	.word	0x3fb10d66
 8009fa0:	c54c206e 	.word	0xc54c206e
 8009fa4:	3fb745cd 	.word	0x3fb745cd
 8009fa8:	920083ff 	.word	0x920083ff
 8009fac:	3fc24924 	.word	0x3fc24924
 8009fb0:	5555550d 	.word	0x5555550d
 8009fb4:	3fd55555 	.word	0x3fd55555
 8009fb8:	2c6a6c2f 	.word	0x2c6a6c2f
 8009fbc:	bfa2b444 	.word	0xbfa2b444
 8009fc0:	52defd9a 	.word	0x52defd9a
 8009fc4:	3fadde2d 	.word	0x3fadde2d
 8009fc8:	af749a6d 	.word	0xaf749a6d
 8009fcc:	3fb3b0f2 	.word	0x3fb3b0f2
 8009fd0:	fe231671 	.word	0xfe231671
 8009fd4:	3fbc71c6 	.word	0x3fbc71c6
 8009fd8:	9998ebc4 	.word	0x9998ebc4
 8009fdc:	3fc99999 	.word	0x3fc99999
 8009fe0:	440fffff 	.word	0x440fffff
 8009fe4:	7ff00000 	.word	0x7ff00000
 8009fe8:	54442d18 	.word	0x54442d18
 8009fec:	3ff921fb 	.word	0x3ff921fb
 8009ff0:	3fdbffff 	.word	0x3fdbffff
 8009ff4:	3ff00000 	.word	0x3ff00000
 8009ff8:	3ff2ffff 	.word	0x3ff2ffff
 8009ffc:	40037fff 	.word	0x40037fff
 800a000:	3ff80000 	.word	0x3ff80000
 800a004:	bff00000 	.word	0xbff00000
 800a008:	0800bbb8 	.word	0x0800bbb8
 800a00c:	0800bb98 	.word	0x0800bb98
 800a010:	bff921fb 	.word	0xbff921fb

0800a014 <cos>:
 800a014:	b530      	push	{r4, r5, lr}
 800a016:	4a18      	ldr	r2, [pc, #96]	; (800a078 <cos+0x64>)
 800a018:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a01c:	4293      	cmp	r3, r2
 800a01e:	b087      	sub	sp, #28
 800a020:	dc04      	bgt.n	800a02c <cos+0x18>
 800a022:	2200      	movs	r2, #0
 800a024:	2300      	movs	r3, #0
 800a026:	f000 fdfb 	bl	800ac20 <__kernel_cos>
 800a02a:	e006      	b.n	800a03a <cos+0x26>
 800a02c:	4a13      	ldr	r2, [pc, #76]	; (800a07c <cos+0x68>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	dd05      	ble.n	800a03e <cos+0x2a>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	f7f6 f897 	bl	8000168 <__aeabi_dsub>
 800a03a:	b007      	add	sp, #28
 800a03c:	bd30      	pop	{r4, r5, pc}
 800a03e:	aa02      	add	r2, sp, #8
 800a040:	f000 fb52 	bl	800a6e8 <__ieee754_rem_pio2>
 800a044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a048:	f000 0403 	and.w	r4, r0, #3
 800a04c:	2c01      	cmp	r4, #1
 800a04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a052:	d008      	beq.n	800a066 <cos+0x52>
 800a054:	2c02      	cmp	r4, #2
 800a056:	d00c      	beq.n	800a072 <cos+0x5e>
 800a058:	2c00      	cmp	r4, #0
 800a05a:	d0e4      	beq.n	800a026 <cos+0x12>
 800a05c:	2401      	movs	r4, #1
 800a05e:	9400      	str	r4, [sp, #0]
 800a060:	f001 f9e6 	bl	800b430 <__kernel_sin>
 800a064:	e7e9      	b.n	800a03a <cos+0x26>
 800a066:	9400      	str	r4, [sp, #0]
 800a068:	f001 f9e2 	bl	800b430 <__kernel_sin>
 800a06c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a070:	e7e3      	b.n	800a03a <cos+0x26>
 800a072:	f000 fdd5 	bl	800ac20 <__kernel_cos>
 800a076:	e7f9      	b.n	800a06c <cos+0x58>
 800a078:	3fe921fb 	.word	0x3fe921fb
 800a07c:	7fefffff 	.word	0x7fefffff

0800a080 <fabs>:
 800a080:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a084:	4619      	mov	r1, r3
 800a086:	4770      	bx	lr

0800a088 <sin>:
 800a088:	b530      	push	{r4, r5, lr}
 800a08a:	4a1a      	ldr	r2, [pc, #104]	; (800a0f4 <sin+0x6c>)
 800a08c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a090:	4293      	cmp	r3, r2
 800a092:	b087      	sub	sp, #28
 800a094:	dc06      	bgt.n	800a0a4 <sin+0x1c>
 800a096:	2300      	movs	r3, #0
 800a098:	2200      	movs	r2, #0
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	2300      	movs	r3, #0
 800a09e:	f001 f9c7 	bl	800b430 <__kernel_sin>
 800a0a2:	e006      	b.n	800a0b2 <sin+0x2a>
 800a0a4:	4a14      	ldr	r2, [pc, #80]	; (800a0f8 <sin+0x70>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	dd05      	ble.n	800a0b6 <sin+0x2e>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	f7f6 f85b 	bl	8000168 <__aeabi_dsub>
 800a0b2:	b007      	add	sp, #28
 800a0b4:	bd30      	pop	{r4, r5, pc}
 800a0b6:	aa02      	add	r2, sp, #8
 800a0b8:	f000 fb16 	bl	800a6e8 <__ieee754_rem_pio2>
 800a0bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0c0:	f000 0403 	and.w	r4, r0, #3
 800a0c4:	2c01      	cmp	r4, #1
 800a0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ca:	d005      	beq.n	800a0d8 <sin+0x50>
 800a0cc:	2c02      	cmp	r4, #2
 800a0ce:	d006      	beq.n	800a0de <sin+0x56>
 800a0d0:	b964      	cbnz	r4, 800a0ec <sin+0x64>
 800a0d2:	2401      	movs	r4, #1
 800a0d4:	9400      	str	r4, [sp, #0]
 800a0d6:	e7e2      	b.n	800a09e <sin+0x16>
 800a0d8:	f000 fda2 	bl	800ac20 <__kernel_cos>
 800a0dc:	e7e9      	b.n	800a0b2 <sin+0x2a>
 800a0de:	2401      	movs	r4, #1
 800a0e0:	9400      	str	r4, [sp, #0]
 800a0e2:	f001 f9a5 	bl	800b430 <__kernel_sin>
 800a0e6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a0ea:	e7e2      	b.n	800a0b2 <sin+0x2a>
 800a0ec:	f000 fd98 	bl	800ac20 <__kernel_cos>
 800a0f0:	e7f9      	b.n	800a0e6 <sin+0x5e>
 800a0f2:	bf00      	nop
 800a0f4:	3fe921fb 	.word	0x3fe921fb
 800a0f8:	7fefffff 	.word	0x7fefffff

0800a0fc <acos>:
 800a0fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a100:	b08b      	sub	sp, #44	; 0x2c
 800a102:	4604      	mov	r4, r0
 800a104:	460d      	mov	r5, r1
 800a106:	f000 f8a3 	bl	800a250 <__ieee754_acos>
 800a10a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800a1a0 <acos+0xa4>
 800a10e:	4606      	mov	r6, r0
 800a110:	f998 3000 	ldrsb.w	r3, [r8]
 800a114:	460f      	mov	r7, r1
 800a116:	3301      	adds	r3, #1
 800a118:	d036      	beq.n	800a188 <acos+0x8c>
 800a11a:	4622      	mov	r2, r4
 800a11c:	462b      	mov	r3, r5
 800a11e:	4620      	mov	r0, r4
 800a120:	4629      	mov	r1, r5
 800a122:	f7f6 fc73 	bl	8000a0c <__aeabi_dcmpun>
 800a126:	4681      	mov	r9, r0
 800a128:	2800      	cmp	r0, #0
 800a12a:	d12d      	bne.n	800a188 <acos+0x8c>
 800a12c:	4620      	mov	r0, r4
 800a12e:	4629      	mov	r1, r5
 800a130:	f7ff ffa6 	bl	800a080 <fabs>
 800a134:	2200      	movs	r2, #0
 800a136:	4b17      	ldr	r3, [pc, #92]	; (800a194 <acos+0x98>)
 800a138:	f7f6 fc5e 	bl	80009f8 <__aeabi_dcmpgt>
 800a13c:	b320      	cbz	r0, 800a188 <acos+0x8c>
 800a13e:	2301      	movs	r3, #1
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	4b15      	ldr	r3, [pc, #84]	; (800a198 <acos+0x9c>)
 800a144:	4815      	ldr	r0, [pc, #84]	; (800a19c <acos+0xa0>)
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	f8cd 9020 	str.w	r9, [sp, #32]
 800a14c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a150:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a154:	f001 faaa 	bl	800b6ac <nan>
 800a158:	f998 3000 	ldrsb.w	r3, [r8]
 800a15c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a160:	2b02      	cmp	r3, #2
 800a162:	d104      	bne.n	800a16e <acos+0x72>
 800a164:	f7fb ffbc 	bl	80060e0 <__errno>
 800a168:	2321      	movs	r3, #33	; 0x21
 800a16a:	6003      	str	r3, [r0, #0]
 800a16c:	e004      	b.n	800a178 <acos+0x7c>
 800a16e:	4668      	mov	r0, sp
 800a170:	f001 fa9a 	bl	800b6a8 <matherr>
 800a174:	2800      	cmp	r0, #0
 800a176:	d0f5      	beq.n	800a164 <acos+0x68>
 800a178:	9b08      	ldr	r3, [sp, #32]
 800a17a:	b11b      	cbz	r3, 800a184 <acos+0x88>
 800a17c:	f7fb ffb0 	bl	80060e0 <__errno>
 800a180:	9b08      	ldr	r3, [sp, #32]
 800a182:	6003      	str	r3, [r0, #0]
 800a184:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800a188:	4630      	mov	r0, r6
 800a18a:	4639      	mov	r1, r7
 800a18c:	b00b      	add	sp, #44	; 0x2c
 800a18e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a192:	bf00      	nop
 800a194:	3ff00000 	.word	0x3ff00000
 800a198:	0800bbd8 	.word	0x0800bbd8
 800a19c:	0800b825 	.word	0x0800b825
 800a1a0:	20000370 	.word	0x20000370

0800a1a4 <sqrt>:
 800a1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a8:	b08b      	sub	sp, #44	; 0x2c
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	f000 fc8b 	bl	800aac8 <__ieee754_sqrt>
 800a1b2:	4b24      	ldr	r3, [pc, #144]	; (800a244 <sqrt+0xa0>)
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	f993 a000 	ldrsb.w	sl, [r3]
 800a1ba:	4689      	mov	r9, r1
 800a1bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a1c0:	d02b      	beq.n	800a21a <sqrt+0x76>
 800a1c2:	4622      	mov	r2, r4
 800a1c4:	462b      	mov	r3, r5
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	f7f6 fc1f 	bl	8000a0c <__aeabi_dcmpun>
 800a1ce:	4683      	mov	fp, r0
 800a1d0:	bb18      	cbnz	r0, 800a21a <sqrt+0x76>
 800a1d2:	2600      	movs	r6, #0
 800a1d4:	2700      	movs	r7, #0
 800a1d6:	4632      	mov	r2, r6
 800a1d8:	463b      	mov	r3, r7
 800a1da:	4620      	mov	r0, r4
 800a1dc:	4629      	mov	r1, r5
 800a1de:	f7f6 fbed 	bl	80009bc <__aeabi_dcmplt>
 800a1e2:	b1d0      	cbz	r0, 800a21a <sqrt+0x76>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	4b17      	ldr	r3, [pc, #92]	; (800a248 <sqrt+0xa4>)
 800a1ea:	f8cd b020 	str.w	fp, [sp, #32]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a1f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a1f8:	f1ba 0f00 	cmp.w	sl, #0
 800a1fc:	d112      	bne.n	800a224 <sqrt+0x80>
 800a1fe:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a202:	4668      	mov	r0, sp
 800a204:	f001 fa50 	bl	800b6a8 <matherr>
 800a208:	b1b8      	cbz	r0, 800a23a <sqrt+0x96>
 800a20a:	9b08      	ldr	r3, [sp, #32]
 800a20c:	b11b      	cbz	r3, 800a216 <sqrt+0x72>
 800a20e:	f7fb ff67 	bl	80060e0 <__errno>
 800a212:	9b08      	ldr	r3, [sp, #32]
 800a214:	6003      	str	r3, [r0, #0]
 800a216:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	b00b      	add	sp, #44	; 0x2c
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a224:	4632      	mov	r2, r6
 800a226:	463b      	mov	r3, r7
 800a228:	4630      	mov	r0, r6
 800a22a:	4639      	mov	r1, r7
 800a22c:	f7f6 fa7e 	bl	800072c <__aeabi_ddiv>
 800a230:	f1ba 0f02 	cmp.w	sl, #2
 800a234:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a238:	d1e3      	bne.n	800a202 <sqrt+0x5e>
 800a23a:	f7fb ff51 	bl	80060e0 <__errno>
 800a23e:	2321      	movs	r3, #33	; 0x21
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	e7e2      	b.n	800a20a <sqrt+0x66>
 800a244:	20000370 	.word	0x20000370
 800a248:	0800bbdd 	.word	0x0800bbdd
 800a24c:	00000000 	.word	0x00000000

0800a250 <__ieee754_acos>:
 800a250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	4cb2      	ldr	r4, [pc, #712]	; (800a520 <__ieee754_acos+0x2d0>)
 800a256:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a25a:	42a3      	cmp	r3, r4
 800a25c:	4607      	mov	r7, r0
 800a25e:	460e      	mov	r6, r1
 800a260:	dd16      	ble.n	800a290 <__ieee754_acos+0x40>
 800a262:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a266:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a26a:	4303      	orrs	r3, r0
 800a26c:	d107      	bne.n	800a27e <__ieee754_acos+0x2e>
 800a26e:	2900      	cmp	r1, #0
 800a270:	f300 8202 	bgt.w	800a678 <__ieee754_acos+0x428>
 800a274:	a190      	add	r1, pc, #576	; (adr r1, 800a4b8 <__ieee754_acos+0x268>)
 800a276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a27a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	f7f5 ff71 	bl	8000168 <__aeabi_dsub>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	f7f6 fa4f 	bl	800072c <__aeabi_ddiv>
 800a28e:	e7f4      	b.n	800a27a <__ieee754_acos+0x2a>
 800a290:	4ca4      	ldr	r4, [pc, #656]	; (800a524 <__ieee754_acos+0x2d4>)
 800a292:	42a3      	cmp	r3, r4
 800a294:	f300 8083 	bgt.w	800a39e <__ieee754_acos+0x14e>
 800a298:	4aa3      	ldr	r2, [pc, #652]	; (800a528 <__ieee754_acos+0x2d8>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	f340 81ef 	ble.w	800a67e <__ieee754_acos+0x42e>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	f7f6 f918 	bl	80004d8 <__aeabi_dmul>
 800a2a8:	a385      	add	r3, pc, #532	; (adr r3, 800a4c0 <__ieee754_acos+0x270>)
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	460d      	mov	r5, r1
 800a2b2:	f7f6 f911 	bl	80004d8 <__aeabi_dmul>
 800a2b6:	a384      	add	r3, pc, #528	; (adr r3, 800a4c8 <__ieee754_acos+0x278>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f7f5 ff56 	bl	800016c <__adddf3>
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	462b      	mov	r3, r5
 800a2c4:	f7f6 f908 	bl	80004d8 <__aeabi_dmul>
 800a2c8:	a381      	add	r3, pc, #516	; (adr r3, 800a4d0 <__ieee754_acos+0x280>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f5 ff4b 	bl	8000168 <__aeabi_dsub>
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	462b      	mov	r3, r5
 800a2d6:	f7f6 f8ff 	bl	80004d8 <__aeabi_dmul>
 800a2da:	a37f      	add	r3, pc, #508	; (adr r3, 800a4d8 <__ieee754_acos+0x288>)
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	f7f5 ff44 	bl	800016c <__adddf3>
 800a2e4:	4622      	mov	r2, r4
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	f7f6 f8f6 	bl	80004d8 <__aeabi_dmul>
 800a2ec:	a37c      	add	r3, pc, #496	; (adr r3, 800a4e0 <__ieee754_acos+0x290>)
 800a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f2:	f7f5 ff39 	bl	8000168 <__aeabi_dsub>
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	462b      	mov	r3, r5
 800a2fa:	f7f6 f8ed 	bl	80004d8 <__aeabi_dmul>
 800a2fe:	a37a      	add	r3, pc, #488	; (adr r3, 800a4e8 <__ieee754_acos+0x298>)
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	f7f5 ff32 	bl	800016c <__adddf3>
 800a308:	4622      	mov	r2, r4
 800a30a:	462b      	mov	r3, r5
 800a30c:	f7f6 f8e4 	bl	80004d8 <__aeabi_dmul>
 800a310:	a377      	add	r3, pc, #476	; (adr r3, 800a4f0 <__ieee754_acos+0x2a0>)
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	4680      	mov	r8, r0
 800a318:	4689      	mov	r9, r1
 800a31a:	4620      	mov	r0, r4
 800a31c:	4629      	mov	r1, r5
 800a31e:	f7f6 f8db 	bl	80004d8 <__aeabi_dmul>
 800a322:	a375      	add	r3, pc, #468	; (adr r3, 800a4f8 <__ieee754_acos+0x2a8>)
 800a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a328:	f7f5 ff1e 	bl	8000168 <__aeabi_dsub>
 800a32c:	4622      	mov	r2, r4
 800a32e:	462b      	mov	r3, r5
 800a330:	f7f6 f8d2 	bl	80004d8 <__aeabi_dmul>
 800a334:	a372      	add	r3, pc, #456	; (adr r3, 800a500 <__ieee754_acos+0x2b0>)
 800a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33a:	f7f5 ff17 	bl	800016c <__adddf3>
 800a33e:	4622      	mov	r2, r4
 800a340:	462b      	mov	r3, r5
 800a342:	f7f6 f8c9 	bl	80004d8 <__aeabi_dmul>
 800a346:	a370      	add	r3, pc, #448	; (adr r3, 800a508 <__ieee754_acos+0x2b8>)
 800a348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34c:	f7f5 ff0c 	bl	8000168 <__aeabi_dsub>
 800a350:	4622      	mov	r2, r4
 800a352:	462b      	mov	r3, r5
 800a354:	f7f6 f8c0 	bl	80004d8 <__aeabi_dmul>
 800a358:	2200      	movs	r2, #0
 800a35a:	4b74      	ldr	r3, [pc, #464]	; (800a52c <__ieee754_acos+0x2dc>)
 800a35c:	f7f5 ff06 	bl	800016c <__adddf3>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4640      	mov	r0, r8
 800a366:	4649      	mov	r1, r9
 800a368:	f7f6 f9e0 	bl	800072c <__aeabi_ddiv>
 800a36c:	463a      	mov	r2, r7
 800a36e:	4633      	mov	r3, r6
 800a370:	f7f6 f8b2 	bl	80004d8 <__aeabi_dmul>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	a165      	add	r1, pc, #404	; (adr r1, 800a510 <__ieee754_acos+0x2c0>)
 800a37a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a37e:	f7f5 fef3 	bl	8000168 <__aeabi_dsub>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4638      	mov	r0, r7
 800a388:	4631      	mov	r1, r6
 800a38a:	f7f5 feed 	bl	8000168 <__aeabi_dsub>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	a161      	add	r1, pc, #388	; (adr r1, 800a518 <__ieee754_acos+0x2c8>)
 800a394:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a398:	f7f5 fee6 	bl	8000168 <__aeabi_dsub>
 800a39c:	e76d      	b.n	800a27a <__ieee754_acos+0x2a>
 800a39e:	2900      	cmp	r1, #0
 800a3a0:	f280 80c8 	bge.w	800a534 <__ieee754_acos+0x2e4>
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4b61      	ldr	r3, [pc, #388]	; (800a52c <__ieee754_acos+0x2dc>)
 800a3a8:	f7f5 fee0 	bl	800016c <__adddf3>
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	4b60      	ldr	r3, [pc, #384]	; (800a530 <__ieee754_acos+0x2e0>)
 800a3b0:	f7f6 f892 	bl	80004d8 <__aeabi_dmul>
 800a3b4:	a342      	add	r3, pc, #264	; (adr r3, 800a4c0 <__ieee754_acos+0x270>)
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	460d      	mov	r5, r1
 800a3be:	f7f6 f88b 	bl	80004d8 <__aeabi_dmul>
 800a3c2:	a341      	add	r3, pc, #260	; (adr r3, 800a4c8 <__ieee754_acos+0x278>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f7f5 fed0 	bl	800016c <__adddf3>
 800a3cc:	4622      	mov	r2, r4
 800a3ce:	462b      	mov	r3, r5
 800a3d0:	f7f6 f882 	bl	80004d8 <__aeabi_dmul>
 800a3d4:	a33e      	add	r3, pc, #248	; (adr r3, 800a4d0 <__ieee754_acos+0x280>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	f7f5 fec5 	bl	8000168 <__aeabi_dsub>
 800a3de:	4622      	mov	r2, r4
 800a3e0:	462b      	mov	r3, r5
 800a3e2:	f7f6 f879 	bl	80004d8 <__aeabi_dmul>
 800a3e6:	a33c      	add	r3, pc, #240	; (adr r3, 800a4d8 <__ieee754_acos+0x288>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f7f5 febe 	bl	800016c <__adddf3>
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	f7f6 f870 	bl	80004d8 <__aeabi_dmul>
 800a3f8:	a339      	add	r3, pc, #228	; (adr r3, 800a4e0 <__ieee754_acos+0x290>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	f7f5 feb3 	bl	8000168 <__aeabi_dsub>
 800a402:	4622      	mov	r2, r4
 800a404:	462b      	mov	r3, r5
 800a406:	f7f6 f867 	bl	80004d8 <__aeabi_dmul>
 800a40a:	a337      	add	r3, pc, #220	; (adr r3, 800a4e8 <__ieee754_acos+0x298>)
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f7f5 feac 	bl	800016c <__adddf3>
 800a414:	4622      	mov	r2, r4
 800a416:	462b      	mov	r3, r5
 800a418:	f7f6 f85e 	bl	80004d8 <__aeabi_dmul>
 800a41c:	4680      	mov	r8, r0
 800a41e:	4689      	mov	r9, r1
 800a420:	4620      	mov	r0, r4
 800a422:	4629      	mov	r1, r5
 800a424:	f000 fb50 	bl	800aac8 <__ieee754_sqrt>
 800a428:	a331      	add	r3, pc, #196	; (adr r3, 800a4f0 <__ieee754_acos+0x2a0>)
 800a42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42e:	4606      	mov	r6, r0
 800a430:	460f      	mov	r7, r1
 800a432:	4620      	mov	r0, r4
 800a434:	4629      	mov	r1, r5
 800a436:	f7f6 f84f 	bl	80004d8 <__aeabi_dmul>
 800a43a:	a32f      	add	r3, pc, #188	; (adr r3, 800a4f8 <__ieee754_acos+0x2a8>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	f7f5 fe92 	bl	8000168 <__aeabi_dsub>
 800a444:	4622      	mov	r2, r4
 800a446:	462b      	mov	r3, r5
 800a448:	f7f6 f846 	bl	80004d8 <__aeabi_dmul>
 800a44c:	a32c      	add	r3, pc, #176	; (adr r3, 800a500 <__ieee754_acos+0x2b0>)
 800a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a452:	f7f5 fe8b 	bl	800016c <__adddf3>
 800a456:	4622      	mov	r2, r4
 800a458:	462b      	mov	r3, r5
 800a45a:	f7f6 f83d 	bl	80004d8 <__aeabi_dmul>
 800a45e:	a32a      	add	r3, pc, #168	; (adr r3, 800a508 <__ieee754_acos+0x2b8>)
 800a460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a464:	f7f5 fe80 	bl	8000168 <__aeabi_dsub>
 800a468:	4622      	mov	r2, r4
 800a46a:	462b      	mov	r3, r5
 800a46c:	f7f6 f834 	bl	80004d8 <__aeabi_dmul>
 800a470:	2200      	movs	r2, #0
 800a472:	4b2e      	ldr	r3, [pc, #184]	; (800a52c <__ieee754_acos+0x2dc>)
 800a474:	f7f5 fe7a 	bl	800016c <__adddf3>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4640      	mov	r0, r8
 800a47e:	4649      	mov	r1, r9
 800a480:	f7f6 f954 	bl	800072c <__aeabi_ddiv>
 800a484:	4632      	mov	r2, r6
 800a486:	463b      	mov	r3, r7
 800a488:	f7f6 f826 	bl	80004d8 <__aeabi_dmul>
 800a48c:	a320      	add	r3, pc, #128	; (adr r3, 800a510 <__ieee754_acos+0x2c0>)
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f7f5 fe69 	bl	8000168 <__aeabi_dsub>
 800a496:	4632      	mov	r2, r6
 800a498:	463b      	mov	r3, r7
 800a49a:	f7f5 fe67 	bl	800016c <__adddf3>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	f7f5 fe63 	bl	800016c <__adddf3>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	a103      	add	r1, pc, #12	; (adr r1, 800a4b8 <__ieee754_acos+0x268>)
 800a4ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4b0:	e772      	b.n	800a398 <__ieee754_acos+0x148>
 800a4b2:	bf00      	nop
 800a4b4:	f3af 8000 	nop.w
 800a4b8:	54442d18 	.word	0x54442d18
 800a4bc:	400921fb 	.word	0x400921fb
 800a4c0:	0dfdf709 	.word	0x0dfdf709
 800a4c4:	3f023de1 	.word	0x3f023de1
 800a4c8:	7501b288 	.word	0x7501b288
 800a4cc:	3f49efe0 	.word	0x3f49efe0
 800a4d0:	b5688f3b 	.word	0xb5688f3b
 800a4d4:	3fa48228 	.word	0x3fa48228
 800a4d8:	0e884455 	.word	0x0e884455
 800a4dc:	3fc9c155 	.word	0x3fc9c155
 800a4e0:	03eb6f7d 	.word	0x03eb6f7d
 800a4e4:	3fd4d612 	.word	0x3fd4d612
 800a4e8:	55555555 	.word	0x55555555
 800a4ec:	3fc55555 	.word	0x3fc55555
 800a4f0:	b12e9282 	.word	0xb12e9282
 800a4f4:	3fb3b8c5 	.word	0x3fb3b8c5
 800a4f8:	1b8d0159 	.word	0x1b8d0159
 800a4fc:	3fe6066c 	.word	0x3fe6066c
 800a500:	9c598ac8 	.word	0x9c598ac8
 800a504:	40002ae5 	.word	0x40002ae5
 800a508:	1c8a2d4b 	.word	0x1c8a2d4b
 800a50c:	40033a27 	.word	0x40033a27
 800a510:	33145c07 	.word	0x33145c07
 800a514:	3c91a626 	.word	0x3c91a626
 800a518:	54442d18 	.word	0x54442d18
 800a51c:	3ff921fb 	.word	0x3ff921fb
 800a520:	3fefffff 	.word	0x3fefffff
 800a524:	3fdfffff 	.word	0x3fdfffff
 800a528:	3c600000 	.word	0x3c600000
 800a52c:	3ff00000 	.word	0x3ff00000
 800a530:	3fe00000 	.word	0x3fe00000
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	2000      	movs	r0, #0
 800a53a:	4969      	ldr	r1, [pc, #420]	; (800a6e0 <__ieee754_acos+0x490>)
 800a53c:	f7f5 fe14 	bl	8000168 <__aeabi_dsub>
 800a540:	2200      	movs	r2, #0
 800a542:	4b68      	ldr	r3, [pc, #416]	; (800a6e4 <__ieee754_acos+0x494>)
 800a544:	f7f5 ffc8 	bl	80004d8 <__aeabi_dmul>
 800a548:	4604      	mov	r4, r0
 800a54a:	460d      	mov	r5, r1
 800a54c:	f000 fabc 	bl	800aac8 <__ieee754_sqrt>
 800a550:	a34d      	add	r3, pc, #308	; (adr r3, 800a688 <__ieee754_acos+0x438>)
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	4689      	mov	r9, r1
 800a558:	4680      	mov	r8, r0
 800a55a:	4629      	mov	r1, r5
 800a55c:	4620      	mov	r0, r4
 800a55e:	f7f5 ffbb 	bl	80004d8 <__aeabi_dmul>
 800a562:	a34b      	add	r3, pc, #300	; (adr r3, 800a690 <__ieee754_acos+0x440>)
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	f7f5 fe00 	bl	800016c <__adddf3>
 800a56c:	4622      	mov	r2, r4
 800a56e:	462b      	mov	r3, r5
 800a570:	f7f5 ffb2 	bl	80004d8 <__aeabi_dmul>
 800a574:	a348      	add	r3, pc, #288	; (adr r3, 800a698 <__ieee754_acos+0x448>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	f7f5 fdf5 	bl	8000168 <__aeabi_dsub>
 800a57e:	4622      	mov	r2, r4
 800a580:	462b      	mov	r3, r5
 800a582:	f7f5 ffa9 	bl	80004d8 <__aeabi_dmul>
 800a586:	a346      	add	r3, pc, #280	; (adr r3, 800a6a0 <__ieee754_acos+0x450>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f7f5 fdee 	bl	800016c <__adddf3>
 800a590:	4622      	mov	r2, r4
 800a592:	462b      	mov	r3, r5
 800a594:	f7f5 ffa0 	bl	80004d8 <__aeabi_dmul>
 800a598:	a343      	add	r3, pc, #268	; (adr r3, 800a6a8 <__ieee754_acos+0x458>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f5 fde3 	bl	8000168 <__aeabi_dsub>
 800a5a2:	4622      	mov	r2, r4
 800a5a4:	462b      	mov	r3, r5
 800a5a6:	f7f5 ff97 	bl	80004d8 <__aeabi_dmul>
 800a5aa:	a341      	add	r3, pc, #260	; (adr r3, 800a6b0 <__ieee754_acos+0x460>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f7f5 fddc 	bl	800016c <__adddf3>
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	f7f5 ff8e 	bl	80004d8 <__aeabi_dmul>
 800a5bc:	a33e      	add	r3, pc, #248	; (adr r3, 800a6b8 <__ieee754_acos+0x468>)
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	4682      	mov	sl, r0
 800a5c4:	468b      	mov	fp, r1
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	f7f5 ff85 	bl	80004d8 <__aeabi_dmul>
 800a5ce:	a33c      	add	r3, pc, #240	; (adr r3, 800a6c0 <__ieee754_acos+0x470>)
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	f7f5 fdc8 	bl	8000168 <__aeabi_dsub>
 800a5d8:	4622      	mov	r2, r4
 800a5da:	462b      	mov	r3, r5
 800a5dc:	f7f5 ff7c 	bl	80004d8 <__aeabi_dmul>
 800a5e0:	a339      	add	r3, pc, #228	; (adr r3, 800a6c8 <__ieee754_acos+0x478>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f5 fdc1 	bl	800016c <__adddf3>
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	f7f5 ff73 	bl	80004d8 <__aeabi_dmul>
 800a5f2:	a337      	add	r3, pc, #220	; (adr r3, 800a6d0 <__ieee754_acos+0x480>)
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	f7f5 fdb6 	bl	8000168 <__aeabi_dsub>
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	462b      	mov	r3, r5
 800a600:	f7f5 ff6a 	bl	80004d8 <__aeabi_dmul>
 800a604:	2200      	movs	r2, #0
 800a606:	4b36      	ldr	r3, [pc, #216]	; (800a6e0 <__ieee754_acos+0x490>)
 800a608:	f7f5 fdb0 	bl	800016c <__adddf3>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4650      	mov	r0, sl
 800a612:	4659      	mov	r1, fp
 800a614:	f7f6 f88a 	bl	800072c <__aeabi_ddiv>
 800a618:	4642      	mov	r2, r8
 800a61a:	464b      	mov	r3, r9
 800a61c:	f7f5 ff5c 	bl	80004d8 <__aeabi_dmul>
 800a620:	2600      	movs	r6, #0
 800a622:	4682      	mov	sl, r0
 800a624:	468b      	mov	fp, r1
 800a626:	4632      	mov	r2, r6
 800a628:	464b      	mov	r3, r9
 800a62a:	4630      	mov	r0, r6
 800a62c:	4649      	mov	r1, r9
 800a62e:	f7f5 ff53 	bl	80004d8 <__aeabi_dmul>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	4620      	mov	r0, r4
 800a638:	4629      	mov	r1, r5
 800a63a:	f7f5 fd95 	bl	8000168 <__aeabi_dsub>
 800a63e:	4632      	mov	r2, r6
 800a640:	4604      	mov	r4, r0
 800a642:	460d      	mov	r5, r1
 800a644:	464b      	mov	r3, r9
 800a646:	4640      	mov	r0, r8
 800a648:	4649      	mov	r1, r9
 800a64a:	f7f5 fd8f 	bl	800016c <__adddf3>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4620      	mov	r0, r4
 800a654:	4629      	mov	r1, r5
 800a656:	f7f6 f869 	bl	800072c <__aeabi_ddiv>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4650      	mov	r0, sl
 800a660:	4659      	mov	r1, fp
 800a662:	f7f5 fd83 	bl	800016c <__adddf3>
 800a666:	4632      	mov	r2, r6
 800a668:	464b      	mov	r3, r9
 800a66a:	f7f5 fd7f 	bl	800016c <__adddf3>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	f7f5 fd7b 	bl	800016c <__adddf3>
 800a676:	e600      	b.n	800a27a <__ieee754_acos+0x2a>
 800a678:	2000      	movs	r0, #0
 800a67a:	2100      	movs	r1, #0
 800a67c:	e5fd      	b.n	800a27a <__ieee754_acos+0x2a>
 800a67e:	a116      	add	r1, pc, #88	; (adr r1, 800a6d8 <__ieee754_acos+0x488>)
 800a680:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a684:	e5f9      	b.n	800a27a <__ieee754_acos+0x2a>
 800a686:	bf00      	nop
 800a688:	0dfdf709 	.word	0x0dfdf709
 800a68c:	3f023de1 	.word	0x3f023de1
 800a690:	7501b288 	.word	0x7501b288
 800a694:	3f49efe0 	.word	0x3f49efe0
 800a698:	b5688f3b 	.word	0xb5688f3b
 800a69c:	3fa48228 	.word	0x3fa48228
 800a6a0:	0e884455 	.word	0x0e884455
 800a6a4:	3fc9c155 	.word	0x3fc9c155
 800a6a8:	03eb6f7d 	.word	0x03eb6f7d
 800a6ac:	3fd4d612 	.word	0x3fd4d612
 800a6b0:	55555555 	.word	0x55555555
 800a6b4:	3fc55555 	.word	0x3fc55555
 800a6b8:	b12e9282 	.word	0xb12e9282
 800a6bc:	3fb3b8c5 	.word	0x3fb3b8c5
 800a6c0:	1b8d0159 	.word	0x1b8d0159
 800a6c4:	3fe6066c 	.word	0x3fe6066c
 800a6c8:	9c598ac8 	.word	0x9c598ac8
 800a6cc:	40002ae5 	.word	0x40002ae5
 800a6d0:	1c8a2d4b 	.word	0x1c8a2d4b
 800a6d4:	40033a27 	.word	0x40033a27
 800a6d8:	54442d18 	.word	0x54442d18
 800a6dc:	3ff921fb 	.word	0x3ff921fb
 800a6e0:	3ff00000 	.word	0x3ff00000
 800a6e4:	3fe00000 	.word	0x3fe00000

0800a6e8 <__ieee754_rem_pio2>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	4614      	mov	r4, r2
 800a6ee:	4ac2      	ldr	r2, [pc, #776]	; (800a9f8 <__ieee754_rem_pio2+0x310>)
 800a6f0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a6f4:	4592      	cmp	sl, r2
 800a6f6:	b08d      	sub	sp, #52	; 0x34
 800a6f8:	468b      	mov	fp, r1
 800a6fa:	dc07      	bgt.n	800a70c <__ieee754_rem_pio2+0x24>
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2300      	movs	r3, #0
 800a700:	e9c4 0100 	strd	r0, r1, [r4]
 800a704:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a708:	2500      	movs	r5, #0
 800a70a:	e023      	b.n	800a754 <__ieee754_rem_pio2+0x6c>
 800a70c:	4abb      	ldr	r2, [pc, #748]	; (800a9fc <__ieee754_rem_pio2+0x314>)
 800a70e:	4592      	cmp	sl, r2
 800a710:	dc71      	bgt.n	800a7f6 <__ieee754_rem_pio2+0x10e>
 800a712:	a3ab      	add	r3, pc, #684	; (adr r3, 800a9c0 <__ieee754_rem_pio2+0x2d8>)
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	2900      	cmp	r1, #0
 800a71a:	4db9      	ldr	r5, [pc, #740]	; (800aa00 <__ieee754_rem_pio2+0x318>)
 800a71c:	dd36      	ble.n	800a78c <__ieee754_rem_pio2+0xa4>
 800a71e:	f7f5 fd23 	bl	8000168 <__aeabi_dsub>
 800a722:	45aa      	cmp	sl, r5
 800a724:	4606      	mov	r6, r0
 800a726:	460f      	mov	r7, r1
 800a728:	d018      	beq.n	800a75c <__ieee754_rem_pio2+0x74>
 800a72a:	a3a7      	add	r3, pc, #668	; (adr r3, 800a9c8 <__ieee754_rem_pio2+0x2e0>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f7f5 fd1a 	bl	8000168 <__aeabi_dsub>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4630      	mov	r0, r6
 800a73a:	e9c4 2300 	strd	r2, r3, [r4]
 800a73e:	4639      	mov	r1, r7
 800a740:	f7f5 fd12 	bl	8000168 <__aeabi_dsub>
 800a744:	a3a0      	add	r3, pc, #640	; (adr r3, 800a9c8 <__ieee754_rem_pio2+0x2e0>)
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f7f5 fd0d 	bl	8000168 <__aeabi_dsub>
 800a74e:	2501      	movs	r5, #1
 800a750:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a754:	4628      	mov	r0, r5
 800a756:	b00d      	add	sp, #52	; 0x34
 800a758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75c:	a39c      	add	r3, pc, #624	; (adr r3, 800a9d0 <__ieee754_rem_pio2+0x2e8>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	f7f5 fd01 	bl	8000168 <__aeabi_dsub>
 800a766:	a39c      	add	r3, pc, #624	; (adr r3, 800a9d8 <__ieee754_rem_pio2+0x2f0>)
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	4606      	mov	r6, r0
 800a76e:	460f      	mov	r7, r1
 800a770:	f7f5 fcfa 	bl	8000168 <__aeabi_dsub>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4630      	mov	r0, r6
 800a77a:	e9c4 2300 	strd	r2, r3, [r4]
 800a77e:	4639      	mov	r1, r7
 800a780:	f7f5 fcf2 	bl	8000168 <__aeabi_dsub>
 800a784:	a394      	add	r3, pc, #592	; (adr r3, 800a9d8 <__ieee754_rem_pio2+0x2f0>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	e7de      	b.n	800a74a <__ieee754_rem_pio2+0x62>
 800a78c:	f7f5 fcee 	bl	800016c <__adddf3>
 800a790:	45aa      	cmp	sl, r5
 800a792:	4606      	mov	r6, r0
 800a794:	460f      	mov	r7, r1
 800a796:	d016      	beq.n	800a7c6 <__ieee754_rem_pio2+0xde>
 800a798:	a38b      	add	r3, pc, #556	; (adr r3, 800a9c8 <__ieee754_rem_pio2+0x2e0>)
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	f7f5 fce5 	bl	800016c <__adddf3>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	e9c4 2300 	strd	r2, r3, [r4]
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	f7f5 fcdb 	bl	8000168 <__aeabi_dsub>
 800a7b2:	a385      	add	r3, pc, #532	; (adr r3, 800a9c8 <__ieee754_rem_pio2+0x2e0>)
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	f7f5 fcd8 	bl	800016c <__adddf3>
 800a7bc:	f04f 35ff 	mov.w	r5, #4294967295
 800a7c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7c4:	e7c6      	b.n	800a754 <__ieee754_rem_pio2+0x6c>
 800a7c6:	a382      	add	r3, pc, #520	; (adr r3, 800a9d0 <__ieee754_rem_pio2+0x2e8>)
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	f7f5 fcce 	bl	800016c <__adddf3>
 800a7d0:	a381      	add	r3, pc, #516	; (adr r3, 800a9d8 <__ieee754_rem_pio2+0x2f0>)
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	460f      	mov	r7, r1
 800a7da:	f7f5 fcc7 	bl	800016c <__adddf3>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	e9c4 2300 	strd	r2, r3, [r4]
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	f7f5 fcbd 	bl	8000168 <__aeabi_dsub>
 800a7ee:	a37a      	add	r3, pc, #488	; (adr r3, 800a9d8 <__ieee754_rem_pio2+0x2f0>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	e7e0      	b.n	800a7b8 <__ieee754_rem_pio2+0xd0>
 800a7f6:	4a83      	ldr	r2, [pc, #524]	; (800aa04 <__ieee754_rem_pio2+0x31c>)
 800a7f8:	4592      	cmp	sl, r2
 800a7fa:	f300 80d2 	bgt.w	800a9a2 <__ieee754_rem_pio2+0x2ba>
 800a7fe:	f7ff fc3f 	bl	800a080 <fabs>
 800a802:	a377      	add	r3, pc, #476	; (adr r3, 800a9e0 <__ieee754_rem_pio2+0x2f8>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	4606      	mov	r6, r0
 800a80a:	460f      	mov	r7, r1
 800a80c:	f7f5 fe64 	bl	80004d8 <__aeabi_dmul>
 800a810:	2200      	movs	r2, #0
 800a812:	4b7d      	ldr	r3, [pc, #500]	; (800aa08 <__ieee754_rem_pio2+0x320>)
 800a814:	f7f5 fcaa 	bl	800016c <__adddf3>
 800a818:	f7f6 f90e 	bl	8000a38 <__aeabi_d2iz>
 800a81c:	4605      	mov	r5, r0
 800a81e:	f7f5 fdf1 	bl	8000404 <__aeabi_i2d>
 800a822:	a367      	add	r3, pc, #412	; (adr r3, 800a9c0 <__ieee754_rem_pio2+0x2d8>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a82c:	f7f5 fe54 	bl	80004d8 <__aeabi_dmul>
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	4630      	mov	r0, r6
 800a836:	4639      	mov	r1, r7
 800a838:	f7f5 fc96 	bl	8000168 <__aeabi_dsub>
 800a83c:	a362      	add	r3, pc, #392	; (adr r3, 800a9c8 <__ieee754_rem_pio2+0x2e0>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	4606      	mov	r6, r0
 800a844:	460f      	mov	r7, r1
 800a846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a84a:	f7f5 fe45 	bl	80004d8 <__aeabi_dmul>
 800a84e:	2d1f      	cmp	r5, #31
 800a850:	4680      	mov	r8, r0
 800a852:	4689      	mov	r9, r1
 800a854:	dc0e      	bgt.n	800a874 <__ieee754_rem_pio2+0x18c>
 800a856:	4b6d      	ldr	r3, [pc, #436]	; (800aa0c <__ieee754_rem_pio2+0x324>)
 800a858:	1e6a      	subs	r2, r5, #1
 800a85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85e:	4553      	cmp	r3, sl
 800a860:	d008      	beq.n	800a874 <__ieee754_rem_pio2+0x18c>
 800a862:	4642      	mov	r2, r8
 800a864:	464b      	mov	r3, r9
 800a866:	4630      	mov	r0, r6
 800a868:	4639      	mov	r1, r7
 800a86a:	f7f5 fc7d 	bl	8000168 <__aeabi_dsub>
 800a86e:	e9c4 0100 	strd	r0, r1, [r4]
 800a872:	e011      	b.n	800a898 <__ieee754_rem_pio2+0x1b0>
 800a874:	464b      	mov	r3, r9
 800a876:	4642      	mov	r2, r8
 800a878:	4630      	mov	r0, r6
 800a87a:	4639      	mov	r1, r7
 800a87c:	f7f5 fc74 	bl	8000168 <__aeabi_dsub>
 800a880:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a884:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a888:	ebaa 0303 	sub.w	r3, sl, r3
 800a88c:	2b10      	cmp	r3, #16
 800a88e:	dc1f      	bgt.n	800a8d0 <__ieee754_rem_pio2+0x1e8>
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	e9c4 2300 	strd	r2, r3, [r4]
 800a898:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a89c:	4630      	mov	r0, r6
 800a89e:	4653      	mov	r3, sl
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	f7f5 fc61 	bl	8000168 <__aeabi_dsub>
 800a8a6:	4642      	mov	r2, r8
 800a8a8:	464b      	mov	r3, r9
 800a8aa:	f7f5 fc5d 	bl	8000168 <__aeabi_dsub>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	f1bb 0f00 	cmp.w	fp, #0
 800a8b6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a8ba:	f6bf af4b 	bge.w	800a754 <__ieee754_rem_pio2+0x6c>
 800a8be:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a8c2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800a8c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a8ca:	60e1      	str	r1, [r4, #12]
 800a8cc:	426d      	negs	r5, r5
 800a8ce:	e741      	b.n	800a754 <__ieee754_rem_pio2+0x6c>
 800a8d0:	a33f      	add	r3, pc, #252	; (adr r3, 800a9d0 <__ieee754_rem_pio2+0x2e8>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8da:	f7f5 fdfd 	bl	80004d8 <__aeabi_dmul>
 800a8de:	4680      	mov	r8, r0
 800a8e0:	4689      	mov	r9, r1
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	4639      	mov	r1, r7
 800a8ea:	f7f5 fc3d 	bl	8000168 <__aeabi_dsub>
 800a8ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	f7f5 fc35 	bl	8000168 <__aeabi_dsub>
 800a8fe:	4642      	mov	r2, r8
 800a900:	464b      	mov	r3, r9
 800a902:	f7f5 fc31 	bl	8000168 <__aeabi_dsub>
 800a906:	a334      	add	r3, pc, #208	; (adr r3, 800a9d8 <__ieee754_rem_pio2+0x2f0>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	4606      	mov	r6, r0
 800a90e:	460f      	mov	r7, r1
 800a910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a914:	f7f5 fde0 	bl	80004d8 <__aeabi_dmul>
 800a918:	4632      	mov	r2, r6
 800a91a:	463b      	mov	r3, r7
 800a91c:	f7f5 fc24 	bl	8000168 <__aeabi_dsub>
 800a920:	460b      	mov	r3, r1
 800a922:	4602      	mov	r2, r0
 800a924:	4680      	mov	r8, r0
 800a926:	4689      	mov	r9, r1
 800a928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a92c:	f7f5 fc1c 	bl	8000168 <__aeabi_dsub>
 800a930:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a934:	ebaa 0a03 	sub.w	sl, sl, r3
 800a938:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800a93c:	dc06      	bgt.n	800a94c <__ieee754_rem_pio2+0x264>
 800a93e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	e9c4 2300 	strd	r2, r3, [r4]
 800a94a:	e7a5      	b.n	800a898 <__ieee754_rem_pio2+0x1b0>
 800a94c:	a326      	add	r3, pc, #152	; (adr r3, 800a9e8 <__ieee754_rem_pio2+0x300>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a956:	f7f5 fdbf 	bl	80004d8 <__aeabi_dmul>
 800a95a:	4680      	mov	r8, r0
 800a95c:	4689      	mov	r9, r1
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a966:	f7f5 fbff 	bl	8000168 <__aeabi_dsub>
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4606      	mov	r6, r0
 800a970:	460f      	mov	r7, r1
 800a972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a976:	f7f5 fbf7 	bl	8000168 <__aeabi_dsub>
 800a97a:	4642      	mov	r2, r8
 800a97c:	464b      	mov	r3, r9
 800a97e:	f7f5 fbf3 	bl	8000168 <__aeabi_dsub>
 800a982:	a31b      	add	r3, pc, #108	; (adr r3, 800a9f0 <__ieee754_rem_pio2+0x308>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	4680      	mov	r8, r0
 800a98a:	4689      	mov	r9, r1
 800a98c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a990:	f7f5 fda2 	bl	80004d8 <__aeabi_dmul>
 800a994:	4642      	mov	r2, r8
 800a996:	464b      	mov	r3, r9
 800a998:	f7f5 fbe6 	bl	8000168 <__aeabi_dsub>
 800a99c:	4680      	mov	r8, r0
 800a99e:	4689      	mov	r9, r1
 800a9a0:	e75f      	b.n	800a862 <__ieee754_rem_pio2+0x17a>
 800a9a2:	4a1b      	ldr	r2, [pc, #108]	; (800aa10 <__ieee754_rem_pio2+0x328>)
 800a9a4:	4592      	cmp	sl, r2
 800a9a6:	dd35      	ble.n	800aa14 <__ieee754_rem_pio2+0x32c>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	f7f5 fbdc 	bl	8000168 <__aeabi_dsub>
 800a9b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a9b4:	e9c4 0100 	strd	r0, r1, [r4]
 800a9b8:	e6a6      	b.n	800a708 <__ieee754_rem_pio2+0x20>
 800a9ba:	bf00      	nop
 800a9bc:	f3af 8000 	nop.w
 800a9c0:	54400000 	.word	0x54400000
 800a9c4:	3ff921fb 	.word	0x3ff921fb
 800a9c8:	1a626331 	.word	0x1a626331
 800a9cc:	3dd0b461 	.word	0x3dd0b461
 800a9d0:	1a600000 	.word	0x1a600000
 800a9d4:	3dd0b461 	.word	0x3dd0b461
 800a9d8:	2e037073 	.word	0x2e037073
 800a9dc:	3ba3198a 	.word	0x3ba3198a
 800a9e0:	6dc9c883 	.word	0x6dc9c883
 800a9e4:	3fe45f30 	.word	0x3fe45f30
 800a9e8:	2e000000 	.word	0x2e000000
 800a9ec:	3ba3198a 	.word	0x3ba3198a
 800a9f0:	252049c1 	.word	0x252049c1
 800a9f4:	397b839a 	.word	0x397b839a
 800a9f8:	3fe921fb 	.word	0x3fe921fb
 800a9fc:	4002d97b 	.word	0x4002d97b
 800aa00:	3ff921fb 	.word	0x3ff921fb
 800aa04:	413921fb 	.word	0x413921fb
 800aa08:	3fe00000 	.word	0x3fe00000
 800aa0c:	0800bbe4 	.word	0x0800bbe4
 800aa10:	7fefffff 	.word	0x7fefffff
 800aa14:	ea4f 552a 	mov.w	r5, sl, asr #20
 800aa18:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800aa1c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800aa20:	460f      	mov	r7, r1
 800aa22:	4606      	mov	r6, r0
 800aa24:	f7f6 f808 	bl	8000a38 <__aeabi_d2iz>
 800aa28:	f7f5 fcec 	bl	8000404 <__aeabi_i2d>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4630      	mov	r0, r6
 800aa32:	4639      	mov	r1, r7
 800aa34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa38:	f7f5 fb96 	bl	8000168 <__aeabi_dsub>
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	4b20      	ldr	r3, [pc, #128]	; (800aac0 <__ieee754_rem_pio2+0x3d8>)
 800aa40:	f7f5 fd4a 	bl	80004d8 <__aeabi_dmul>
 800aa44:	460f      	mov	r7, r1
 800aa46:	4606      	mov	r6, r0
 800aa48:	f7f5 fff6 	bl	8000a38 <__aeabi_d2iz>
 800aa4c:	f7f5 fcda 	bl	8000404 <__aeabi_i2d>
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	4630      	mov	r0, r6
 800aa56:	4639      	mov	r1, r7
 800aa58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa5c:	f7f5 fb84 	bl	8000168 <__aeabi_dsub>
 800aa60:	2200      	movs	r2, #0
 800aa62:	4b17      	ldr	r3, [pc, #92]	; (800aac0 <__ieee754_rem_pio2+0x3d8>)
 800aa64:	f7f5 fd38 	bl	80004d8 <__aeabi_dmul>
 800aa68:	f04f 0803 	mov.w	r8, #3
 800aa6c:	2600      	movs	r6, #0
 800aa6e:	2700      	movs	r7, #0
 800aa70:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aa74:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800aa78:	4632      	mov	r2, r6
 800aa7a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800aa7e:	463b      	mov	r3, r7
 800aa80:	f108 3aff 	add.w	sl, r8, #4294967295
 800aa84:	f7f5 ff90 	bl	80009a8 <__aeabi_dcmpeq>
 800aa88:	b9b8      	cbnz	r0, 800aaba <__ieee754_rem_pio2+0x3d2>
 800aa8a:	4b0e      	ldr	r3, [pc, #56]	; (800aac4 <__ieee754_rem_pio2+0x3dc>)
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	9301      	str	r3, [sp, #4]
 800aa90:	2302      	movs	r3, #2
 800aa92:	4621      	mov	r1, r4
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	a806      	add	r0, sp, #24
 800aa98:	4643      	mov	r3, r8
 800aa9a:	f000 f97f 	bl	800ad9c <__kernel_rem_pio2>
 800aa9e:	f1bb 0f00 	cmp.w	fp, #0
 800aaa2:	4605      	mov	r5, r0
 800aaa4:	f6bf ae56 	bge.w	800a754 <__ieee754_rem_pio2+0x6c>
 800aaa8:	6863      	ldr	r3, [r4, #4]
 800aaaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aaae:	6063      	str	r3, [r4, #4]
 800aab0:	68e3      	ldr	r3, [r4, #12]
 800aab2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aab6:	60e3      	str	r3, [r4, #12]
 800aab8:	e708      	b.n	800a8cc <__ieee754_rem_pio2+0x1e4>
 800aaba:	46d0      	mov	r8, sl
 800aabc:	e7dc      	b.n	800aa78 <__ieee754_rem_pio2+0x390>
 800aabe:	bf00      	nop
 800aac0:	41700000 	.word	0x41700000
 800aac4:	0800bc64 	.word	0x0800bc64

0800aac8 <__ieee754_sqrt>:
 800aac8:	4b54      	ldr	r3, [pc, #336]	; (800ac1c <__ieee754_sqrt+0x154>)
 800aaca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aace:	438b      	bics	r3, r1
 800aad0:	4606      	mov	r6, r0
 800aad2:	460d      	mov	r5, r1
 800aad4:	460a      	mov	r2, r1
 800aad6:	460c      	mov	r4, r1
 800aad8:	d10f      	bne.n	800aafa <__ieee754_sqrt+0x32>
 800aada:	4602      	mov	r2, r0
 800aadc:	460b      	mov	r3, r1
 800aade:	f7f5 fcfb 	bl	80004d8 <__aeabi_dmul>
 800aae2:	4602      	mov	r2, r0
 800aae4:	460b      	mov	r3, r1
 800aae6:	4630      	mov	r0, r6
 800aae8:	4629      	mov	r1, r5
 800aaea:	f7f5 fb3f 	bl	800016c <__adddf3>
 800aaee:	4606      	mov	r6, r0
 800aaf0:	460d      	mov	r5, r1
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aafa:	2900      	cmp	r1, #0
 800aafc:	4607      	mov	r7, r0
 800aafe:	4603      	mov	r3, r0
 800ab00:	dc0e      	bgt.n	800ab20 <__ieee754_sqrt+0x58>
 800ab02:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ab06:	ea5c 0707 	orrs.w	r7, ip, r7
 800ab0a:	d0f2      	beq.n	800aaf2 <__ieee754_sqrt+0x2a>
 800ab0c:	b141      	cbz	r1, 800ab20 <__ieee754_sqrt+0x58>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	f7f5 fb29 	bl	8000168 <__aeabi_dsub>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	f7f5 fe07 	bl	800072c <__aeabi_ddiv>
 800ab1e:	e7e6      	b.n	800aaee <__ieee754_sqrt+0x26>
 800ab20:	1512      	asrs	r2, r2, #20
 800ab22:	d074      	beq.n	800ac0e <__ieee754_sqrt+0x146>
 800ab24:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ab28:	07d5      	lsls	r5, r2, #31
 800ab2a:	f04f 0500 	mov.w	r5, #0
 800ab2e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ab32:	bf48      	it	mi
 800ab34:	0fd9      	lsrmi	r1, r3, #31
 800ab36:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800ab3a:	bf44      	itt	mi
 800ab3c:	005b      	lslmi	r3, r3, #1
 800ab3e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800ab42:	1051      	asrs	r1, r2, #1
 800ab44:	0fda      	lsrs	r2, r3, #31
 800ab46:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	2216      	movs	r2, #22
 800ab4e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	1987      	adds	r7, r0, r6
 800ab56:	42a7      	cmp	r7, r4
 800ab58:	bfde      	ittt	le
 800ab5a:	19b8      	addle	r0, r7, r6
 800ab5c:	1be4      	suble	r4, r4, r7
 800ab5e:	19ad      	addle	r5, r5, r6
 800ab60:	0fdf      	lsrs	r7, r3, #31
 800ab62:	3a01      	subs	r2, #1
 800ab64:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800ab68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab6c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ab70:	d1f0      	bne.n	800ab54 <__ieee754_sqrt+0x8c>
 800ab72:	f04f 0c20 	mov.w	ip, #32
 800ab76:	4696      	mov	lr, r2
 800ab78:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ab7c:	4284      	cmp	r4, r0
 800ab7e:	eb06 070e 	add.w	r7, r6, lr
 800ab82:	dc02      	bgt.n	800ab8a <__ieee754_sqrt+0xc2>
 800ab84:	d112      	bne.n	800abac <__ieee754_sqrt+0xe4>
 800ab86:	429f      	cmp	r7, r3
 800ab88:	d810      	bhi.n	800abac <__ieee754_sqrt+0xe4>
 800ab8a:	2f00      	cmp	r7, #0
 800ab8c:	eb07 0e06 	add.w	lr, r7, r6
 800ab90:	da42      	bge.n	800ac18 <__ieee754_sqrt+0x150>
 800ab92:	f1be 0f00 	cmp.w	lr, #0
 800ab96:	db3f      	blt.n	800ac18 <__ieee754_sqrt+0x150>
 800ab98:	f100 0801 	add.w	r8, r0, #1
 800ab9c:	1a24      	subs	r4, r4, r0
 800ab9e:	4640      	mov	r0, r8
 800aba0:	429f      	cmp	r7, r3
 800aba2:	bf88      	it	hi
 800aba4:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800aba8:	1bdb      	subs	r3, r3, r7
 800abaa:	4432      	add	r2, r6
 800abac:	0064      	lsls	r4, r4, #1
 800abae:	f1bc 0c01 	subs.w	ip, ip, #1
 800abb2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800abb6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800abba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abbe:	d1dd      	bne.n	800ab7c <__ieee754_sqrt+0xb4>
 800abc0:	4323      	orrs	r3, r4
 800abc2:	d006      	beq.n	800abd2 <__ieee754_sqrt+0x10a>
 800abc4:	1c54      	adds	r4, r2, #1
 800abc6:	bf0b      	itete	eq
 800abc8:	4662      	moveq	r2, ip
 800abca:	3201      	addne	r2, #1
 800abcc:	3501      	addeq	r5, #1
 800abce:	f022 0201 	bicne.w	r2, r2, #1
 800abd2:	106b      	asrs	r3, r5, #1
 800abd4:	0852      	lsrs	r2, r2, #1
 800abd6:	07e8      	lsls	r0, r5, #31
 800abd8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800abdc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800abe0:	bf48      	it	mi
 800abe2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800abe6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800abea:	4616      	mov	r6, r2
 800abec:	e781      	b.n	800aaf2 <__ieee754_sqrt+0x2a>
 800abee:	0adc      	lsrs	r4, r3, #11
 800abf0:	3915      	subs	r1, #21
 800abf2:	055b      	lsls	r3, r3, #21
 800abf4:	2c00      	cmp	r4, #0
 800abf6:	d0fa      	beq.n	800abee <__ieee754_sqrt+0x126>
 800abf8:	02e6      	lsls	r6, r4, #11
 800abfa:	d50a      	bpl.n	800ac12 <__ieee754_sqrt+0x14a>
 800abfc:	f1c2 0020 	rsb	r0, r2, #32
 800ac00:	fa23 f000 	lsr.w	r0, r3, r0
 800ac04:	1e55      	subs	r5, r2, #1
 800ac06:	4093      	lsls	r3, r2
 800ac08:	4304      	orrs	r4, r0
 800ac0a:	1b4a      	subs	r2, r1, r5
 800ac0c:	e78a      	b.n	800ab24 <__ieee754_sqrt+0x5c>
 800ac0e:	4611      	mov	r1, r2
 800ac10:	e7f0      	b.n	800abf4 <__ieee754_sqrt+0x12c>
 800ac12:	0064      	lsls	r4, r4, #1
 800ac14:	3201      	adds	r2, #1
 800ac16:	e7ef      	b.n	800abf8 <__ieee754_sqrt+0x130>
 800ac18:	4680      	mov	r8, r0
 800ac1a:	e7bf      	b.n	800ab9c <__ieee754_sqrt+0xd4>
 800ac1c:	7ff00000 	.word	0x7ff00000

0800ac20 <__kernel_cos>:
 800ac20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ac28:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	460f      	mov	r7, r1
 800ac30:	e9cd 2300 	strd	r2, r3, [sp]
 800ac34:	da04      	bge.n	800ac40 <__kernel_cos+0x20>
 800ac36:	f7f5 feff 	bl	8000a38 <__aeabi_d2iz>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	f000 8086 	beq.w	800ad4c <__kernel_cos+0x12c>
 800ac40:	4642      	mov	r2, r8
 800ac42:	463b      	mov	r3, r7
 800ac44:	4640      	mov	r0, r8
 800ac46:	4639      	mov	r1, r7
 800ac48:	f7f5 fc46 	bl	80004d8 <__aeabi_dmul>
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	4b4e      	ldr	r3, [pc, #312]	; (800ad88 <__kernel_cos+0x168>)
 800ac50:	4604      	mov	r4, r0
 800ac52:	460d      	mov	r5, r1
 800ac54:	f7f5 fc40 	bl	80004d8 <__aeabi_dmul>
 800ac58:	a33f      	add	r3, pc, #252	; (adr r3, 800ad58 <__kernel_cos+0x138>)
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	4682      	mov	sl, r0
 800ac60:	468b      	mov	fp, r1
 800ac62:	4620      	mov	r0, r4
 800ac64:	4629      	mov	r1, r5
 800ac66:	f7f5 fc37 	bl	80004d8 <__aeabi_dmul>
 800ac6a:	a33d      	add	r3, pc, #244	; (adr r3, 800ad60 <__kernel_cos+0x140>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	f7f5 fa7c 	bl	800016c <__adddf3>
 800ac74:	4622      	mov	r2, r4
 800ac76:	462b      	mov	r3, r5
 800ac78:	f7f5 fc2e 	bl	80004d8 <__aeabi_dmul>
 800ac7c:	a33a      	add	r3, pc, #232	; (adr r3, 800ad68 <__kernel_cos+0x148>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	f7f5 fa71 	bl	8000168 <__aeabi_dsub>
 800ac86:	4622      	mov	r2, r4
 800ac88:	462b      	mov	r3, r5
 800ac8a:	f7f5 fc25 	bl	80004d8 <__aeabi_dmul>
 800ac8e:	a338      	add	r3, pc, #224	; (adr r3, 800ad70 <__kernel_cos+0x150>)
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	f7f5 fa6a 	bl	800016c <__adddf3>
 800ac98:	4622      	mov	r2, r4
 800ac9a:	462b      	mov	r3, r5
 800ac9c:	f7f5 fc1c 	bl	80004d8 <__aeabi_dmul>
 800aca0:	a335      	add	r3, pc, #212	; (adr r3, 800ad78 <__kernel_cos+0x158>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f7f5 fa5f 	bl	8000168 <__aeabi_dsub>
 800acaa:	4622      	mov	r2, r4
 800acac:	462b      	mov	r3, r5
 800acae:	f7f5 fc13 	bl	80004d8 <__aeabi_dmul>
 800acb2:	a333      	add	r3, pc, #204	; (adr r3, 800ad80 <__kernel_cos+0x160>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	f7f5 fa58 	bl	800016c <__adddf3>
 800acbc:	4622      	mov	r2, r4
 800acbe:	462b      	mov	r3, r5
 800acc0:	f7f5 fc0a 	bl	80004d8 <__aeabi_dmul>
 800acc4:	4622      	mov	r2, r4
 800acc6:	462b      	mov	r3, r5
 800acc8:	f7f5 fc06 	bl	80004d8 <__aeabi_dmul>
 800accc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acd0:	4604      	mov	r4, r0
 800acd2:	460d      	mov	r5, r1
 800acd4:	4640      	mov	r0, r8
 800acd6:	4639      	mov	r1, r7
 800acd8:	f7f5 fbfe 	bl	80004d8 <__aeabi_dmul>
 800acdc:	460b      	mov	r3, r1
 800acde:	4602      	mov	r2, r0
 800ace0:	4629      	mov	r1, r5
 800ace2:	4620      	mov	r0, r4
 800ace4:	f7f5 fa40 	bl	8000168 <__aeabi_dsub>
 800ace8:	4b28      	ldr	r3, [pc, #160]	; (800ad8c <__kernel_cos+0x16c>)
 800acea:	4680      	mov	r8, r0
 800acec:	429e      	cmp	r6, r3
 800acee:	4689      	mov	r9, r1
 800acf0:	dc0e      	bgt.n	800ad10 <__kernel_cos+0xf0>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	4650      	mov	r0, sl
 800acf8:	4659      	mov	r1, fp
 800acfa:	f7f5 fa35 	bl	8000168 <__aeabi_dsub>
 800acfe:	4602      	mov	r2, r0
 800ad00:	2000      	movs	r0, #0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4922      	ldr	r1, [pc, #136]	; (800ad90 <__kernel_cos+0x170>)
 800ad06:	f7f5 fa2f 	bl	8000168 <__aeabi_dsub>
 800ad0a:	b003      	add	sp, #12
 800ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad10:	2400      	movs	r4, #0
 800ad12:	4b20      	ldr	r3, [pc, #128]	; (800ad94 <__kernel_cos+0x174>)
 800ad14:	4622      	mov	r2, r4
 800ad16:	429e      	cmp	r6, r3
 800ad18:	bfcc      	ite	gt
 800ad1a:	4d1f      	ldrgt	r5, [pc, #124]	; (800ad98 <__kernel_cos+0x178>)
 800ad1c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ad20:	462b      	mov	r3, r5
 800ad22:	2000      	movs	r0, #0
 800ad24:	491a      	ldr	r1, [pc, #104]	; (800ad90 <__kernel_cos+0x170>)
 800ad26:	f7f5 fa1f 	bl	8000168 <__aeabi_dsub>
 800ad2a:	4622      	mov	r2, r4
 800ad2c:	4606      	mov	r6, r0
 800ad2e:	460f      	mov	r7, r1
 800ad30:	462b      	mov	r3, r5
 800ad32:	4650      	mov	r0, sl
 800ad34:	4659      	mov	r1, fp
 800ad36:	f7f5 fa17 	bl	8000168 <__aeabi_dsub>
 800ad3a:	4642      	mov	r2, r8
 800ad3c:	464b      	mov	r3, r9
 800ad3e:	f7f5 fa13 	bl	8000168 <__aeabi_dsub>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	4630      	mov	r0, r6
 800ad48:	4639      	mov	r1, r7
 800ad4a:	e7dc      	b.n	800ad06 <__kernel_cos+0xe6>
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	4910      	ldr	r1, [pc, #64]	; (800ad90 <__kernel_cos+0x170>)
 800ad50:	e7db      	b.n	800ad0a <__kernel_cos+0xea>
 800ad52:	bf00      	nop
 800ad54:	f3af 8000 	nop.w
 800ad58:	be8838d4 	.word	0xbe8838d4
 800ad5c:	bda8fae9 	.word	0xbda8fae9
 800ad60:	bdb4b1c4 	.word	0xbdb4b1c4
 800ad64:	3e21ee9e 	.word	0x3e21ee9e
 800ad68:	809c52ad 	.word	0x809c52ad
 800ad6c:	3e927e4f 	.word	0x3e927e4f
 800ad70:	19cb1590 	.word	0x19cb1590
 800ad74:	3efa01a0 	.word	0x3efa01a0
 800ad78:	16c15177 	.word	0x16c15177
 800ad7c:	3f56c16c 	.word	0x3f56c16c
 800ad80:	5555554c 	.word	0x5555554c
 800ad84:	3fa55555 	.word	0x3fa55555
 800ad88:	3fe00000 	.word	0x3fe00000
 800ad8c:	3fd33332 	.word	0x3fd33332
 800ad90:	3ff00000 	.word	0x3ff00000
 800ad94:	3fe90000 	.word	0x3fe90000
 800ad98:	3fd20000 	.word	0x3fd20000

0800ad9c <__kernel_rem_pio2>:
 800ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ada4:	9307      	str	r3, [sp, #28]
 800ada6:	9104      	str	r1, [sp, #16]
 800ada8:	4bbf      	ldr	r3, [pc, #764]	; (800b0a8 <__kernel_rem_pio2+0x30c>)
 800adaa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800adac:	1ed4      	subs	r4, r2, #3
 800adae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adb2:	2500      	movs	r5, #0
 800adb4:	9302      	str	r3, [sp, #8]
 800adb6:	9b07      	ldr	r3, [sp, #28]
 800adb8:	9008      	str	r0, [sp, #32]
 800adba:	3b01      	subs	r3, #1
 800adbc:	9306      	str	r3, [sp, #24]
 800adbe:	2318      	movs	r3, #24
 800adc0:	fb94 f4f3 	sdiv	r4, r4, r3
 800adc4:	f06f 0317 	mvn.w	r3, #23
 800adc8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800adcc:	fb04 3303 	mla	r3, r4, r3, r3
 800add0:	eb03 0a02 	add.w	sl, r3, r2
 800add4:	9a06      	ldr	r2, [sp, #24]
 800add6:	9b02      	ldr	r3, [sp, #8]
 800add8:	1aa7      	subs	r7, r4, r2
 800adda:	eb03 0802 	add.w	r8, r3, r2
 800adde:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ade0:	2200      	movs	r2, #0
 800ade2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ade6:	2300      	movs	r3, #0
 800ade8:	ae1e      	add	r6, sp, #120	; 0x78
 800adea:	4545      	cmp	r5, r8
 800adec:	dd14      	ble.n	800ae18 <__kernel_rem_pio2+0x7c>
 800adee:	2600      	movs	r6, #0
 800adf0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800adf4:	9b02      	ldr	r3, [sp, #8]
 800adf6:	429e      	cmp	r6, r3
 800adf8:	dc39      	bgt.n	800ae6e <__kernel_rem_pio2+0xd2>
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	f04f 0800 	mov.w	r8, #0
 800ae00:	3b08      	subs	r3, #8
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	9b07      	ldr	r3, [sp, #28]
 800ae06:	f04f 0900 	mov.w	r9, #0
 800ae0a:	199d      	adds	r5, r3, r6
 800ae0c:	ab20      	add	r3, sp, #128	; 0x80
 800ae0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae12:	9305      	str	r3, [sp, #20]
 800ae14:	2700      	movs	r7, #0
 800ae16:	e023      	b.n	800ae60 <__kernel_rem_pio2+0xc4>
 800ae18:	42ef      	cmn	r7, r5
 800ae1a:	d40b      	bmi.n	800ae34 <__kernel_rem_pio2+0x98>
 800ae1c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ae20:	e9cd 2300 	strd	r2, r3, [sp]
 800ae24:	f7f5 faee 	bl	8000404 <__aeabi_i2d>
 800ae28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae2c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800ae30:	3501      	adds	r5, #1
 800ae32:	e7da      	b.n	800adea <__kernel_rem_pio2+0x4e>
 800ae34:	4610      	mov	r0, r2
 800ae36:	4619      	mov	r1, r3
 800ae38:	e7f8      	b.n	800ae2c <__kernel_rem_pio2+0x90>
 800ae3a:	9905      	ldr	r1, [sp, #20]
 800ae3c:	9d00      	ldr	r5, [sp, #0]
 800ae3e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ae42:	9105      	str	r1, [sp, #20]
 800ae44:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800ae48:	9500      	str	r5, [sp, #0]
 800ae4a:	f7f5 fb45 	bl	80004d8 <__aeabi_dmul>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4640      	mov	r0, r8
 800ae54:	4649      	mov	r1, r9
 800ae56:	f7f5 f989 	bl	800016c <__adddf3>
 800ae5a:	4680      	mov	r8, r0
 800ae5c:	4689      	mov	r9, r1
 800ae5e:	3701      	adds	r7, #1
 800ae60:	9b06      	ldr	r3, [sp, #24]
 800ae62:	429f      	cmp	r7, r3
 800ae64:	dde9      	ble.n	800ae3a <__kernel_rem_pio2+0x9e>
 800ae66:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800ae6a:	3601      	adds	r6, #1
 800ae6c:	e7c2      	b.n	800adf4 <__kernel_rem_pio2+0x58>
 800ae6e:	9b02      	ldr	r3, [sp, #8]
 800ae70:	aa0c      	add	r2, sp, #48	; 0x30
 800ae72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae76:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae78:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ae7a:	9f02      	ldr	r7, [sp, #8]
 800ae7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ae80:	930a      	str	r3, [sp, #40]	; 0x28
 800ae82:	2600      	movs	r6, #0
 800ae84:	ab98      	add	r3, sp, #608	; 0x260
 800ae86:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800ae8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae92:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ae96:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ae9a:	ab98      	add	r3, sp, #608	; 0x260
 800ae9c:	445b      	add	r3, fp
 800ae9e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800aea2:	1bbb      	subs	r3, r7, r6
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	dc71      	bgt.n	800af8c <__kernel_rem_pio2+0x1f0>
 800aea8:	4652      	mov	r2, sl
 800aeaa:	4640      	mov	r0, r8
 800aeac:	4649      	mov	r1, r9
 800aeae:	f000 fc03 	bl	800b6b8 <scalbn>
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800aeb8:	4604      	mov	r4, r0
 800aeba:	460d      	mov	r5, r1
 800aebc:	f7f5 fb0c 	bl	80004d8 <__aeabi_dmul>
 800aec0:	f000 fb6e 	bl	800b5a0 <floor>
 800aec4:	2200      	movs	r2, #0
 800aec6:	4b79      	ldr	r3, [pc, #484]	; (800b0ac <__kernel_rem_pio2+0x310>)
 800aec8:	f7f5 fb06 	bl	80004d8 <__aeabi_dmul>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	4620      	mov	r0, r4
 800aed2:	4629      	mov	r1, r5
 800aed4:	f7f5 f948 	bl	8000168 <__aeabi_dsub>
 800aed8:	460d      	mov	r5, r1
 800aeda:	4604      	mov	r4, r0
 800aedc:	f7f5 fdac 	bl	8000a38 <__aeabi_d2iz>
 800aee0:	9005      	str	r0, [sp, #20]
 800aee2:	f7f5 fa8f 	bl	8000404 <__aeabi_i2d>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7f5 f93b 	bl	8000168 <__aeabi_dsub>
 800aef2:	f1ba 0f00 	cmp.w	sl, #0
 800aef6:	4680      	mov	r8, r0
 800aef8:	4689      	mov	r9, r1
 800aefa:	dd6c      	ble.n	800afd6 <__kernel_rem_pio2+0x23a>
 800aefc:	1e7a      	subs	r2, r7, #1
 800aefe:	ab0c      	add	r3, sp, #48	; 0x30
 800af00:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af04:	f1ca 0118 	rsb	r1, sl, #24
 800af08:	9c05      	ldr	r4, [sp, #20]
 800af0a:	fa40 f301 	asr.w	r3, r0, r1
 800af0e:	441c      	add	r4, r3
 800af10:	408b      	lsls	r3, r1
 800af12:	1ac0      	subs	r0, r0, r3
 800af14:	ab0c      	add	r3, sp, #48	; 0x30
 800af16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800af1a:	f1ca 0317 	rsb	r3, sl, #23
 800af1e:	9405      	str	r4, [sp, #20]
 800af20:	fa40 f303 	asr.w	r3, r0, r3
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	9b00      	ldr	r3, [sp, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dd62      	ble.n	800aff2 <__kernel_rem_pio2+0x256>
 800af2c:	2200      	movs	r2, #0
 800af2e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800af32:	4614      	mov	r4, r2
 800af34:	9b05      	ldr	r3, [sp, #20]
 800af36:	3301      	adds	r3, #1
 800af38:	9305      	str	r3, [sp, #20]
 800af3a:	4297      	cmp	r7, r2
 800af3c:	f300 809f 	bgt.w	800b07e <__kernel_rem_pio2+0x2e2>
 800af40:	f1ba 0f00 	cmp.w	sl, #0
 800af44:	dd07      	ble.n	800af56 <__kernel_rem_pio2+0x1ba>
 800af46:	f1ba 0f01 	cmp.w	sl, #1
 800af4a:	f000 80bb 	beq.w	800b0c4 <__kernel_rem_pio2+0x328>
 800af4e:	f1ba 0f02 	cmp.w	sl, #2
 800af52:	f000 80c1 	beq.w	800b0d8 <__kernel_rem_pio2+0x33c>
 800af56:	9b00      	ldr	r3, [sp, #0]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d14a      	bne.n	800aff2 <__kernel_rem_pio2+0x256>
 800af5c:	4642      	mov	r2, r8
 800af5e:	464b      	mov	r3, r9
 800af60:	2000      	movs	r0, #0
 800af62:	4953      	ldr	r1, [pc, #332]	; (800b0b0 <__kernel_rem_pio2+0x314>)
 800af64:	f7f5 f900 	bl	8000168 <__aeabi_dsub>
 800af68:	4680      	mov	r8, r0
 800af6a:	4689      	mov	r9, r1
 800af6c:	2c00      	cmp	r4, #0
 800af6e:	d040      	beq.n	800aff2 <__kernel_rem_pio2+0x256>
 800af70:	4652      	mov	r2, sl
 800af72:	2000      	movs	r0, #0
 800af74:	494e      	ldr	r1, [pc, #312]	; (800b0b0 <__kernel_rem_pio2+0x314>)
 800af76:	f000 fb9f 	bl	800b6b8 <scalbn>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4640      	mov	r0, r8
 800af80:	4649      	mov	r1, r9
 800af82:	f7f5 f8f1 	bl	8000168 <__aeabi_dsub>
 800af86:	4680      	mov	r8, r0
 800af88:	4689      	mov	r9, r1
 800af8a:	e032      	b.n	800aff2 <__kernel_rem_pio2+0x256>
 800af8c:	2200      	movs	r2, #0
 800af8e:	4b49      	ldr	r3, [pc, #292]	; (800b0b4 <__kernel_rem_pio2+0x318>)
 800af90:	4640      	mov	r0, r8
 800af92:	4649      	mov	r1, r9
 800af94:	f7f5 faa0 	bl	80004d8 <__aeabi_dmul>
 800af98:	f7f5 fd4e 	bl	8000a38 <__aeabi_d2iz>
 800af9c:	f7f5 fa32 	bl	8000404 <__aeabi_i2d>
 800afa0:	2200      	movs	r2, #0
 800afa2:	4b45      	ldr	r3, [pc, #276]	; (800b0b8 <__kernel_rem_pio2+0x31c>)
 800afa4:	e9cd 0100 	strd	r0, r1, [sp]
 800afa8:	f7f5 fa96 	bl	80004d8 <__aeabi_dmul>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	4640      	mov	r0, r8
 800afb2:	4649      	mov	r1, r9
 800afb4:	f7f5 f8d8 	bl	8000168 <__aeabi_dsub>
 800afb8:	f7f5 fd3e 	bl	8000a38 <__aeabi_d2iz>
 800afbc:	ab0c      	add	r3, sp, #48	; 0x30
 800afbe:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800afc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800afc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afca:	f7f5 f8cf 	bl	800016c <__adddf3>
 800afce:	3601      	adds	r6, #1
 800afd0:	4680      	mov	r8, r0
 800afd2:	4689      	mov	r9, r1
 800afd4:	e765      	b.n	800aea2 <__kernel_rem_pio2+0x106>
 800afd6:	d105      	bne.n	800afe4 <__kernel_rem_pio2+0x248>
 800afd8:	1e7b      	subs	r3, r7, #1
 800afda:	aa0c      	add	r2, sp, #48	; 0x30
 800afdc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800afe0:	15c3      	asrs	r3, r0, #23
 800afe2:	e79f      	b.n	800af24 <__kernel_rem_pio2+0x188>
 800afe4:	2200      	movs	r2, #0
 800afe6:	4b35      	ldr	r3, [pc, #212]	; (800b0bc <__kernel_rem_pio2+0x320>)
 800afe8:	f7f5 fcfc 	bl	80009e4 <__aeabi_dcmpge>
 800afec:	2800      	cmp	r0, #0
 800afee:	d143      	bne.n	800b078 <__kernel_rem_pio2+0x2dc>
 800aff0:	9000      	str	r0, [sp, #0]
 800aff2:	2200      	movs	r2, #0
 800aff4:	2300      	movs	r3, #0
 800aff6:	4640      	mov	r0, r8
 800aff8:	4649      	mov	r1, r9
 800affa:	f7f5 fcd5 	bl	80009a8 <__aeabi_dcmpeq>
 800affe:	2800      	cmp	r0, #0
 800b000:	f000 80c3 	beq.w	800b18a <__kernel_rem_pio2+0x3ee>
 800b004:	1e7c      	subs	r4, r7, #1
 800b006:	4623      	mov	r3, r4
 800b008:	2200      	movs	r2, #0
 800b00a:	9902      	ldr	r1, [sp, #8]
 800b00c:	428b      	cmp	r3, r1
 800b00e:	da6a      	bge.n	800b0e6 <__kernel_rem_pio2+0x34a>
 800b010:	2a00      	cmp	r2, #0
 800b012:	f000 8084 	beq.w	800b11e <__kernel_rem_pio2+0x382>
 800b016:	ab0c      	add	r3, sp, #48	; 0x30
 800b018:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b01c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 80b0 	beq.w	800b186 <__kernel_rem_pio2+0x3ea>
 800b026:	4652      	mov	r2, sl
 800b028:	2000      	movs	r0, #0
 800b02a:	4921      	ldr	r1, [pc, #132]	; (800b0b0 <__kernel_rem_pio2+0x314>)
 800b02c:	f000 fb44 	bl	800b6b8 <scalbn>
 800b030:	4625      	mov	r5, r4
 800b032:	4606      	mov	r6, r0
 800b034:	460f      	mov	r7, r1
 800b036:	f04f 0a00 	mov.w	sl, #0
 800b03a:	00e3      	lsls	r3, r4, #3
 800b03c:	aa98      	add	r2, sp, #608	; 0x260
 800b03e:	eb02 0803 	add.w	r8, r2, r3
 800b042:	f8df b070 	ldr.w	fp, [pc, #112]	; 800b0b4 <__kernel_rem_pio2+0x318>
 800b046:	9306      	str	r3, [sp, #24]
 800b048:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	f280 80d2 	bge.w	800b1f6 <__kernel_rem_pio2+0x45a>
 800b052:	2500      	movs	r5, #0
 800b054:	9a06      	ldr	r2, [sp, #24]
 800b056:	ab98      	add	r3, sp, #608	; 0x260
 800b058:	189e      	adds	r6, r3, r2
 800b05a:	3ea8      	subs	r6, #168	; 0xa8
 800b05c:	1b63      	subs	r3, r4, r5
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f2c0 80f9 	blt.w	800b256 <__kernel_rem_pio2+0x4ba>
 800b064:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800b0c0 <__kernel_rem_pio2+0x324>
 800b068:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800b06c:	f04f 0a00 	mov.w	sl, #0
 800b070:	f04f 0b00 	mov.w	fp, #0
 800b074:	2700      	movs	r7, #0
 800b076:	e0e2      	b.n	800b23e <__kernel_rem_pio2+0x4a2>
 800b078:	2302      	movs	r3, #2
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	e756      	b.n	800af2c <__kernel_rem_pio2+0x190>
 800b07e:	ab0c      	add	r3, sp, #48	; 0x30
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	b94c      	cbnz	r4, 800b09a <__kernel_rem_pio2+0x2fe>
 800b086:	b12b      	cbz	r3, 800b094 <__kernel_rem_pio2+0x2f8>
 800b088:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b08c:	a80c      	add	r0, sp, #48	; 0x30
 800b08e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b092:	2301      	movs	r3, #1
 800b094:	3201      	adds	r2, #1
 800b096:	461c      	mov	r4, r3
 800b098:	e74f      	b.n	800af3a <__kernel_rem_pio2+0x19e>
 800b09a:	1acb      	subs	r3, r1, r3
 800b09c:	a80c      	add	r0, sp, #48	; 0x30
 800b09e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b0a2:	4623      	mov	r3, r4
 800b0a4:	e7f6      	b.n	800b094 <__kernel_rem_pio2+0x2f8>
 800b0a6:	bf00      	nop
 800b0a8:	0800bdb0 	.word	0x0800bdb0
 800b0ac:	40200000 	.word	0x40200000
 800b0b0:	3ff00000 	.word	0x3ff00000
 800b0b4:	3e700000 	.word	0x3e700000
 800b0b8:	41700000 	.word	0x41700000
 800b0bc:	3fe00000 	.word	0x3fe00000
 800b0c0:	0800bd68 	.word	0x0800bd68
 800b0c4:	1e7a      	subs	r2, r7, #1
 800b0c6:	ab0c      	add	r3, sp, #48	; 0x30
 800b0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b0d0:	a90c      	add	r1, sp, #48	; 0x30
 800b0d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b0d6:	e73e      	b.n	800af56 <__kernel_rem_pio2+0x1ba>
 800b0d8:	1e7a      	subs	r2, r7, #1
 800b0da:	ab0c      	add	r3, sp, #48	; 0x30
 800b0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b0e4:	e7f4      	b.n	800b0d0 <__kernel_rem_pio2+0x334>
 800b0e6:	a90c      	add	r1, sp, #48	; 0x30
 800b0e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	e78b      	b.n	800b00a <__kernel_rem_pio2+0x26e>
 800b0f2:	3401      	adds	r4, #1
 800b0f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b0f8:	2a00      	cmp	r2, #0
 800b0fa:	d0fa      	beq.n	800b0f2 <__kernel_rem_pio2+0x356>
 800b0fc:	ab98      	add	r3, sp, #608	; 0x260
 800b0fe:	449b      	add	fp, r3
 800b100:	9b07      	ldr	r3, [sp, #28]
 800b102:	1c7e      	adds	r6, r7, #1
 800b104:	19dd      	adds	r5, r3, r7
 800b106:	ab98      	add	r3, sp, #608	; 0x260
 800b108:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b10c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800b110:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800b114:	443c      	add	r4, r7
 800b116:	42b4      	cmp	r4, r6
 800b118:	da04      	bge.n	800b124 <__kernel_rem_pio2+0x388>
 800b11a:	4627      	mov	r7, r4
 800b11c:	e6b1      	b.n	800ae82 <__kernel_rem_pio2+0xe6>
 800b11e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b120:	2401      	movs	r4, #1
 800b122:	e7e7      	b.n	800b0f4 <__kernel_rem_pio2+0x358>
 800b124:	f105 0308 	add.w	r3, r5, #8
 800b128:	9309      	str	r3, [sp, #36]	; 0x24
 800b12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b12c:	2700      	movs	r7, #0
 800b12e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b132:	f7f5 f967 	bl	8000404 <__aeabi_i2d>
 800b136:	f04f 0800 	mov.w	r8, #0
 800b13a:	f04f 0900 	mov.w	r9, #0
 800b13e:	9b08      	ldr	r3, [sp, #32]
 800b140:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b144:	3b08      	subs	r3, #8
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	f105 0310 	add.w	r3, r5, #16
 800b14c:	9305      	str	r3, [sp, #20]
 800b14e:	9b06      	ldr	r3, [sp, #24]
 800b150:	429f      	cmp	r7, r3
 800b152:	dd04      	ble.n	800b15e <__kernel_rem_pio2+0x3c2>
 800b154:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b158:	3601      	adds	r6, #1
 800b15a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b15c:	e7db      	b.n	800b116 <__kernel_rem_pio2+0x37a>
 800b15e:	9905      	ldr	r1, [sp, #20]
 800b160:	9d00      	ldr	r5, [sp, #0]
 800b162:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b166:	9105      	str	r1, [sp, #20]
 800b168:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b16c:	9500      	str	r5, [sp, #0]
 800b16e:	f7f5 f9b3 	bl	80004d8 <__aeabi_dmul>
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	4640      	mov	r0, r8
 800b178:	4649      	mov	r1, r9
 800b17a:	f7f4 fff7 	bl	800016c <__adddf3>
 800b17e:	3701      	adds	r7, #1
 800b180:	4680      	mov	r8, r0
 800b182:	4689      	mov	r9, r1
 800b184:	e7e3      	b.n	800b14e <__kernel_rem_pio2+0x3b2>
 800b186:	3c01      	subs	r4, #1
 800b188:	e745      	b.n	800b016 <__kernel_rem_pio2+0x27a>
 800b18a:	f1ca 0200 	rsb	r2, sl, #0
 800b18e:	4640      	mov	r0, r8
 800b190:	4649      	mov	r1, r9
 800b192:	f000 fa91 	bl	800b6b8 <scalbn>
 800b196:	2200      	movs	r2, #0
 800b198:	4ba3      	ldr	r3, [pc, #652]	; (800b428 <__kernel_rem_pio2+0x68c>)
 800b19a:	4604      	mov	r4, r0
 800b19c:	460d      	mov	r5, r1
 800b19e:	f7f5 fc21 	bl	80009e4 <__aeabi_dcmpge>
 800b1a2:	b1f8      	cbz	r0, 800b1e4 <__kernel_rem_pio2+0x448>
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	4ba1      	ldr	r3, [pc, #644]	; (800b42c <__kernel_rem_pio2+0x690>)
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	f7f5 f994 	bl	80004d8 <__aeabi_dmul>
 800b1b0:	f7f5 fc42 	bl	8000a38 <__aeabi_d2iz>
 800b1b4:	4606      	mov	r6, r0
 800b1b6:	f7f5 f925 	bl	8000404 <__aeabi_i2d>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	4b9a      	ldr	r3, [pc, #616]	; (800b428 <__kernel_rem_pio2+0x68c>)
 800b1be:	f7f5 f98b 	bl	80004d8 <__aeabi_dmul>
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f7f4 ffcd 	bl	8000168 <__aeabi_dsub>
 800b1ce:	f7f5 fc33 	bl	8000a38 <__aeabi_d2iz>
 800b1d2:	1c7c      	adds	r4, r7, #1
 800b1d4:	ab0c      	add	r3, sp, #48	; 0x30
 800b1d6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b1da:	f10a 0a18 	add.w	sl, sl, #24
 800b1de:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800b1e2:	e720      	b.n	800b026 <__kernel_rem_pio2+0x28a>
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	f7f5 fc26 	bl	8000a38 <__aeabi_d2iz>
 800b1ec:	ab0c      	add	r3, sp, #48	; 0x30
 800b1ee:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b1f2:	463c      	mov	r4, r7
 800b1f4:	e717      	b.n	800b026 <__kernel_rem_pio2+0x28a>
 800b1f6:	ab0c      	add	r3, sp, #48	; 0x30
 800b1f8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1fc:	f7f5 f902 	bl	8000404 <__aeabi_i2d>
 800b200:	4632      	mov	r2, r6
 800b202:	463b      	mov	r3, r7
 800b204:	f7f5 f968 	bl	80004d8 <__aeabi_dmul>
 800b208:	4652      	mov	r2, sl
 800b20a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b20e:	465b      	mov	r3, fp
 800b210:	4630      	mov	r0, r6
 800b212:	4639      	mov	r1, r7
 800b214:	f7f5 f960 	bl	80004d8 <__aeabi_dmul>
 800b218:	3d01      	subs	r5, #1
 800b21a:	4606      	mov	r6, r0
 800b21c:	460f      	mov	r7, r1
 800b21e:	e715      	b.n	800b04c <__kernel_rem_pio2+0x2b0>
 800b220:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800b224:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b228:	f7f5 f956 	bl	80004d8 <__aeabi_dmul>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	4650      	mov	r0, sl
 800b232:	4659      	mov	r1, fp
 800b234:	f7f4 ff9a 	bl	800016c <__adddf3>
 800b238:	4682      	mov	sl, r0
 800b23a:	468b      	mov	fp, r1
 800b23c:	3701      	adds	r7, #1
 800b23e:	9b02      	ldr	r3, [sp, #8]
 800b240:	429f      	cmp	r7, r3
 800b242:	dc01      	bgt.n	800b248 <__kernel_rem_pio2+0x4ac>
 800b244:	42bd      	cmp	r5, r7
 800b246:	daeb      	bge.n	800b220 <__kernel_rem_pio2+0x484>
 800b248:	ab48      	add	r3, sp, #288	; 0x120
 800b24a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b24e:	e9c3 ab00 	strd	sl, fp, [r3]
 800b252:	3501      	adds	r5, #1
 800b254:	e702      	b.n	800b05c <__kernel_rem_pio2+0x2c0>
 800b256:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b258:	2b03      	cmp	r3, #3
 800b25a:	d86c      	bhi.n	800b336 <__kernel_rem_pio2+0x59a>
 800b25c:	e8df f003 	tbb	[pc, r3]
 800b260:	022f2f59 	.word	0x022f2f59
 800b264:	9a06      	ldr	r2, [sp, #24]
 800b266:	ab48      	add	r3, sp, #288	; 0x120
 800b268:	189d      	adds	r5, r3, r2
 800b26a:	46aa      	mov	sl, r5
 800b26c:	46a3      	mov	fp, r4
 800b26e:	f1bb 0f00 	cmp.w	fp, #0
 800b272:	f300 8087 	bgt.w	800b384 <__kernel_rem_pio2+0x5e8>
 800b276:	46a2      	mov	sl, r4
 800b278:	f1ba 0f01 	cmp.w	sl, #1
 800b27c:	f300 809f 	bgt.w	800b3be <__kernel_rem_pio2+0x622>
 800b280:	2700      	movs	r7, #0
 800b282:	463e      	mov	r6, r7
 800b284:	9d06      	ldr	r5, [sp, #24]
 800b286:	ab48      	add	r3, sp, #288	; 0x120
 800b288:	3508      	adds	r5, #8
 800b28a:	441d      	add	r5, r3
 800b28c:	2c01      	cmp	r4, #1
 800b28e:	f300 80b3 	bgt.w	800b3f8 <__kernel_rem_pio2+0x65c>
 800b292:	9b00      	ldr	r3, [sp, #0]
 800b294:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800b296:	9849      	ldr	r0, [sp, #292]	; 0x124
 800b298:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800b29a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f040 80b5 	bne.w	800b40c <__kernel_rem_pio2+0x670>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	462a      	mov	r2, r5
 800b2a6:	9804      	ldr	r0, [sp, #16]
 800b2a8:	e9c0 2300 	strd	r2, r3, [r0]
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b2b4:	463a      	mov	r2, r7
 800b2b6:	4633      	mov	r3, r6
 800b2b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b2bc:	e03b      	b.n	800b336 <__kernel_rem_pio2+0x59a>
 800b2be:	f04f 0c00 	mov.w	ip, #0
 800b2c2:	4626      	mov	r6, r4
 800b2c4:	4667      	mov	r7, ip
 800b2c6:	9d06      	ldr	r5, [sp, #24]
 800b2c8:	ab48      	add	r3, sp, #288	; 0x120
 800b2ca:	3508      	adds	r5, #8
 800b2cc:	441d      	add	r5, r3
 800b2ce:	2e00      	cmp	r6, #0
 800b2d0:	da42      	bge.n	800b358 <__kernel_rem_pio2+0x5bc>
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d049      	beq.n	800b36c <__kernel_rem_pio2+0x5d0>
 800b2d8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800b2dc:	4662      	mov	r2, ip
 800b2de:	460b      	mov	r3, r1
 800b2e0:	9904      	ldr	r1, [sp, #16]
 800b2e2:	2601      	movs	r6, #1
 800b2e4:	e9c1 2300 	strd	r2, r3, [r1]
 800b2e8:	a948      	add	r1, sp, #288	; 0x120
 800b2ea:	463b      	mov	r3, r7
 800b2ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2f0:	f7f4 ff3a 	bl	8000168 <__aeabi_dsub>
 800b2f4:	4684      	mov	ip, r0
 800b2f6:	460f      	mov	r7, r1
 800b2f8:	ad48      	add	r5, sp, #288	; 0x120
 800b2fa:	42b4      	cmp	r4, r6
 800b2fc:	da38      	bge.n	800b370 <__kernel_rem_pio2+0x5d4>
 800b2fe:	9b00      	ldr	r3, [sp, #0]
 800b300:	b10b      	cbz	r3, 800b306 <__kernel_rem_pio2+0x56a>
 800b302:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b306:	4662      	mov	r2, ip
 800b308:	463b      	mov	r3, r7
 800b30a:	9904      	ldr	r1, [sp, #16]
 800b30c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b310:	e011      	b.n	800b336 <__kernel_rem_pio2+0x59a>
 800b312:	2700      	movs	r7, #0
 800b314:	463d      	mov	r5, r7
 800b316:	9b06      	ldr	r3, [sp, #24]
 800b318:	aa98      	add	r2, sp, #608	; 0x260
 800b31a:	4413      	add	r3, r2
 800b31c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800b320:	2c00      	cmp	r4, #0
 800b322:	da0f      	bge.n	800b344 <__kernel_rem_pio2+0x5a8>
 800b324:	9b00      	ldr	r3, [sp, #0]
 800b326:	b10b      	cbz	r3, 800b32c <__kernel_rem_pio2+0x590>
 800b328:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b32c:	463a      	mov	r2, r7
 800b32e:	462b      	mov	r3, r5
 800b330:	9904      	ldr	r1, [sp, #16]
 800b332:	e9c1 2300 	strd	r2, r3, [r1]
 800b336:	9b05      	ldr	r3, [sp, #20]
 800b338:	f003 0007 	and.w	r0, r3, #7
 800b33c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b344:	4638      	mov	r0, r7
 800b346:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b34a:	4629      	mov	r1, r5
 800b34c:	f7f4 ff0e 	bl	800016c <__adddf3>
 800b350:	3c01      	subs	r4, #1
 800b352:	4607      	mov	r7, r0
 800b354:	460d      	mov	r5, r1
 800b356:	e7e3      	b.n	800b320 <__kernel_rem_pio2+0x584>
 800b358:	4660      	mov	r0, ip
 800b35a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b35e:	4639      	mov	r1, r7
 800b360:	f7f4 ff04 	bl	800016c <__adddf3>
 800b364:	3e01      	subs	r6, #1
 800b366:	4684      	mov	ip, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	e7b0      	b.n	800b2ce <__kernel_rem_pio2+0x532>
 800b36c:	4639      	mov	r1, r7
 800b36e:	e7b5      	b.n	800b2dc <__kernel_rem_pio2+0x540>
 800b370:	4660      	mov	r0, ip
 800b372:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800b376:	4639      	mov	r1, r7
 800b378:	f7f4 fef8 	bl	800016c <__adddf3>
 800b37c:	3601      	adds	r6, #1
 800b37e:	4684      	mov	ip, r0
 800b380:	460f      	mov	r7, r1
 800b382:	e7ba      	b.n	800b2fa <__kernel_rem_pio2+0x55e>
 800b384:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800b388:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800b38c:	4640      	mov	r0, r8
 800b38e:	4649      	mov	r1, r9
 800b390:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b394:	f7f4 feea 	bl	800016c <__adddf3>
 800b398:	4602      	mov	r2, r0
 800b39a:	460b      	mov	r3, r1
 800b39c:	4606      	mov	r6, r0
 800b39e:	460f      	mov	r7, r1
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	f7f4 fee0 	bl	8000168 <__aeabi_dsub>
 800b3a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3ac:	f7f4 fede 	bl	800016c <__adddf3>
 800b3b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b3b8:	e9ca 6700 	strd	r6, r7, [sl]
 800b3bc:	e757      	b.n	800b26e <__kernel_rem_pio2+0x4d2>
 800b3be:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800b3c2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	4639      	mov	r1, r7
 800b3ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3ce:	f7f4 fecd 	bl	800016c <__adddf3>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	4689      	mov	r9, r1
 800b3da:	4630      	mov	r0, r6
 800b3dc:	4639      	mov	r1, r7
 800b3de:	f7f4 fec3 	bl	8000168 <__aeabi_dsub>
 800b3e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3e6:	f7f4 fec1 	bl	800016c <__adddf3>
 800b3ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3ee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b3f2:	e9c5 8900 	strd	r8, r9, [r5]
 800b3f6:	e73f      	b.n	800b278 <__kernel_rem_pio2+0x4dc>
 800b3f8:	4638      	mov	r0, r7
 800b3fa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b3fe:	4631      	mov	r1, r6
 800b400:	f7f4 feb4 	bl	800016c <__adddf3>
 800b404:	3c01      	subs	r4, #1
 800b406:	4607      	mov	r7, r0
 800b408:	460e      	mov	r6, r1
 800b40a:	e73f      	b.n	800b28c <__kernel_rem_pio2+0x4f0>
 800b40c:	9b04      	ldr	r3, [sp, #16]
 800b40e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b412:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b416:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b41a:	601d      	str	r5, [r3, #0]
 800b41c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b420:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b424:	615e      	str	r6, [r3, #20]
 800b426:	e786      	b.n	800b336 <__kernel_rem_pio2+0x59a>
 800b428:	41700000 	.word	0x41700000
 800b42c:	3e700000 	.word	0x3e700000

0800b430 <__kernel_sin>:
 800b430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b434:	b086      	sub	sp, #24
 800b436:	e9cd 2300 	strd	r2, r3, [sp]
 800b43a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b43e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b442:	4682      	mov	sl, r0
 800b444:	460c      	mov	r4, r1
 800b446:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b448:	da03      	bge.n	800b452 <__kernel_sin+0x22>
 800b44a:	f7f5 faf5 	bl	8000a38 <__aeabi_d2iz>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d050      	beq.n	800b4f4 <__kernel_sin+0xc4>
 800b452:	4652      	mov	r2, sl
 800b454:	4623      	mov	r3, r4
 800b456:	4650      	mov	r0, sl
 800b458:	4621      	mov	r1, r4
 800b45a:	f7f5 f83d 	bl	80004d8 <__aeabi_dmul>
 800b45e:	4606      	mov	r6, r0
 800b460:	460f      	mov	r7, r1
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4650      	mov	r0, sl
 800b468:	4621      	mov	r1, r4
 800b46a:	f7f5 f835 	bl	80004d8 <__aeabi_dmul>
 800b46e:	a33e      	add	r3, pc, #248	; (adr r3, 800b568 <__kernel_sin+0x138>)
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	4680      	mov	r8, r0
 800b476:	4689      	mov	r9, r1
 800b478:	4630      	mov	r0, r6
 800b47a:	4639      	mov	r1, r7
 800b47c:	f7f5 f82c 	bl	80004d8 <__aeabi_dmul>
 800b480:	a33b      	add	r3, pc, #236	; (adr r3, 800b570 <__kernel_sin+0x140>)
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	f7f4 fe6f 	bl	8000168 <__aeabi_dsub>
 800b48a:	4632      	mov	r2, r6
 800b48c:	463b      	mov	r3, r7
 800b48e:	f7f5 f823 	bl	80004d8 <__aeabi_dmul>
 800b492:	a339      	add	r3, pc, #228	; (adr r3, 800b578 <__kernel_sin+0x148>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f7f4 fe68 	bl	800016c <__adddf3>
 800b49c:	4632      	mov	r2, r6
 800b49e:	463b      	mov	r3, r7
 800b4a0:	f7f5 f81a 	bl	80004d8 <__aeabi_dmul>
 800b4a4:	a336      	add	r3, pc, #216	; (adr r3, 800b580 <__kernel_sin+0x150>)
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	f7f4 fe5d 	bl	8000168 <__aeabi_dsub>
 800b4ae:	4632      	mov	r2, r6
 800b4b0:	463b      	mov	r3, r7
 800b4b2:	f7f5 f811 	bl	80004d8 <__aeabi_dmul>
 800b4b6:	a334      	add	r3, pc, #208	; (adr r3, 800b588 <__kernel_sin+0x158>)
 800b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4bc:	f7f4 fe56 	bl	800016c <__adddf3>
 800b4c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4c4:	b9dd      	cbnz	r5, 800b4fe <__kernel_sin+0xce>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	f7f5 f803 	bl	80004d8 <__aeabi_dmul>
 800b4d2:	a32f      	add	r3, pc, #188	; (adr r3, 800b590 <__kernel_sin+0x160>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	f7f4 fe46 	bl	8000168 <__aeabi_dsub>
 800b4dc:	4642      	mov	r2, r8
 800b4de:	464b      	mov	r3, r9
 800b4e0:	f7f4 fffa 	bl	80004d8 <__aeabi_dmul>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4650      	mov	r0, sl
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	f7f4 fe3e 	bl	800016c <__adddf3>
 800b4f0:	4682      	mov	sl, r0
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	4650      	mov	r0, sl
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	b006      	add	sp, #24
 800b4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fe:	2200      	movs	r2, #0
 800b500:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b504:	4b24      	ldr	r3, [pc, #144]	; (800b598 <__kernel_sin+0x168>)
 800b506:	f7f4 ffe7 	bl	80004d8 <__aeabi_dmul>
 800b50a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b50e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b512:	4640      	mov	r0, r8
 800b514:	4649      	mov	r1, r9
 800b516:	f7f4 ffdf 	bl	80004d8 <__aeabi_dmul>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b522:	f7f4 fe21 	bl	8000168 <__aeabi_dsub>
 800b526:	4632      	mov	r2, r6
 800b528:	463b      	mov	r3, r7
 800b52a:	f7f4 ffd5 	bl	80004d8 <__aeabi_dmul>
 800b52e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b532:	f7f4 fe19 	bl	8000168 <__aeabi_dsub>
 800b536:	a316      	add	r3, pc, #88	; (adr r3, 800b590 <__kernel_sin+0x160>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	4606      	mov	r6, r0
 800b53e:	460f      	mov	r7, r1
 800b540:	4640      	mov	r0, r8
 800b542:	4649      	mov	r1, r9
 800b544:	f7f4 ffc8 	bl	80004d8 <__aeabi_dmul>
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4630      	mov	r0, r6
 800b54e:	4639      	mov	r1, r7
 800b550:	f7f4 fe0c 	bl	800016c <__adddf3>
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	4650      	mov	r0, sl
 800b55a:	4621      	mov	r1, r4
 800b55c:	f7f4 fe04 	bl	8000168 <__aeabi_dsub>
 800b560:	e7c6      	b.n	800b4f0 <__kernel_sin+0xc0>
 800b562:	bf00      	nop
 800b564:	f3af 8000 	nop.w
 800b568:	5acfd57c 	.word	0x5acfd57c
 800b56c:	3de5d93a 	.word	0x3de5d93a
 800b570:	8a2b9ceb 	.word	0x8a2b9ceb
 800b574:	3e5ae5e6 	.word	0x3e5ae5e6
 800b578:	57b1fe7d 	.word	0x57b1fe7d
 800b57c:	3ec71de3 	.word	0x3ec71de3
 800b580:	19c161d5 	.word	0x19c161d5
 800b584:	3f2a01a0 	.word	0x3f2a01a0
 800b588:	1110f8a6 	.word	0x1110f8a6
 800b58c:	3f811111 	.word	0x3f811111
 800b590:	55555549 	.word	0x55555549
 800b594:	3fc55555 	.word	0x3fc55555
 800b598:	3fe00000 	.word	0x3fe00000
 800b59c:	00000000 	.word	0x00000000

0800b5a0 <floor>:
 800b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b5a8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b5ac:	2e13      	cmp	r6, #19
 800b5ae:	4607      	mov	r7, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	dc35      	bgt.n	800b624 <floor+0x84>
 800b5b8:	2e00      	cmp	r6, #0
 800b5ba:	da16      	bge.n	800b5ea <floor+0x4a>
 800b5bc:	a336      	add	r3, pc, #216	; (adr r3, 800b698 <floor+0xf8>)
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f7f4 fdd3 	bl	800016c <__adddf3>
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f7f5 fa15 	bl	80009f8 <__aeabi_dcmpgt>
 800b5ce:	b148      	cbz	r0, 800b5e4 <floor+0x44>
 800b5d0:	2c00      	cmp	r4, #0
 800b5d2:	da5b      	bge.n	800b68c <floor+0xec>
 800b5d4:	2500      	movs	r5, #0
 800b5d6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b5da:	4a31      	ldr	r2, [pc, #196]	; (800b6a0 <floor+0x100>)
 800b5dc:	433b      	orrs	r3, r7
 800b5de:	42ab      	cmp	r3, r5
 800b5e0:	bf18      	it	ne
 800b5e2:	4614      	movne	r4, r2
 800b5e4:	4623      	mov	r3, r4
 800b5e6:	462f      	mov	r7, r5
 800b5e8:	e026      	b.n	800b638 <floor+0x98>
 800b5ea:	4a2e      	ldr	r2, [pc, #184]	; (800b6a4 <floor+0x104>)
 800b5ec:	fa42 f806 	asr.w	r8, r2, r6
 800b5f0:	ea01 0208 	and.w	r2, r1, r8
 800b5f4:	4302      	orrs	r2, r0
 800b5f6:	d01f      	beq.n	800b638 <floor+0x98>
 800b5f8:	a327      	add	r3, pc, #156	; (adr r3, 800b698 <floor+0xf8>)
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	f7f4 fdb5 	bl	800016c <__adddf3>
 800b602:	2200      	movs	r2, #0
 800b604:	2300      	movs	r3, #0
 800b606:	f7f5 f9f7 	bl	80009f8 <__aeabi_dcmpgt>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d0ea      	beq.n	800b5e4 <floor+0x44>
 800b60e:	2c00      	cmp	r4, #0
 800b610:	bfbe      	ittt	lt
 800b612:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b616:	fa43 f606 	asrlt.w	r6, r3, r6
 800b61a:	19a4      	addlt	r4, r4, r6
 800b61c:	ea24 0408 	bic.w	r4, r4, r8
 800b620:	2500      	movs	r5, #0
 800b622:	e7df      	b.n	800b5e4 <floor+0x44>
 800b624:	2e33      	cmp	r6, #51	; 0x33
 800b626:	dd0b      	ble.n	800b640 <floor+0xa0>
 800b628:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b62c:	d104      	bne.n	800b638 <floor+0x98>
 800b62e:	4602      	mov	r2, r0
 800b630:	f7f4 fd9c 	bl	800016c <__adddf3>
 800b634:	4607      	mov	r7, r0
 800b636:	460b      	mov	r3, r1
 800b638:	4638      	mov	r0, r7
 800b63a:	4619      	mov	r1, r3
 800b63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b640:	f04f 32ff 	mov.w	r2, #4294967295
 800b644:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b648:	fa22 f808 	lsr.w	r8, r2, r8
 800b64c:	ea18 0f00 	tst.w	r8, r0
 800b650:	d0f2      	beq.n	800b638 <floor+0x98>
 800b652:	a311      	add	r3, pc, #68	; (adr r3, 800b698 <floor+0xf8>)
 800b654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b658:	f7f4 fd88 	bl	800016c <__adddf3>
 800b65c:	2200      	movs	r2, #0
 800b65e:	2300      	movs	r3, #0
 800b660:	f7f5 f9ca 	bl	80009f8 <__aeabi_dcmpgt>
 800b664:	2800      	cmp	r0, #0
 800b666:	d0bd      	beq.n	800b5e4 <floor+0x44>
 800b668:	2c00      	cmp	r4, #0
 800b66a:	da02      	bge.n	800b672 <floor+0xd2>
 800b66c:	2e14      	cmp	r6, #20
 800b66e:	d103      	bne.n	800b678 <floor+0xd8>
 800b670:	3401      	adds	r4, #1
 800b672:	ea25 0508 	bic.w	r5, r5, r8
 800b676:	e7b5      	b.n	800b5e4 <floor+0x44>
 800b678:	2301      	movs	r3, #1
 800b67a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b67e:	fa03 f606 	lsl.w	r6, r3, r6
 800b682:	4435      	add	r5, r6
 800b684:	42bd      	cmp	r5, r7
 800b686:	bf38      	it	cc
 800b688:	18e4      	addcc	r4, r4, r3
 800b68a:	e7f2      	b.n	800b672 <floor+0xd2>
 800b68c:	2500      	movs	r5, #0
 800b68e:	462c      	mov	r4, r5
 800b690:	e7a8      	b.n	800b5e4 <floor+0x44>
 800b692:	bf00      	nop
 800b694:	f3af 8000 	nop.w
 800b698:	8800759c 	.word	0x8800759c
 800b69c:	7e37e43c 	.word	0x7e37e43c
 800b6a0:	bff00000 	.word	0xbff00000
 800b6a4:	000fffff 	.word	0x000fffff

0800b6a8 <matherr>:
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	4770      	bx	lr

0800b6ac <nan>:
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	4901      	ldr	r1, [pc, #4]	; (800b6b4 <nan+0x8>)
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	7ff80000 	.word	0x7ff80000

0800b6b8 <scalbn>:
 800b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ba:	4616      	mov	r6, r2
 800b6bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	460d      	mov	r5, r1
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	b982      	cbnz	r2, 800b6ea <scalbn+0x32>
 800b6c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6cc:	4303      	orrs	r3, r0
 800b6ce:	d034      	beq.n	800b73a <scalbn+0x82>
 800b6d0:	4b2d      	ldr	r3, [pc, #180]	; (800b788 <scalbn+0xd0>)
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f7f4 ff00 	bl	80004d8 <__aeabi_dmul>
 800b6d8:	4b2c      	ldr	r3, [pc, #176]	; (800b78c <scalbn+0xd4>)
 800b6da:	4604      	mov	r4, r0
 800b6dc:	429e      	cmp	r6, r3
 800b6de:	460d      	mov	r5, r1
 800b6e0:	da0d      	bge.n	800b6fe <scalbn+0x46>
 800b6e2:	a325      	add	r3, pc, #148	; (adr r3, 800b778 <scalbn+0xc0>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	e01c      	b.n	800b724 <scalbn+0x6c>
 800b6ea:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800b6ee:	42ba      	cmp	r2, r7
 800b6f0:	d109      	bne.n	800b706 <scalbn+0x4e>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	f7f4 fd3a 	bl	800016c <__adddf3>
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	e01d      	b.n	800b73a <scalbn+0x82>
 800b6fe:	460b      	mov	r3, r1
 800b700:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b704:	3a36      	subs	r2, #54	; 0x36
 800b706:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b70a:	4432      	add	r2, r6
 800b70c:	428a      	cmp	r2, r1
 800b70e:	dd0c      	ble.n	800b72a <scalbn+0x72>
 800b710:	4622      	mov	r2, r4
 800b712:	462b      	mov	r3, r5
 800b714:	a11a      	add	r1, pc, #104	; (adr r1, 800b780 <scalbn+0xc8>)
 800b716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b71a:	f000 f83b 	bl	800b794 <copysign>
 800b71e:	a318      	add	r3, pc, #96	; (adr r3, 800b780 <scalbn+0xc8>)
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f7f4 fed8 	bl	80004d8 <__aeabi_dmul>
 800b728:	e7e6      	b.n	800b6f8 <scalbn+0x40>
 800b72a:	2a00      	cmp	r2, #0
 800b72c:	dd08      	ble.n	800b740 <scalbn+0x88>
 800b72e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b732:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b736:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b73a:	4620      	mov	r0, r4
 800b73c:	4629      	mov	r1, r5
 800b73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b740:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b744:	da0b      	bge.n	800b75e <scalbn+0xa6>
 800b746:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b74a:	429e      	cmp	r6, r3
 800b74c:	4622      	mov	r2, r4
 800b74e:	462b      	mov	r3, r5
 800b750:	dce0      	bgt.n	800b714 <scalbn+0x5c>
 800b752:	a109      	add	r1, pc, #36	; (adr r1, 800b778 <scalbn+0xc0>)
 800b754:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b758:	f000 f81c 	bl	800b794 <copysign>
 800b75c:	e7c1      	b.n	800b6e2 <scalbn+0x2a>
 800b75e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b762:	3236      	adds	r2, #54	; 0x36
 800b764:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b768:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b76c:	4620      	mov	r0, r4
 800b76e:	4629      	mov	r1, r5
 800b770:	2200      	movs	r2, #0
 800b772:	4b07      	ldr	r3, [pc, #28]	; (800b790 <scalbn+0xd8>)
 800b774:	e7d6      	b.n	800b724 <scalbn+0x6c>
 800b776:	bf00      	nop
 800b778:	c2f8f359 	.word	0xc2f8f359
 800b77c:	01a56e1f 	.word	0x01a56e1f
 800b780:	8800759c 	.word	0x8800759c
 800b784:	7e37e43c 	.word	0x7e37e43c
 800b788:	43500000 	.word	0x43500000
 800b78c:	ffff3cb0 	.word	0xffff3cb0
 800b790:	3c900000 	.word	0x3c900000

0800b794 <copysign>:
 800b794:	b530      	push	{r4, r5, lr}
 800b796:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b79a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b79e:	ea42 0503 	orr.w	r5, r2, r3
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	bd30      	pop	{r4, r5, pc}
	...

0800b7a8 <_init>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	bf00      	nop
 800b7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ae:	bc08      	pop	{r3}
 800b7b0:	469e      	mov	lr, r3
 800b7b2:	4770      	bx	lr

0800b7b4 <_fini>:
 800b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b6:	bf00      	nop
 800b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ba:	bc08      	pop	{r3}
 800b7bc:	469e      	mov	lr, r3
 800b7be:	4770      	bx	lr
